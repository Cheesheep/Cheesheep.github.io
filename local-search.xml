<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo和Fluid插件推荐</title>
    <link href="/2025/08/15/Hexo/Hexo%E5%92%8CFluid%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <url>/2025/08/15/Hexo/Hexo%E5%92%8CFluid%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在这记录一些比较好用的插件，在美化博客页面的过程中就顺便记录下来了</p></blockquote><h2 id="1-Hexo-directory-category：智能分类"><a href="#1-Hexo-directory-category：智能分类" class="headerlink" title="1. Hexo-directory-category：智能分类"></a>1. Hexo-directory-category：智能分类</h2><p>实用程度：⭐⭐⭐⭐⭐</p><p>有了这个插件就可以直接省去在md文件的顶部添加<code>categories</code>了，太好用了只能说</p><p>例如你的博客根目录下有这么一个文件<code>~/_post/hexo/day1/hello.md</code>，那么他会自动为这篇文章添加一个名为<code>hexo</code>的类别，以及一个<code> day1</code>的子类别</p><h3 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h3><p>在终端进入博客目录，运行一下命令安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-directory-category --save<br></code></pre></td></tr></table></figure><p>安装完成后，在Hexo的_config.yml配置文件中添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">plugins:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">hexo-directory-category</span><br></code></pre></td></tr></table></figure><p>更多的功能可以参考以下这篇文章或者插件本身的GitHub</p><p><a href="https://developer.baidu.com/article/details/3284831">Hexo-directory-category：让文章分类更智能-百度开发者中心</a></p><p><a href="https://github.com/zthxxx/hexo-directory-category">zthxxx&#x2F;hexo-directory-category: Automatically add category to Hexo article according to the article file directory.</a></p><h2 id="2-Loading。。。"><a href="#2-Loading。。。" class="headerlink" title="2. Loading。。。"></a>2. Loading。。。</h2>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>配置Fluid过程中遇到的问题</title>
    <link href="/2025/08/14/Hexo/%E9%85%8D%E7%BD%AEFluid%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2025/08/14/Hexo/%E9%85%8D%E7%BD%AEFluid%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="配置Fluid过程中遇到的问题"><a href="#配置Fluid过程中遇到的问题" class="headerlink" title="配置Fluid过程中遇到的问题"></a>配置Fluid过程中遇到的问题</h1><blockquote><p>既然刚刚开始，那就在调试的时候顺便记录一下遇到的问题吧，边配置边写</p></blockquote><h2 id="1-Gitee图床的图片无法正常打开"><a href="#1-Gitee图床的图片无法正常打开" class="headerlink" title="1. Gitee图床的图片无法正常打开"></a>1. Gitee图床的图片无法正常打开</h2><p>这属于一个比较常见的问题，看了别的博主说是该死的Gitee（就你事多）启用了防盗链机制</p><p>导致图床图片无法显示在其他网站上面</p><p>为了解决这个问题，本质上来说，只需要在对应页面的<code>HTML</code>文件的<code>head</code>部分加上一行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;referrer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-referrer&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>而由于我使用的是Fluid框架，哪来的<code>HTML</code>文件呢，有两个方法</p><ol><li><p>在博客根目录的<code>\node_modules\hexo-theme-fluid\layout\_partials\head.ejs</code>当中添加上面的那一行，但是这样在以后如果更新了fluid框架则这句话自然就没有了，因此不够robust</p></li><li><p>所以需要使用无痛注入EJS的方法，在博客根目录的scripts目录下新建一个js文件（任意起名），然后写入下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// scripts/inject-head.js</span><br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<br>  <span class="hljs-string">&#x27;head_begin&#x27;</span>,                  <span class="hljs-comment">// 插入到 &lt;head&gt; 开头</span><br>  <span class="hljs-string">&#x27;&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;&#x27;</span>, <span class="hljs-comment">//用于让Gitee的图床得以显示，因为一些防护机制无法正常显示图片</span><br>  <span class="hljs-string">&#x27;default&#x27;</span>                      <span class="hljs-comment">// 注入到所有页面</span><br>);<br></code></pre></td></tr></table></figure><p>这样就可以无痛将其注入到所有页面当中，当你打开你的博客页面使用开发者工具就可以查看到head处确实是添加了这么一句话</p></li></ol><p>然后Gitee图床的图片就能正常显示啦~</p><h2 id="2-LeanCloud配置了之后也无法显示阅读量之类的参数"><a href="#2-LeanCloud配置了之后也无法显示阅读量之类的参数" class="headerlink" title="2. LeanCloud配置了之后也无法显示阅读量之类的参数"></a>2. LeanCloud配置了之后也无法显示阅读量之类的参数</h2><p>网上搜到说是现在LeanCloud不支持国内使用了，所以即使注册成功了API key，配置好了也是无效的</p><p>可以去找其他的网页统计工具</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>重新开始写MD，重新配置一次typora</title>
    <link href="/2025/08/13/%E6%97%A5%E8%AE%B0%E9%9A%8F%E7%AC%94/%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E5%86%99MD/"/>
    <url>/2025/08/13/%E6%97%A5%E8%AE%B0%E9%9A%8F%E7%AC%94/%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%E5%86%99MD/</url>
    
    <content type="html"><![CDATA[<p>时隔多久了，两年多了？都忘了</p><p>现在是2025年8月13日早上10：48，坐标位于深圳大学计算机与软件学院516我的工位上</p><p>自从23年年底开摆在之后好像就没有写过MD了，唉😔</p><p>没事儿，有结束，也有开始，本篇MD拿来测试一下新买的台式电脑配置的typora图床是否能够上传到Gitee</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20250813104958998.png" alt="image-20250813104958998"></p><p>拍了张电脑全屏，yes！</p><p>上传成功啦！！堂堂复活！！</p><p>简单总结一下吧，其实也拖了比较久才弄完</p><ol><li>受到组长启发，想弄个人博客网站</li><li>框架下的博客网站只需要上传MD文件，因此打算重新写MD，这样就需要重新配一次Typora</li><li>下载Nodejs（博客网站的框架本来也要用到npm去下载，例如hexo），下载并配置Path后也需要重启才能全局cmd有npm的指令生效</li><li>下载Typora并激活（随便找个教程，里面有激活工具，会生成一个序列号）</li><li>下载PicGo（现在推荐下载2.4.0Beta9以后的，否则插件里面找不到Gitee，不过也可以直接在picgo文件夹下用命令行去npm install对应的plugin就行）</li><li>上网搜怎么配置Typora和PicGo，由于之前我已经创建过GItee仓库了，配置好后，立刻就能用了嘿嘿</li><li>接下来就是去弄网站了</li></ol><p>再测试多一张：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20250813110648510.png" alt="image-20250813110648510"></p><p>好的没问题，good luck~</p>]]></content>
    
    
    <categories>
      
      <category>日记随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>本站导航</title>
    <link href="/2025/08/13/hello-world/"/>
    <url>/2025/08/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is <a href="https://bilibili.com/">your</a> very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>欢迎来到本网站，这里是导航页</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>明火与烟雾检测算法--笔记</title>
    <link href="/2023/10/15/%E5%A4%A7%E5%AD%A6%E7%AB%9E%E8%B5%9B/CV%E6%AF%94%E8%B5%9B/%E6%98%8E%E7%81%AB%E4%B8%8E%E7%83%9F%E9%9B%BE%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95--%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/10/15/%E5%A4%A7%E5%AD%A6%E7%AB%9E%E8%B5%9B/CV%E6%AF%94%E8%B5%9B/%E6%98%8E%E7%81%AB%E4%B8%8E%E7%83%9F%E9%9B%BE%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95--%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="明火与烟雾检测算法–笔记"><a href="#明火与烟雾检测算法–笔记" class="headerlink" title="明火与烟雾检测算法–笔记"></a>明火与烟雾检测算法–笔记</h1><h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><blockquote><p>题目（来自极市打榜）：<a href="https://cvmart.net/topList/10885?tab=RankDescription">【明火与烟雾识别】-视觉算法打榜-极市开发者平台 (cvmart.net)</a></p><p>教程参考（以下代码基本直接参考）：<a href="https://cvmart.net/community/detail/6224">快递爆仓识别算法冠军方案总结-极市开发者社区 (cvmart.net)</a></p><p>一些注意：后面的part：《遇到的问题》都是在参考上面的教程的时候遇到的各种各样的问题，可以说是非常非常多问题，完整流程这里都是基于已经解决了上面的那些问题</p></blockquote><h2 id="1-完整流程"><a href="#1-完整流程" class="headerlink" title="1. 完整流程"></a>1. 完整流程</h2><blockquote><ul><li>分成如下部分：模型训练、模型推理</li><li>我的所有过程都是基于极市的要求完成，例如文件夹位置的分布，运行特定代码的文件名，因此有不了解的部分可以去看下极市的相关文档<a href="https://cvmart.net/document">极市开发者平台-计算机视觉算法开发落地平台-极市科技 (cvmart.net)</a></li></ul></blockquote><p>首先来看下文件架构</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20231015222841703.png" alt="image-20231015222841703"></p><ul><li><p>训练：调用train里面的文件内容，并且模型输出也是在<code>project/train/models</code>下</p><p>网络模型的代码就放在<code>src_repo</code>里面，相关文件可以放到train下</p></li><li><p>测试：调用ev_sdk里面的代码，最终调用的文件<code>ji.py</code>，相关的文件可以放到<code>project/ev_sdk/src</code>文件夹下面，例如训练好的模型，或者一些要用到的脚本之类的</p></li></ul><h3 id="1-1-模型训练"><a href="#1-1-模型训练" class="headerlink" title="1.1 模型训练"></a>1.1 模型训练</h3><h4 id="1-1-1-模型选取："><a href="#1-1-1-模型选取：" class="headerlink" title="1.1.1 模型选取："></a>1.1.1 模型选取：</h4><p><img src="https://minio.cvmart.net/cvmart-community/images/202206/30/0/006C3FgEgy1h0qq7iizr4j30u80jmdlf.jpg" alt="img"></p><p>算法选择<code>BiseNetV2</code>作为Baseline，其在速度和精度上都是很好的，文章提到STDC也很不错</p><p>Github链接：<a href="https://github.com/CoinCheung/BiSeNet">https://github.com/CoinCheung/BiSeNet</a></p><p>直接将整个仓库clone下来，放入<code>project/train/src_repo</code>下面</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20231015223343850.png" alt="image-20231015223343850"></p><h4 id="1-1-2-数据集划分"><a href="#1-1-2-数据集划分" class="headerlink" title="1.1.2 数据集划分"></a>1.1.2 数据集划分</h4><p>在<code>src_repo</code>下面创建文件<code>split_dataset.py</code></p><p>用于训练集和测试集的划分，该文件在后面的run.sh文件当中会用到</p><p>当然也可以直接运行：<code>python split_dataset.py /home/data</code></p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Usage: python split_dataset.py /home/data</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> division<br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> pathlib<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET<br><span class="hljs-keyword">import</span> io<br><br>dataset_root = <span class="hljs-string">&#x27;/project/train/src_repo/dataset&#x27;</span><br>supported_fmt = [<span class="hljs-string">&#x27;.jpg&#x27;</span>, <span class="hljs-string">&#x27;.JPG&#x27;</span>]<br>       <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    os.makedirs(dataset_root, exist_ok=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(sys.argv[<span class="hljs-number">1</span>]):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;sys.argv[<span class="hljs-number">1</span>]&#125;</span> 不存在!&#x27;</span>)<br>        exit(-<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 遍历数据集目录下所有xml文件及其对应的图片</span><br>    dataset_path = pathlib.Path(sys.argv[<span class="hljs-number">1</span>])<br>    found_data_list = []<br>    <span class="hljs-keyword">for</span> mask_file <span class="hljs-keyword">in</span> dataset_path.glob(<span class="hljs-string">&#x27;**/*.png&#x27;</span>):<br>        possible_images = [mask_file.with_suffix(suffix) <span class="hljs-keyword">for</span> suffix <span class="hljs-keyword">in</span> supported_fmt]<br>        supported_images = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> p: p.is_file(), possible_images))<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(supported_images) == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;找不到对应的图片文件：`<span class="hljs-subst">&#123;mask_file.as_posix()&#125;</span>`&#x27;</span>)<br>            <span class="hljs-keyword">continue</span><br>        found_data_list.append(&#123;<span class="hljs-string">&#x27;image&#x27;</span>: supported_images[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;label&#x27;</span>: mask_file&#125;)<br><br>    <span class="hljs-comment"># 随机化数据集，将数据集拆分成训练集和验证集，并将其拷贝到/project/train/src_repo/dataset下</span><br>    random.shuffle(found_data_list)<br>    train_data_count = <span class="hljs-built_in">len</span>(found_data_list) * <span class="hljs-number">4</span> / <span class="hljs-number">5</span><br>    train_data_list = []<br>    valid_data_list = []<br>    <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(found_data_list):<br>        <span class="hljs-keyword">if</span> i &lt; train_data_count:  <span class="hljs-comment"># 训练集</span><br>            data_list = train_data_list<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 验证集</span><br>            data_list = valid_data_list<br>        data_list.append(data)<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(dataset_root, <span class="hljs-string">&#x27;train.txt&#x27;</span>), <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> train_data_list:<br>            f.write(name[<span class="hljs-string">&#x27;image&#x27;</span>].as_posix() + <span class="hljs-string">&#x27;,&#x27;</span> + name[<span class="hljs-string">&#x27;label&#x27;</span>].as_posix() + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(dataset_root, <span class="hljs-string">&#x27;val.txt&#x27;</span>), <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> valid_data_list:<br>            f.write(name[<span class="hljs-string">&#x27;image&#x27;</span>].as_posix() + <span class="hljs-string">&#x27;,&#x27;</span> + name[<span class="hljs-string">&#x27;label&#x27;</span>].as_posix() + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Done&#x27;</span>)<br></code></pre></td></tr></table></figure><p>该文件可以适用于其他所有类型的语义分割数据集划分，没有需要特意修改的地方</p><h4 id="1-1-3-数据集类"><a href="#1-1-3-数据集类" class="headerlink" title="1.1.3 数据集类"></a>1.1.3 数据集类</h4><p>这里的具体文件是哪一个在原来的教程里面并没有说明清楚，因此当时找文件花了我一点时间</p><p>首先是在<code>src_repo/BiseNet/lib/data</code>当中新建一个<code>fireandsmoke.py</code>文件，作为我们明火烟雾识别的一个基本数据集类</p><p>代码如下（和data文件下的其他文件格式是非常类似的）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- encoding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> os.path <span class="hljs-keyword">as</span> osp<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-keyword">import</span> torch.distributed <span class="hljs-keyword">as</span> dist<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">import</span> lib.data.transform_cv2 <span class="hljs-keyword">as</span> T<br><span class="hljs-keyword">from</span> lib.data.sampler <span class="hljs-keyword">import</span> RepeatedDistSampler<br><span class="hljs-keyword">from</span> lib.data.base_dataset <span class="hljs-keyword">import</span> BaseDataset<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FireAndSmoke</span>(<span class="hljs-title class_ inherited__">BaseDataset</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, dataroot, annpath, trans_func=<span class="hljs-literal">None</span>, mode=<span class="hljs-string">&#x27;train&#x27;</span></span>):<br>        <span class="hljs-built_in">super</span>(FireAndSmoke, <span class="hljs-variable language_">self</span>).__init__(dataroot, annpath, trans_func, mode)<br>        <span class="hljs-variable language_">self</span>.n_cats = <span class="hljs-number">6</span> <br>        <span class="hljs-variable language_">self</span>.lb_ignore = <span class="hljs-number">255</span><br><br>        <span class="hljs-variable language_">self</span>.to_tensor = T.ToTensor(<br>            mean=(<span class="hljs-number">0.46962251</span>, <span class="hljs-number">0.4464104</span>,  <span class="hljs-number">0.40718787</span>), <br>            std=(<span class="hljs-number">0.27469736</span>, <span class="hljs-number">0.27012361</span>, <span class="hljs-number">0.28515933</span>),<br>        )<br></code></pre></td></tr></table></figure><p>该代码用到其他例子上只需要修改类名即可，例如如果是分割快递爆仓图片，类名则可以为Expressage</p><p>接下来同样是在<code>src_repo/BiseNet/lib/data</code>文件夹里面，这次是修改<code>get_dataloader.py</code>，需要加入一些新的代码，下面给出整个文件的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset, DataLoader<br><span class="hljs-keyword">import</span> torch.distributed <span class="hljs-keyword">as</span> dist<br><br><span class="hljs-keyword">import</span> lib.data.transform_cv2 <span class="hljs-keyword">as</span> T<br><span class="hljs-keyword">from</span> lib.data.sampler <span class="hljs-keyword">import</span> RepeatedDistSampler<br><br><span class="hljs-keyword">from</span> lib.data.cityscapes_cv2 <span class="hljs-keyword">import</span> CityScapes<br><span class="hljs-keyword">from</span> lib.data.coco <span class="hljs-keyword">import</span> CocoStuff<br><span class="hljs-keyword">from</span> lib.data.ade20k <span class="hljs-keyword">import</span> ADE20k<br><span class="hljs-keyword">from</span> lib.data.customer_dataset <span class="hljs-keyword">import</span> CustomerDataset<br><span class="hljs-comment"># 添加下面的语句</span><br><span class="hljs-keyword">from</span> lib.data.fireandsmoke <span class="hljs-keyword">import</span> FireAndSmoke<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformationTrain</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, scales, cropsize</span>):<br>        <span class="hljs-variable language_">self</span>.trans_func = T.Compose([<br>            T.RandomResizedCrop(scales, cropsize),<br>            T.RandomHorizontalFlip(),<br>            T.ColorJitter(<br>                brightness=<span class="hljs-number">0.4</span>,<br>                contrast=<span class="hljs-number">0.4</span>,<br>                saturation=<span class="hljs-number">0.4</span><br>            ),<br>        ])<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, im_lb</span>):<br>        im_lb = <span class="hljs-variable language_">self</span>.trans_func(im_lb)<br>        <span class="hljs-keyword">return</span> im_lb<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TransformationVal</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, im_lb</span>):<br>        im, lb = im_lb[<span class="hljs-string">&#x27;im&#x27;</span>], im_lb[<span class="hljs-string">&#x27;lb&#x27;</span>]<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dict</span>(im=im, lb=lb)<br><br><span class="hljs-comment"># 下面是该代码原本就有了的</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_data_loader</span>(<span class="hljs-params">cfg, mode=<span class="hljs-string">&#x27;train&#x27;</span></span>):<br>    <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;train&#x27;</span>:<br>        trans_func = T.TransformationTrain(cfg.scales, cfg.cropsize)<br>        batchsize = cfg.ims_per_gpu<br>        annpath = cfg.train_im_anns<br>        shuffle = <span class="hljs-literal">True</span><br>        drop_last = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> mode == <span class="hljs-string">&#x27;val&#x27;</span>:<br>        trans_func = T.TransformationVal()<br>        batchsize = cfg.eval_ims_per_gpu<br>        annpath = cfg.val_im_anns<br>        shuffle = <span class="hljs-literal">False</span><br>        drop_last = <span class="hljs-literal">False</span><br><br>    ds = <span class="hljs-built_in">eval</span>(cfg.dataset)(cfg.im_root, annpath, trans_func=trans_func, mode=mode)<br><br>    <span class="hljs-keyword">if</span> dist.is_initialized():<br>        <span class="hljs-keyword">assert</span> dist.is_available(), <span class="hljs-string">&quot;dist should be initialzed&quot;</span><br>        <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;train&#x27;</span>:<br>            <span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> cfg.max_iter <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br>            n_train_imgs = cfg.ims_per_gpu * dist.get_world_size() * cfg.max_iter<br>            sampler = RepeatedDistSampler(ds, n_train_imgs, shuffle=shuffle)<br>        <span class="hljs-keyword">else</span>:<br>            sampler = torch.utils.data.distributed.DistributedSampler(<br>                ds, shuffle=shuffle)<br>        batchsampler = torch.utils.data.sampler.BatchSampler(<br>            sampler, batchsize, drop_last=drop_last<br>        )<br>        dl = DataLoader(<br>            ds,<br>            batch_sampler=batchsampler,<br>            num_workers=<span class="hljs-number">4</span>,<br>            pin_memory=<span class="hljs-literal">True</span>,<br>        )<br>    <span class="hljs-keyword">else</span>:<br>        dl = DataLoader(<br>            ds,<br>            batch_size=batchsize,<br>            shuffle=shuffle,<br>            drop_last=drop_last,<br>            num_workers=<span class="hljs-number">4</span>,<br>            pin_memory=<span class="hljs-literal">True</span>,<br>        )<br>    <span class="hljs-keyword">return</span> dl<br><br></code></pre></td></tr></table></figure><p>不过这里我没太看懂，这里的代码根本没有用到fireandsmoke类的内容，但是却导入了。</p><p>不过懒得管了。</p><h4 id="1-1-4-配置文件："><a href="#1-1-4-配置文件：" class="headerlink" title="1.1.4 配置文件："></a>1.1.4 配置文件：</h4><blockquote><p>1. </p></blockquote><p>配置文件的位置是<code>src_repo/BiseNet/config</code>，可以看到里面有许多官方给出的配置文件，例如<code>bisenetv2_city.py</code>是用来进行城市道路分割</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20231019171459244.png" alt="image-20231019171459244"></p><p>因此我们自己新建一个配置文件，就叫<code>bisenetv2_fireandsmoke.py</code></p><p>配置代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## bisenetv2</span><br>cfg = <span class="hljs-built_in">dict</span>(<br>    model_type=<span class="hljs-string">&#x27;bisenetv2&#x27;</span>,<br>    n_cats=<span class="hljs-number">6</span>, <span class="hljs-comment">#这里是六个类别，和快递爆仓不同</span><br>    num_aux_heads=<span class="hljs-number">4</span>,<br>    lr_start=<span class="hljs-number">5e-3</span>,<br>    weight_decay=<span class="hljs-number">1e-4</span>,<br>    warmup_iters=<span class="hljs-number">1000</span>,<br>    max_iter=<span class="hljs-number">32000</span>,<br>    dataset=<span class="hljs-string">&#x27;FireAndSmoke&#x27;</span>,<br>    im_root=<span class="hljs-string">&#x27;&#x27;</span>,<br>    train_im_anns=<span class="hljs-string">&#x27;/project/train/src_repo/dataset/train.txt&#x27;</span>,<br>    val_im_anns=<span class="hljs-string">&#x27;/project/train/src_repo/dataset/val.txt&#x27;</span>,<br>    scales=[<span class="hljs-number">0.75</span>, <span class="hljs-number">2.</span>],<br>    cropsize=[<span class="hljs-number">640</span>, <span class="hljs-number">640</span>],<br>    eval_crop=[<span class="hljs-number">640</span>, <span class="hljs-number">640</span>],<br>    eval_scales=[<span class="hljs-number">0.5</span>, <span class="hljs-number">0.75</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1.25</span>, <span class="hljs-number">1.5</span>, <span class="hljs-number">1.75</span>],<br>    ims_per_gpu=<span class="hljs-number">16</span>,<br>    eval_ims_per_gpu=<span class="hljs-number">1</span>,<br>    use_fp16=<span class="hljs-literal">True</span>,<br>    use_sync_bn=<span class="hljs-literal">True</span>,<br>    respth=<span class="hljs-string">&#x27;/project/train/models&#x27;</span>,<br>)<br></code></pre></td></tr></table></figure><blockquote><ol><li><p>这里采用<code>bisenetv2</code>进行训练，同时网络输出维度为<code>2</code>。数据集的输入采用上面划分数据集得到的两个<code>txt文档的地址</code>。</p></li><li><p>整个训练一共迭代<code>30000</code>次，<code>batch size(ims_per_gpu)</code>为16，同时采用<code>混合精度训练(use_fp16)</code>。</p></li><li><p>采用混合精度训练的<strong>好处</strong>是：推理的时候后可以采用fp16进行推理，从而加快网络推理速度同时不损失很多精度。</p></li><li><p>最后一定要注意模型保存路径，这里可以设置为<code>/project/train/models</code>，这是平台保存模型的路径。</p></li></ol></blockquote><p>这里要注意<strong>warmup_iters</strong> 和 <strong>max_iter</strong>不能是相同的数值，否则会发生<strong>除数为0</strong>的报错</p><h4 id="1-1-5-进行训练"><a href="#1-1-5-进行训练" class="headerlink" title="1.1.5 进行训练"></a>1.1.5 进行训练</h4><p>该脚本写在什么位置都可以，因为最终是要到平台上面训练，我的位置是在 <code>/project/train/src_repo</code></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20231019172957424.png" alt="image-20231019172957424"></p><p>如图，直接执行命令，然后选择数据集即可，有的数据集数量非常庞大，因此要看好，训练的时间不能超过12小时，不然会被强行中断。</p><p>我在训练的时候，打榜V3是有1w多张图片，初始化需要花费20分钟-40分钟不等</p><p>训练命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">project_root_dir=/project/train/src_repo<br>dataset_dir=/home/data<br>log_file=/project/train/log/log.txt<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;查看显卡参数:&quot;</span><br>nvidia-smi<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;查看Python版本:&quot;</span><br>python --version<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Prepare environment...&quot;</span><br><span class="hljs-comment"># pip install -i https://mirrors.cloud.tencent.com/pypi/simple -r $&#123;project_root_dir&#125;/BiSeNet/requirements.txt</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Prepare dataset...&quot;</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;project_root_dir&#125;</span> &amp;&amp; python split_dataset.py <span class="hljs-variable">$&#123;dataset_dir&#125;</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-variable">$&#123;log_file&#125;</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Start training...&quot;</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;project_root_dir&#125;</span>/BiSeNet<br><span class="hljs-comment"># bisenetv2 明火识别</span><br><span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0<br>cfg_file=configs/bisenetv2_fireandsmoke.py<br>NGPUS=1<br>python -m torch.distributed.launch --nproc_per_node=<span class="hljs-variable">$NGPUS</span> --use_env tools/train_amp.py --config <span class="hljs-variable">$cfg_file</span> | <span class="hljs-built_in">tee</span> -a <span class="hljs-variable">$&#123;log_file&#125;</span><br><span class="hljs-comment">#  输出ONNX</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Convert model to onnx...&quot;</span><br>python tools/export_onnx.py --config <span class="hljs-variable">$cfg_file</span> --weight-path /project/train/models/model_final.pth --outpath /project/train/models/model.onnx<br>python -m onnxsim /project/train/models/model.onnx /project/train/models/model_sim.onnx<br></code></pre></td></tr></table></figure><p>执行命令的过程：</p><ol><li>运行<code>split_datasey.py</code>划分数据集</li><li>执行<code>train_amp.py</code>文件（运行过程中会有一些模块缺失，用pip下载就行）</li><li>训练的输出日志代码都在train_amp文件当中，每100轮会输出一次loss等相关信息</li><li>训练需要的时间是最久的：Tesla T4训练100轮所需时间在110s - 220s之间，比较多人使用的时候（可能是这个原因），就是200s以上才有100轮，快的时候可以110s左右</li><li>训练完成后会进行evaluate验证，这里如果数据集很多也会耗费很多的时间</li></ol><p>最后有一部分是关于导出<code>onnx</code>模型的代码，这里加入这部分代码是为了后续采用TensorRT进行推理做准备。onnx的模型系统里面也是没有的</p><p>正常开始训练后的日志输出如下</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20231019213503378.png" alt="image-20231019213503378"></p><hr><h3 id="1-2-推理测试"><a href="#1-2-推理测试" class="headerlink" title="1.2 推理测试"></a>1.2 推理测试</h3><blockquote><p> 先说下推理测试的大致原理吧：</p><p>比较简单，主要就是运行<code>project/ev_sdk/src</code> 下的<code>ji.py</code>文件，有着具体的格式接口，<strong>init</strong>和<strong>process_image</strong>两个接口是到时候会被测试文件调用的，具体格式参考比赛给出的题目</p></blockquote><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20231019220228527.png" alt="image-20231019220228527"></p><p>以上是进行推理测试的时候用到的文件，这些大都和<code>project/train</code>里面的都没多大关系</p><p>这里当时也弄了挺久，特别是因为CUDA版本和NVIDIA驱动版本不匹配，导致我弄了很久，因为明明在编码环境测试是没问题的，结果到了平台环境就不行，所以以为不是CUDA的问题，剩下的去看那篇遇到的问题吧。</p><h4 id="1-2-1-安装TensoRT"><a href="#1-2-1-安装TensoRT" class="headerlink" title="1.2.1 安装TensoRT"></a>1.2.1 安装TensoRT</h4><p>这里需要下载两个东西，一个是cudnn（但是我不确定这个到底有没有用上，无所谓了）</p><p>另一个则是TensoRT，TensoRT是用于将onnx文件转成trt文件</p><p>上网找到<strong>匹配版本</strong>的安装包，对应网址如下，记得要下载Linux版本下的tar文件，deb文件我不太知道怎么安装</p><p><strong>下载网址</strong>：</p><p><a href="https://developer.nvidia.com/rdp/cudnn-download">cuDNN Download | NVIDIA Developer</a></p><p><a href="https://developer.nvidia.com/nvidia-tensorrt-8x-download#trt860">NVIDIA TensorRT 8.x Download | NVIDIA Developer</a></p><p>我使用的是CUDA 11.1版本的，在上面网页里面找到对应的即可</p><p><strong>安装方法</strong>：</p><p>cudnn具体<strong>安装方法</strong>参考下文：</p><p><a href="https://blog.csdn.net/h3c4lenovo/article/details/119003405">Ubuntu 20.04安装CUDA &amp; CUDNN 手把手带你撸_cuda ubuntu 手把手撸 csdn_哈希Map的博客-CSDN博客</a></p><p>TensorRT安装以及转换文件的方法：</p><p><a href="https://blog.csdn.net/weixin_42905141/article/details/124452516">TensorRT8——ONNX转trt_tensorrt onnx trt_令狐少侠、的博客-CSDN博客</a></p><p>实际上都很简单，只需要对tar包作一个解压，cudnn的就是将一些lib文件移动到CUDA的安装路径下面。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20231019215646874.png" alt="image-20231019215646874"></p><p>如图为我的安装位置，cudnn可以随意，因为只需要将里面的文件夹复制到CUDA下面后就没有用了</p><p>而<strong>TensorRT</strong>因为在后面需要用到链接库，ji.py当中也需要用到，所以放入<code>ev_sdk/src</code>路径下，因为推理的时候也是在其他机器下，<strong>只是会将环境以及ev_sdk里面的文件拷贝过去</strong>而已</p><p><strong>注意！！！</strong></p><p>这里TensorRT的安装说一个重要的地方，这里和教程不一样</p><ul><li>在上面的教程里面，有一个使用sample_mnist文件进行验证的，我跑的时候是验证失败了</li></ul><p>但是并不影响后面的转trt文件执行</p><ul><li><p>另外，教程里说到要使用<code>TensorRT-8.4.3.1/targets/x86_64-linux-gnu/bin/trtexec</code>这个文件来转trt的时候，需要先在控制台下将TensorRT的lib文件夹路径export到全局</p><p>但是实际上每次关闭控制台后再次打开，都会发生找不到lib里面的动态库链接的报错，因为export只是暂时的，</p><p>同样在后面执行推理的python文件的时候，也要用到lib动态库链接，因此我给出的方法就是<strong>添加软链接</strong>到python 的tensorRT对应的库文件路径下：<code>ln -s /usr/local/ev_sdk/src/TensorRT-8.4.1.5/lib/* /opt/conda/lib/python3.7/site-packages/tensorrt</code></p></li></ul><h4 id="1-2-2-onnx-转-trt"><a href="#1-2-2-onnx-转-trt" class="headerlink" title="1.2.2 onnx 转 trt"></a>1.2.2 onnx 转 trt</h4><p>这一步由于我们要用到的是平台下训练出来的模型（因为编译环境下的数据集只有五张图片，平台训练的话会有几万张可以选择），因此不能提前在编译环境里面生成trt文件</p><p>所以需要将代码写入到ji.py当中，从而在正式推理的时候生成trt文件</p><p>编写<code>onnx2trt.sh</code>文件到<code>ev_sdk/src</code>当中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#获取trt文件</span><br><span class="hljs-built_in">export</span> LD_LIBRARY_PATH=<span class="hljs-variable">$LD_LIBRARY_PATH</span>:/usr/local/ev_sdk/src/TensorRT-8.4.1.5/lib/<br>/usr/local/ev_sdk/src/TensorRT-8.4.1.5/targets/x86_64-linux-gnu/bin/trtexec --onnx=/project/train/models/model_sim.onnx --explicitBatch --saveEngine=/usr/local/ev_sdk/src/model.trt --workspace=1024 --fp16<br><br></code></pre></td></tr></table></figure><p>先进行全局的TensorRT动态库链接声明。</p><p>然后执行trtexec文件来转trt文件</p><p>最后可以在ji.py进行推理之前执行该bash文件来获取trt，注意好路径问题就行，<code>model_sim.onnx</code>的路径是在平台当中训练的，推理测试的时候要记得选取</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20231019223643682.png" alt="image-20231019223643682"></p><p>在正式推理之前，你也可以在编译环境里面先拿训练好的onnx文件测试下是否确实可以生成trt，不能的话就找一下报错问题</p><h4 id="1-2-3-ji-py编写"><a href="#1-2-3-ji-py编写" class="headerlink" title="1.2.3 ji.py编写"></a>1.2.3 ji.py编写</h4><p>除了<code>ji.py</code>，还需要另外一个文件<code>bisenet_trt.py</code>，使用到TensoRT的代码库进行推理，该文件和ji.py放在同一目录下即可</p><p>ji.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bisenet_trt <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br><br>  <span class="hljs-string">&quot;&quot;&quot;Initialize model</span><br><span class="hljs-string">  Returns: model</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br>  <span class="hljs-comment"># onnx_file_path = &quot;/project/train/models/model_sim.onnx&quot;</span><br>  engine_file_path = <span class="hljs-string">&quot;/usr/local/ev_sdk/src/model.trt&quot;</span><br>  os.system(<span class="hljs-string">&quot;bash /usr/local/ev_sdk/src/onnx2trt.sh&quot;</span>)<br>  bisenet = BiSeNet_TRT(engine_file_path)<br>  <span class="hljs-keyword">try</span>:<br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>          <span class="hljs-comment"># create a new thread to do warm_up </span><br>          thread1 = warmUpThread(bisenet)<br>          thread1.start()<br>          thread1.join()<br>  <span class="hljs-keyword">finally</span>:<br>      <span class="hljs-comment"># destroy the instance</span><br>      bisenet.destroy()<br>  <span class="hljs-keyword">return</span> bisenet<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_image</span>(<span class="hljs-params">handle=<span class="hljs-literal">None</span>,input_image=<span class="hljs-literal">None</span>,args=<span class="hljs-literal">None</span>, **kwargs</span>):<br><br>  <span class="hljs-string">&quot;&quot;&quot;Do inference to analysis input_image and get output</span><br><span class="hljs-string">  Attributes:</span><br><span class="hljs-string">      handle: algorithm handle returned by init()</span><br><span class="hljs-string">      input_image (numpy.ndarray): image to be process, format: (h, w, c), BGR</span><br><span class="hljs-string">      args: string in JSON format, format: &#123;</span><br><span class="hljs-string">          &quot;mask_output_path&quot;: &quot;/path/to/output/mask.png&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">  Returns: process result</span><br><span class="hljs-string">  &quot;&quot;&quot;</span><br>  args =json.loads(args)<br>  mask_output_path =args[<span class="hljs-string">&#x27;mask_output_path&#x27;</span>]<br><br>  output = handle.infer( input_image)<br>  cv2.imwrite(mask_output_path, output)<br><br>  fake_result = &#123;&#125;<br>  fake_result[<span class="hljs-string">&quot;model_data&quot;</span>] = &#123;<span class="hljs-string">&quot;mask&quot;</span>: []&#125;<br>  fake_result[<span class="hljs-string">&quot;model_data&quot;</span>] = &#123;<br>        <span class="hljs-string">&#x27;mask&#x27;</span>: mask_output_path<br>    &#125;<br>  <span class="hljs-keyword">return</span> json.dumps(fake_result, indent=<span class="hljs-number">4</span>)<br>  <span class="hljs-comment"># return json.dumps(&#123;&#x27;mask&#x27;: mask_output_path&#125;, indent=4)</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  <span class="hljs-comment"># Test API</span><br>  img = cv2.imread(<span class="hljs-string">&#x27;/home/data/2605/20230320102618_f18835_in.jpg&#x27;</span>)<br>  predictor = init()<br>  res = process_image(predictor, img, <span class="hljs-string">&quot;&#123;\&quot;mask_output_path\&quot;:\&quot;/project/ev_sdk/output/mask.jpg\&quot;&#125;&quot;</span>)<br>  <span class="hljs-built_in">print</span>(res)<br>  <br></code></pre></td></tr></table></figure><p>bisenet_trt.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">An example that uses TensorRT&#x27;s Python api to make inferences for BiSeNet.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pycuda.autoinit<br><span class="hljs-keyword">import</span> pycuda.driver <span class="hljs-keyword">as</span> cuda<br><span class="hljs-keyword">import</span> tensorrt <span class="hljs-keyword">as</span> trt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_img_path_batches</span>(<span class="hljs-params">batch_size, img_dir</span>):<br>    ret = []<br>    batch = []<br>    <span class="hljs-keyword">for</span> root, dirs, files <span class="hljs-keyword">in</span> os.walk(img_dir):<br>        <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> files:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(batch) == batch_size:<br>                ret.append(batch)<br>                batch = []<br>            batch.append(os.path.join(root, name))<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(batch) &gt; <span class="hljs-number">0</span>:<br>        ret.append(batch)<br>    <span class="hljs-keyword">return</span> ret<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiSeNet_TRT</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    description: A BiSeNet class that warps TensorRT ops, preprocess and postprocess ops.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, engine_file_path</span>):<br>        <span class="hljs-comment"># Create a Context on this device,</span><br>        <span class="hljs-variable language_">self</span>.cfx = cuda.Device(<span class="hljs-number">0</span>).make_context()<br>        stream = cuda.Stream()<br>        runtime = trt.Runtime(trt.Logger(trt.Logger.INFO))<br>        <span class="hljs-keyword">assert</span> runtime<br>        <br>        <span class="hljs-comment"># Deserialize the engine from file</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(engine_file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            engine = runtime.deserialize_cuda_engine(f.read())<br>        context = engine.create_execution_context()<br><br>        host_inputs = []<br>        cuda_inputs = []<br>        host_outputs = []<br>        cuda_outputs = []<br>        bindings = []<br><br>        <span class="hljs-keyword">for</span> binding <span class="hljs-keyword">in</span> engine:<br>            size = trt.volume(engine.get_binding_shape(binding)) * engine.max_batch_size<br>            dtype = trt.nptype(engine.get_binding_dtype(binding))<br>            <span class="hljs-comment"># Allocate host and device buffers</span><br>            host_mem = cuda.pagelocked_empty(size, dtype)<br>            cuda_mem = cuda.mem_alloc(host_mem.nbytes)<br>            <span class="hljs-comment"># Append the device buffer to device bindings.</span><br>            bindings.append(<span class="hljs-built_in">int</span>(cuda_mem))<br>            <span class="hljs-comment"># Append to the appropriate list.</span><br>            <span class="hljs-keyword">if</span> engine.binding_is_input(binding):<br>                <span class="hljs-variable language_">self</span>.input_w = engine.get_binding_shape(binding)[-<span class="hljs-number">1</span>]<br>                <span class="hljs-variable language_">self</span>.input_h = engine.get_binding_shape(binding)[-<span class="hljs-number">2</span>]<br>                host_inputs.append(host_mem)<br>                cuda_inputs.append(cuda_mem)<br>            <span class="hljs-keyword">else</span>:<br>                host_outputs.append(host_mem)<br>                cuda_outputs.append(cuda_mem)<br><br>        <span class="hljs-comment"># Store</span><br>        <span class="hljs-variable language_">self</span>.stream = stream<br>        <span class="hljs-variable language_">self</span>.context = context<br>        <span class="hljs-variable language_">self</span>.engine = engine<br>        <span class="hljs-variable language_">self</span>.host_inputs = host_inputs<br>        <span class="hljs-variable language_">self</span>.cuda_inputs = cuda_inputs<br>        <span class="hljs-variable language_">self</span>.host_outputs = host_outputs<br>        <span class="hljs-variable language_">self</span>.cuda_outputs = cuda_outputs<br>        <span class="hljs-variable language_">self</span>.bindings = bindings<br>        <span class="hljs-variable language_">self</span>.batch_size = engine.max_batch_size<br>        <br>        <span class="hljs-variable language_">self</span>.img_mean = (<span class="hljs-number">0.46962251</span>, <span class="hljs-number">0.4464104</span>,  <span class="hljs-number">0.40718787</span>)<br>        <span class="hljs-variable language_">self</span>.img_std = (<span class="hljs-number">0.27469736</span>, <span class="hljs-number">0.27012361</span>, <span class="hljs-number">0.28515933</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">infer</span>(<span class="hljs-params">self, image_raw</span>):<br>        threading.Thread.__init__(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-comment"># Make self the active context, pushing it on top of the context stack.</span><br>        <span class="hljs-variable language_">self</span>.cfx.push()<br>        <span class="hljs-comment"># Restore</span><br>        stream = <span class="hljs-variable language_">self</span>.stream<br>        context = <span class="hljs-variable language_">self</span>.context<br>        engine = <span class="hljs-variable language_">self</span>.engine<br>        host_inputs = <span class="hljs-variable language_">self</span>.host_inputs<br>        cuda_inputs = <span class="hljs-variable language_">self</span>.cuda_inputs<br>        host_outputs = <span class="hljs-variable language_">self</span>.host_outputs<br>        cuda_outputs = <span class="hljs-variable language_">self</span>.cuda_outputs<br>        bindings = <span class="hljs-variable language_">self</span>.bindings<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ori_shape: &#x27;</span>, image_raw.shape)<br>        <span class="hljs-comment"># if image_raw is constant, image_raw.shape[1] != self.input_w</span><br>        w_ori, h_ori = image_raw.shape[<span class="hljs-number">1</span>], image_raw.shape[<span class="hljs-number">0</span>]<br>        <span class="hljs-comment"># Do image preprocess</span><br>        input_image = <span class="hljs-variable language_">self</span>.preprocess_image(image_raw)<br>        <span class="hljs-comment"># Copy input image to host buffer</span><br>        np.copyto(host_inputs[<span class="hljs-number">0</span>], input_image.ravel())<br>        <span class="hljs-comment"># Transfer input data to the GPU.</span><br>        cuda.memcpy_htod_async(cuda_inputs[<span class="hljs-number">0</span>], host_inputs[<span class="hljs-number">0</span>], stream)<br>        <span class="hljs-comment"># Run inference.</span><br>        context.execute_async(bindings=bindings, stream_handle=stream.handle)<br>        <span class="hljs-comment"># Transfer predictions back from the GPU.</span><br>        cuda.memcpy_dtoh_async(host_outputs[<span class="hljs-number">0</span>], cuda_outputs[<span class="hljs-number">0</span>], stream)<br>        <span class="hljs-comment"># Synchronize the stream</span><br>        stream.synchronize()<br>        <span class="hljs-comment"># Remove any context from the top of the context stack, deactivating it.</span><br>        <span class="hljs-variable language_">self</span>.cfx.pop()<br>        <span class="hljs-comment"># Here we use the first row of output in that batch_size = 1</span><br>        output = host_outputs[<span class="hljs-number">0</span>]<br>        <br>        <span class="hljs-comment"># Do postprocess</span><br>        output = output.reshape(<span class="hljs-variable language_">self</span>.input_h, <span class="hljs-variable language_">self</span>.input_w).astype(<span class="hljs-string">&#x27;uint8&#x27;</span>)<br>        output = cv2.resize(output, (w_ori, h_ori), interpolation=cv2.INTER_NEAREST)<br>        <br>        <span class="hljs-comment">#palette = np.random.randint(0, 256, (256, 3), dtype=np.uint8)</span><br>        <span class="hljs-comment">#output = palette[output]</span><br>        <span class="hljs-keyword">return</span> output<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">destroy</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># Remove any context from the top of the context stack, deactivating it.</span><br>        <span class="hljs-variable language_">self</span>.cfx.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_image</span>(<span class="hljs-params">self, image_raw</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        description: Read an image from image path</span><br><span class="hljs-string">        param:</span><br><span class="hljs-string">            image_raw: numpy, raw image</span><br><span class="hljs-string">        return:</span><br><span class="hljs-string">            img_input:  the processed image</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <br>        img_resize = cv2.resize(image_raw, (<span class="hljs-variable language_">self</span>.input_w, <span class="hljs-variable language_">self</span>.input_h))[:, :, ::-<span class="hljs-number">1</span>] <span class="hljs-comment">#bgr2rgb</span><br>        img_input = np.transpose(img_resize, [<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>]) <span class="hljs-comment"># hwc2chw</span><br>        <br>        img_input = img_input.astype(np.float32) / <span class="hljs-number">255.0</span><br>        img_mean = np.array(<span class="hljs-variable language_">self</span>.img_mean, dtype=np.float32).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        img_std = np.array(<span class="hljs-variable language_">self</span>.img_std, dtype=np.float32).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>        img_input = (img_input - img_mean) / img_std<br>        <span class="hljs-comment"># expand dims</span><br>        img_input = np.expand_dims(img_input, axis=<span class="hljs-number">0</span>)<br>        <br>        <span class="hljs-keyword">return</span> img_input<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_raw_image</span>(<span class="hljs-params">self, image_path_batch</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        description: Read an image from image path</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> img_path <span class="hljs-keyword">in</span> image_path_batch:<br>            <span class="hljs-keyword">return</span> cv2.imread(img_path)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_raw_image_zeros</span>(<span class="hljs-params">self, image_path_batch=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        description: Ready data for warmup</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-variable language_">self</span>.batch_size):<br>            <span class="hljs-keyword">return</span> np.zeros([<span class="hljs-variable language_">self</span>.input_h, <span class="hljs-variable language_">self</span>.input_w, <span class="hljs-number">3</span>], dtype=np.uint8)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">inferThread</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bisenet, image_path_batch</span>):<br>        threading.Thread.__init__(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-variable language_">self</span>.bisenet = bisenet<br>        <span class="hljs-variable language_">self</span>.image_path_batch = image_path_batch<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        batch_image_raw = <span class="hljs-variable language_">self</span>.bisenet.infer(<span class="hljs-variable language_">self</span>.bisenet.get_raw_image(<span class="hljs-variable language_">self</span>.image_path_batch))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">warmUpThread</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, bisenet</span>):<br>        threading.Thread.__init__(<span class="hljs-variable language_">self</span>)<br>        <span class="hljs-variable language_">self</span>.bisenet = bisenet<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        batch_image_raw = <span class="hljs-variable language_">self</span>.bisenet.infer(<span class="hljs-variable language_">self</span>.bisenet.get_raw_image_zeros())<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># load custom engine</span><br>    engine_file_path = <span class="hljs-string">&quot;build/model.trt&quot;</span>  <span class="hljs-comment"># the generated engine file</span><br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span>:<br>        engine_file_path = sys.argv[<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">if</span> os.path.exists(<span class="hljs-string">&#x27;output/&#x27;</span>):<br>        shutil.rmtree(<span class="hljs-string">&#x27;output/&#x27;</span>)<br>    os.makedirs(<span class="hljs-string">&#x27;output/&#x27;</span>)<br>    <span class="hljs-comment"># a hrnet instance</span><br>    bisenet = BiSeNet_TRT(engine_file_path)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;batch size is&#x27;</span>, bisenet.batch_size)  <span class="hljs-comment"># batch size is set to 1!</span><br>        <br>        image_dir = <span class="hljs-string">&quot;samples/&quot;</span><br>        image_path_batches = get_img_path_batches(bisenet.batch_size, image_dir)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            <span class="hljs-comment"># create a new thread to do warm_up</span><br>            thread1 = warmUpThread(bisenet)<br>            thread1.start()<br>            thread1.join()<br>        <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> image_path_batches:<br>            <span class="hljs-comment"># create a new thread to do inference</span><br>            thread1 = inferThread(bisenet, batch)<br>            thread1.start()<br>            thread1.join()<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># destroy the instance</span><br>        bisenet.destroy()<br><br></code></pre></td></tr></table></figure><h4 id="1-2-4正式推理"><a href="#1-2-4正式推理" class="headerlink" title="1.2.4正式推理"></a>1.2.4正式推理</h4><p>编写好后就可以正式进行推理了，每次推理大概会耗费3小时左右的时间</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20231019224333399.png" alt="image-20231019224333399"></p><p>额不过训练结果非常惨不忍睹就是了，第一次弄，也是直接照着别人的做，还有很多很多不会的地方，也还没有去改进模型和训练的参数，这个以后再慢慢调整吧。仅仅提供一个简单的教程</p>]]></content>
    
    
    <categories>
      
      <category>大学竞赛</category>
      
      <category>CV比赛</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>明火算法遇到的问题</title>
    <link href="/2023/10/15/%E5%A4%A7%E5%AD%A6%E7%AB%9E%E8%B5%9B/CV%E6%AF%94%E8%B5%9B/%E6%98%8E%E7%81%AB%E7%83%9F%E9%9B%BE%E7%AE%97%E6%B3%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/10/15/%E5%A4%A7%E5%AD%A6%E7%AB%9E%E8%B5%9B/CV%E6%AF%94%E8%B5%9B/%E6%98%8E%E7%81%AB%E7%83%9F%E9%9B%BE%E7%AE%97%E6%B3%95%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="2-遇到的一些问题（参考教程的时候）"><a href="#2-遇到的一些问题（参考教程的时候）" class="headerlink" title="2. 遇到的一些问题（参考教程的时候）"></a>2. 遇到的一些问题（参考教程的时候）</h2><h3 id="BiSeNet编码环境下训练遇到的问题："><a href="#BiSeNet编码环境下训练遇到的问题：" class="headerlink" title="BiSeNet编码环境下训练遇到的问题："></a>BiSeNet编码环境下训练遇到的问题：</h3><ol start="0"><li>若要通过PIP下载，记得更换PIP源<br>pip config set global.index-url <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>清华源的后面需要加上<code>/simple</code>，不然很多东西下载不了</li><li>关于数据集划分<br>数据集官方提供的是图片对应的JPG和PNG，官方已经帮我们弄好分割烟雾像素的图像，是PNG格式，原图则是JPG。<br>提供的数据集划分代码可以放在<code>/src_repo</code>文件夹下,直接运行Python命令</li><li>数据集的配置文件<br>首先是定义的对应的类，放在<code>/BiSeNet/lib/data</code>下，里面有其他demo类的示例<br>然后是将其导入到<code>get_dataloader.py</code>文件里面</li><li>更改bisenetv2训练的参数<br>更改的文件内容在<code>/BiSeNet/config</code>下面，如果你是图片类训练，则对应新建一个<code>bisenetv2_yourModel.py</code>文件</li></ol><h3 id="编译环境运行训练脚本时的问题"><a href="#编译环境运行训练脚本时的问题" class="headerlink" title="编译环境运行训练脚本时的问题"></a>编译环境运行训练脚本时的问题</h3><ol><li><p>缺失<code>tabulate</code>库<br>通过pip安装</p></li><li><p>onnx缺少文件<br>一直卡在这里的下载处<br>  Downloading: “<a href="https://github.com/CoinCheung/BiSeNet/releases/download/0.0.0/backbone_v2.pth">https://github.com/CoinCheung/BiSeNet/releases/download/0.0.0/backbone_v2.pth</a>“ to &#x2F;project&#x2F;.cache&#x2F;torch&#x2F;hub&#x2F;checkpoints&#x2F;backbone_v2.pth</p></li><li></li><li><p>报错train_amp.py: error: unrecognized arguments: –local_rank&#x3D;0<br>ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: 2) local_rank: 0 (pid: 18934) of binary: &#x2F;opt&#x2F;conda&#x2F;bin&#x2F;python<br>  解决方法：在执行的那条命令语句之前加上<code>--use_env</code>,例如<br>  <code>python -m torch.distributed.launch --nproc_per_node=$NGPUS --use_env tools/train_amp.py --config $cfg_file | tee -a $&#123;log_file&#125;</code><br>  在执行tools&#x2F;train_amp.py之前加上这个</p></li><li><p>no module name onnixsim<br>通过pip下载</p></li><li><p>没有sudo命令:<br>解决方法：使用<code>apt-get update</code>，如果无法正常update，则需要换镜像源，<br>  这里可以使用清华源 ，可以直接<code>vim /etc/apt/sources.list</code>，将里面的内容替换成清华源的对应（上网搜）</p></li><li><p>File “.&#x2F;lib&#x2F;lr_scheduler.py”, line 69, in get_main_ratio<br> alpha &#x3D; real_iter &#x2F; real_max_iter<br>  ZeroDivisionError: division by zero</p></li></ol><p>  模型训练时出现如上报错，是因为<strong>warmup_iters和max_iter</strong>数值一样，导致除数为0</p><h3 id="网站训练模型时的问题"><a href="#网站训练模型时的问题" class="headerlink" title="网站训练模型时的问题"></a>网站训练模型时的问题</h3><ol><li>RuntimeError: Unexpected error from cudaGetDeviceCount(). Did you run some cuda functions before calling NumCudaDevices() that might have already set an error? Error 804: forward compatibility was attempted on non supported HW<br>目前还不知道是什么原因<br>尝试解决（都无效）：</li></ol><ul><li>升级nvidia驱动（460-&gt;470）</li><li>更换Python版本（3.7.x -&gt; 3.8.8）</li><li>下载Torch有关的各种包（pytorch论坛上面看到的一条解决帖子）</li></ul><ol start="2"><li>如何下载sudo以及更新nvidia驱动：<br>将apt换源成清华源的：</li></ol><ul><li>首先<code>vim /etc/apt/sources.list</code></li><li>然后将里面的替换成清华源</li><li>接着更新软件包 apt-get update</li><li>然后就可以安装sudo了 <code>apt-get install sudo</code></li><li>接着要添加nvidia驱动源，命令<code>sudo add-apt-repository ppa:graphics-drivers/ppa</code></li><li>但是会发现报错，找不到add-apt-repositort</li><li>于是再输入<code>sudo apt install software-properties-common</code></li><li>安装需要一定的时间，安装成功后上面那条指令就可以执行了</li><li>最后可以通过sudo来更新nvidia的驱动，<code>sudo apt install nvidia-driver-&lt;version&gt;</code>，最后要重启电脑</li></ul><hr><h3 id="BiSeNet测试推理遇到的问题："><a href="#BiSeNet测试推理遇到的问题：" class="headerlink" title="BiSeNet测试推理遇到的问题："></a>BiSeNet测试推理遇到的问题：</h3><ol><li><p>安装Cudnn和tensorrt<br>安装tensorrt需要上网找到对应版本，cudnn也是，cudnn需要先下载，才能使用tensorrt（有待考究）<br>这里弄了很久，<br>CUDNN安装：cudnn只需要解压tar包后，将里面的一些文件复制到Cuda相应的一些目录下面，<br>TensorRT安装：也是先解压tar包后，记得添加到环境变量：<code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/yourpath/TensorRT-8.4.0.6/lib</code>,接着就可以根据教程使用<code>trtexec</code>命令成功导出了trt文件，但是也不知道行不行<br>导出代码如下：<code>/project/TensorRT-8.4.3.1/targets/x86_64-linux-gnu/bin/trtexec --onnx=your_sim.onnx --explicitBatch --saveEngine= yourmodel.trt --workspace=1024</code></p></li><li><p>运行Ji.py报错numpy找不到attribute bool<br>原因可能是numpy版本问题，需要更新到1.20以上，例如1.23.2（但是我卸载的时候看到原来的版本好像是1.24.4，但是重新安装之后确实又跳过了这个报错的原因）</p></li><li><p>下载tensorrt对应的python包的时候，要注意版本，tensorrt的文件里面自带了不同版本的例如3.6x,3.7x,3.8x</p></li><li><p>测试环境报错：message: TypeError: Descriptors cannot not be created directly.<br>If this call came from a _pb2.py file, your generated code is out of date and must be regenerated with protoc &gt;&#x3D; 3.19.0.<br>解决方法：可能需要降低<code>protobuf</code>的版本，需要降低到3.20.0以下，但是会产生另一个问题：onnx会对protobuf的版本有要求，可以尝试降到1.11.0</p></li><li><p><code>import tensorrt</code>的时候找不到<strong>动态链接库</strong>：<br>尝试了很多方法，最后使用动态链接库解决，将lib里面的全部导入到conda的python sitepackage下面的tensorrt的文件夹里面，方法如下：<br><code>ln -s /usr/local/ev_sdk/src/TensorRT-8.4.1.5/lib/* /opt/conda/lib/python3.7/site-packages/tensorrt</code><br>使用export或者改.bashrc等方法是无法作用到我的测试环境里面的，因为编码环境和测试环境用的不是同一台电脑和显卡</p></li><li><p>报错<code>The engine plan file is generated on an incompatible device, expecting compute 8.6 got compute 7.5,</code></p><p>原因：onnx转trt所在机器的显卡与调用运行trt时候所在的机器显卡不一致，例如上面意思是3080算力是8.6，但是却得到了7.5，而7.5是2080显卡的算力，Tesla T4也是这个算力，因此需要在同样算力的显卡上转换和运行trt，否则就会报错</p><p>解决方法：在<code>ji.py</code>当中调整代码</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>大学竞赛</category>
      
      <category>CV比赛</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>冰箱管理助手项目总结</title>
    <link href="/2023/08/09/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD/%E5%86%B0%E7%AE%B1%E7%AE%A1%E7%90%86%E5%8A%A9%E6%89%8B%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/09/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD/%E5%86%B0%E7%AE%B1%E7%AE%A1%E7%90%86%E5%8A%A9%E6%89%8B%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="项目总结"><a href="#项目总结" class="headerlink" title="项目总结"></a>项目总结</h1><h2 id="1-项目代码"><a href="#1-项目代码" class="headerlink" title="1. 项目代码"></a>1. 项目代码</h2><h3 id="1-1-完整项目通过以下方式查看"><a href="#1-1-完整项目通过以下方式查看" class="headerlink" title="1.1 完整项目通过以下方式查看"></a>1.1 完整项目通过以下方式查看</h3><ul><li><p>项目迭代：<a href="https://www.tapd.cn/59680053/prong/iterations/card_view?q=799e1adaffa6c12dc3b3786f82a83950&left_tree=1">迭代四-迭代-春_2023_冰箱物资管理-TAPD平台</a></p></li><li><p>Github后端代码仓库：<a href="https://github.com/jlhstart/refrigerator">jlhstart&#x2F;refrigerator (github.com)</a></p></li><li><p>小程序演示视频：<a href="https://www.bilibili.com/video/BV1om4y1H7NR/?spm_id_from=333.880.my_history.page.click&vd_source=734b21e997d61ab1db5d4f657c1753c3">冰箱管理小程序演示视频_哔哩哔哩_bilibili</a></p></li><li><p>本地的项目迭代文档</p></li><li><p>APIfox查看<strong>接口文档</strong></p></li></ul><h3 id="1-2-文件结构"><a href="#1-2-文件结构" class="headerlink" title="1.2 文件结构"></a>1.2 文件结构</h3><p>前期是正常的<code>MVC</code>架构</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230316113851596.png" alt="image-20230316113851596"></p><p>此时所有实体类都在Dao层，控制类都在Control层，其他同理</p><p>而最后使用了<code>SpringCloud</code>结构：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230809125729015.png" alt="image-20230809125729015"></p><p>此时则是按照<strong>数据表table</strong>的类别来区分</p><p>不过细分到每个表里面仍然是MVC结构</p><h2 id="2-个人负责部分"><a href="#2-个人负责部分" class="headerlink" title="2. 个人负责部分"></a>2. 个人负责部分</h2><blockquote><p>这里主要是介绍一些比较特别的接口，其他正常增删改查的接口就不赘述了，可以通过查看APIFOX看曾经负责的接口有哪些</p></blockquote><h3 id="2-1-拍照识别接口"><a href="#2-1-拍照识别接口" class="headerlink" title="2.1 拍照识别接口"></a>2.1 拍照识别接口</h3><ul><li>实现功能：</li></ul><p>小程序通过拍照<strong>识别出物资</strong>名称后，然后进行<strong>物资添加</strong>的操作</p><ul><li>外部接口：</li></ul><p>使用百度的《通用识别接口接口》</p><ul><li>具体教程：</li></ul><p><a href="https://ai.baidu.com/ai-doc/IMAGERECOGNITION/Xk3bcxe21">图像识别 - 通用物体和场景识别 | 百度AI开放平台 (baidu.com)</a></p><p>代码示例（位于ContentController）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/content&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">getContentByImage</span><span class="hljs-params">(String image)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    <span class="hljs-comment">//传过来的参数是Base64编码的</span><br>    <span class="hljs-comment">//去掉头部信息</span><br>    image = image.replaceAll(<span class="hljs-string">&quot;data:image/jpeg;base64,&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">imgParam</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;image=&quot;</span> + URLEncoder.encode(image,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">accessToken</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;你的token&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://aip.baidubce.com/rest/2.0/image-classify/v2/advanced_general&quot;</span>;<br>    <span class="hljs-comment">//调用《通用识别》接口，返回识别结果</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> HttpUtil.post(url,accessToken,imgParam);<br><br>    <span class="hljs-comment">//转换成json格式，将识别到的食物名字提取出来</span><br>    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(JSONObject.parseObject(result));<br>    <span class="hljs-type">JSONArray</span> <span class="hljs-variable">resultArray</span> <span class="hljs-operator">=</span> jsonObject.getJSONArray(<span class="hljs-string">&quot;result&quot;</span>);<br>    <span class="hljs-comment">//用来存放识别分数高于7分的食材</span><br>    List&lt;Map&lt;String,Object&gt;&gt; contentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; resultArray.size(); i++) &#123;<br>        <span class="hljs-type">JSONObject</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> resultArray.getJSONObject(i);<br>        System.out.println(<span class="hljs-string">&quot;识别结果：&quot;</span> +<br>                obj.getString(<span class="hljs-string">&quot;keyword&quot;</span>) + <span class="hljs-string">&quot;---&quot;</span> + obj.getDouble(<span class="hljs-string">&quot;score&quot;</span>));<br>        <span class="hljs-keyword">if</span>(obj.getDouble(<span class="hljs-string">&quot;score&quot;</span>) &gt; <span class="hljs-number">0.6</span>)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">foodName</span> <span class="hljs-operator">=</span> obj.getString(<span class="hljs-string">&quot;keyword&quot;</span>);<br>            contentList.addAll(contentService.getContentInfo(foodName));<br>            <span class="hljs-comment">//清除掉返回null的数据</span><br>            contentList.remove(<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">//去掉重复识别的内容</span><br>            <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>(contentList);<br>            contentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(set);<br>        &#125;<br>        <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;该结果识别度过低&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(<span class="hljs-number">200</span>,contentList);<br>&#125;<br></code></pre></td></tr></table></figure><p>识别后返回的是一个<strong>JSON</strong>格式，解析并且选取<strong>识别度</strong>比较高的</p><p><strong>注意</strong>：access token过一段时间会失效，需要更新</p><h3 id="2-2-爬虫爬取菜谱"><a href="#2-2-爬虫爬取菜谱" class="headerlink" title="2.2 爬虫爬取菜谱"></a>2.2 爬虫爬取菜谱</h3><ul><li><p>实现功能</p><p>给后台提供一个快速添加多个食谱的接口</p><p><strong>菜谱主页</strong>如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230809144428779.png" alt="image-20230809144428779"></p></li><li><p>外部接口</p><p>爬取网站网址：<a href="https://www.meishichina.com/">美食天下_原创菜谱与美食生活社区，我所有的朋友都是吃货！ (meishichina.com)</a></p><p>该网址的菜谱分类当中的前缀是一样的，因此只需要改变后面的类别名字就可以爬取不同的类别和不同的网页。</p></li><li><p>代码示例（RecipeController + RecipeUtil）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/allRecipe&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">crawlRecipe</span><span class="hljs-params">(Integer category_id, Integer page)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> recipeService.getRecipeCategoryName(category_id);<br>    List&lt;RecipeDTO&gt; recipeDTOList = crawlRecipeList(page, category_id, name);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (RecipeDTO dto : recipeDTOList) &#123;<br>        <span class="hljs-comment">//先判断是否已经存在</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">recipeId</span> <span class="hljs-operator">=</span> recipeService.getRecipeIdByName(dto.getTitle());<br>        <span class="hljs-keyword">if</span> (recipeId == <span class="hljs-literal">null</span>) &#123;<br>            addRecipe(dto);<br>            count++;<span class="hljs-comment">//若新增一个记录一次</span><br>        &#125; <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;《&quot;</span> + dto.getTitle() + <span class="hljs-string">&quot;》食谱已经存在&quot;</span>);<br>    &#125;<br>    Pair&lt;String, Integer&gt; recipeNum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(<span class="hljs-string">&quot;新增菜谱数量：&quot;</span>, count);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>&lt;&gt;(<span class="hljs-number">200</span>, recipeNum);<br>&#125;<br></code></pre></td></tr></table></figure><p>爬虫的代码再RecipeUtil的<code>crawlRecipeList()</code>函数里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> List&lt;RecipeDTO&gt; recipeDTOList;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;RecipeDTO&gt; <span class="hljs-title function_">crawlRecipeList</span><span class="hljs-params">(Integer page,Integer category_id,String name)</span> <span class="hljs-keyword">throws</span> IOException, InterruptedException &#123;<br>    <span class="hljs-comment">//初始化数据</span><br>    initWebMap();<br>    recipeDTOList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    name = webMap.get(name);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://home.meishichina.com/recipe/&quot;</span> + name + <span class="hljs-string">&quot;/page/&quot;</span> + page;<br>    <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> Jsoup.connect(url).get();<br>    <span class="hljs-comment">// 使用 css选择器 提取列表新闻 a 标签</span><br>    <span class="hljs-comment">// &lt;a href=&quot;https://voice.hupu.com/nba/2484553.html&quot; target=&quot;_blank&quot;&gt;霍华德：夏休期内曾节食30天，这考验了我的身心&lt;/a&gt;</span><br>    <span class="hljs-type">Elements</span> <span class="hljs-variable">elements</span> <span class="hljs-operator">=</span> document.select(<span class="hljs-string">&quot;div.ui_newlist_1 &gt; ul &gt; li &gt; div &gt; a[href]&quot;</span>);<span class="hljs-comment">//这里去筛选被h2包裹住的a标签，使用一层父级元素</span><br>    <span class="hljs-keyword">for</span> (Element element: elements)&#123;<br>        <span class="hljs-comment">// 获取详情页链接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">d_url</span> <span class="hljs-operator">=</span> element.attr(<span class="hljs-string">&quot;href&quot;</span>);<br>        <span class="hljs-comment">//获取并过滤其他标题</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> element.select(<span class="hljs-string">&quot;a&quot;</span>).attr(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-comment">//获取封面url</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">cover_url</span> <span class="hljs-operator">=</span> element.select(<span class="hljs-string">&quot;img&quot;</span>).attr(<span class="hljs-string">&quot;data-src&quot;</span>);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;食谱标题：《&quot;</span>+title+<span class="hljs-string">&quot;》 ,详情页链接：&quot;</span><br>                + d_url;<br>        System.out.println(line);<br>        System.out.println(<span class="hljs-string">&quot;封面链接： &quot;</span> + cover_url);<br>        <span class="hljs-comment">//将recipe属性进行设置</span><br>        <span class="hljs-type">RecipeDTO</span> <span class="hljs-variable">recipeDTO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecipeDTO</span>();<br>        recipeDTO.setCategoryId(category_id);<br>        recipeDTO.setTitle(title);<br>        recipeDTO.setCoverUrl(cover_url);<br>        <span class="hljs-comment">//爬取菜谱具体内容</span><br>        crawlRecipeDetail(d_url,recipeDTO);<br>        recipeDTOList.add(recipeDTO);<br>        System.out.println(<span class="hljs-string">&quot;-----------------\n---------------------&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> recipeDTOList;&#125;<br></code></pre></td></tr></table></figure><p>解析：主要通过Jsoup库来实现数据的爬取，步骤如下：</p><ol><li>爬取整个网页</li><li>自己查看需要的菜谱信息在哪些html的标签下</li><li>获取特定的标签内容（例如div，a，href，img等）</li><li>放入<code>recipeDTO</code>类当中（该类将recipe相关的几个表元素合并到了一起）</li></ol></li></ul><h3 id="2-3-Elastic-Search实现模糊搜索菜谱"><a href="#2-3-Elastic-Search实现模糊搜索菜谱" class="headerlink" title="2.3 Elastic Search实现模糊搜索菜谱"></a>2.3 Elastic Search实现模糊搜索菜谱</h3><blockquote><p>最难的一个部分</p></blockquote><p>由于内容较多，写在另一篇文章里面</p><p>[Springboot使用Elastic Search教程](.&#x2F;Springboot使用Elastic Search教程.md)</p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>软工实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>传输层知识总结</title>
    <link href="/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <url>/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="传输层知识总结"><a href="#传输层知识总结" class="headerlink" title="传输层知识总结"></a>传输层知识总结</h1><hr><p>[TOC]</p><h2 id="1-传输层基本功能"><a href="#1-传输层基本功能" class="headerlink" title="1. 传输层基本功能"></a>1. 传输层基本功能</h2><p><strong>根本目的</strong>：在网络层提供的数据通信服务基础上，实现主机<strong>进程间可靠</strong>服务，实现“<strong>端到端</strong>”服务（主机-主机 → 端-端）</p><p><strong>应用进程标识：</strong></p><p>进程标识<strong>三元组</strong>：协议、本地地址、本地端口，也叫半相关</p><p>•比如：TCP, 202.1.2.5:3022</p><p>Ø进程通信标识<strong>五元组</strong>（<strong>唯一标识</strong>）：协议、本地地址、本地端口、远程地址、远程端口号，也叫全相关</p><h2 id="2-UDP"><a href="#2-UDP" class="headerlink" title="2. UDP"></a>2. UDP</h2><h3 id="2-1-UDP协议主要特点"><a href="#2-1-UDP协议主要特点" class="headerlink" title="2.1 UDP协议主要特点"></a>2.1 UDP协议主要特点</h3><ul><li><strong>无连接、不可靠</strong>：开销低、尽力而为</li><li><strong>面向报文</strong>的传输层协议：UDP 对应用层传递下来的报文，既不合并，也不拆分，而是保留这些报文的边界。UDP 层一次向对方交付一个完整的报文</li><li><strong>没有拥塞控制</strong>：网络出现的拥塞时，UDP不会使源主机的发送速率降低，适合实时通信应用</li><li><strong>首部开销小</strong>：只有8字节</li><li>提供<strong>复用&#x2F;分用</strong></li></ul><h3 id="2-2-UDP数据报格式-（不包括伪首部！）"><a href="#2-2-UDP数据报格式-（不包括伪首部！）" class="headerlink" title="2.2 UDP数据报格式 （不包括伪首部！）"></a>2.2 UDP数据报格式 （不包括伪首部！）</h3><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230625164719657.png" alt="image-20230625164719657"></p><p>**端口号：**包括源端口号和目的端口号，分别表示发送方和接收方的进程端口号，各为2字节</p><p><strong>UDP总长度</strong>：<strong>包括报头</strong>在内的用户数据报的总长度，2字节（<strong>不包括伪首部</strong>）</p><p>**校验和：**用于检查整个数据报（含报头）是否传输出错，<strong>可选</strong>，若无，填0（TCP是必选）</p><h3 id="2-3-校验和计算"><a href="#2-3-校验和计算" class="headerlink" title="2.3 校验和计算"></a>2.3 校验和计算</h3><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230629172347620.png" alt="image-20230629172347620"></p><p>以下两种说法都是没错的：</p><ul><li><p>UDP校验和字段的计算机包括一个伪首部、UDP首部和携带的用户数据</p></li><li><p>UDP校验和对伪首部、UDP报文头以及应用层数据进行校验</p></li></ul><h2 id="3-TCP"><a href="#3-TCP" class="headerlink" title="3. TCP"></a>3. TCP</h2><h3 id="3-1-TCP协议主要特点"><a href="#3-1-TCP协议主要特点" class="headerlink" title="3.1 TCP协议主要特点"></a>3.1 TCP协议主要特点</h3><ul><li>支持<strong>面向连接</strong>的服务：打电话式、会话式通信</li><li>支持<strong>字节流</strong>传输：字节管道、字节按序传输和到达</li><li>支持<strong>全双工</strong>服务：一个应用进程可以同时收发数据、捎带确认</li><li>支持建立多个<strong>并发的</strong>TCP连接**（服务器同时响应多个连接）**</li><li><strong>支持</strong>可靠**传输服务：不丢失、不重复、有序</li></ul><h3 id="3-2-TCP报文格式"><a href="#3-2-TCP报文格式" class="headerlink" title="3.2 TCP报文格式"></a>3.2 TCP报文格式</h3><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230625211240920.png" alt="image-20230625211240920"></p><ul><li><p>窗口值：指示当前进程可以接收的数据长度</p><ul><li><p>准备接收下一个TCP报文的接收方，通知即将发送报文的发送方下一个报文中最多可以发送的字节数，    </p><p> 是发送方确定<strong>发送窗口</strong>的依据，是<strong>动态可变</strong>的。</p></li></ul></li><li><p><strong>头部长度</strong>：固定部分为20，选项部分为0<del>40，所以TCP头部长度为20</del>60字节</p></li><li><p><strong>校验和</strong>：</p><ul><li>与UDP校验和的<strong>相同点</strong>：1）计算方式相同；2）也需要伪首部。</li><li>与UDP校验和的<strong>不同点</strong>：1）UDP校验和可选，TCP校验和必须；2）伪首部协议字段值为6。</li></ul></li></ul><h3 id="3-3-传输控制协议"><a href="#3-3-传输控制协议" class="headerlink" title="3.3  传输控制协议"></a>3.3  传输控制协议</h3><p><strong>TCP最大段长度（MSS）</strong>：</p><p><strong>定义：<strong>TCP报文</strong>数据部分</strong>的最大长度，<strong>不包括TCP报头长度</strong>。默认值为<strong>536****字节</strong></p><p><strong>MSS和窗口字段和MTU的区别</strong>： </p><p><strong>MSS</strong>是TCP报文段中数据部分的最大长度，如果上层交付下来的数据超过MSS就要对交付下来的数据进行分段。在TCP连接的第一次、第二次握手中会分别告知对方MSS，从而起到通信双方协商MSS的效果。</p><p><strong>MTU</strong>： Maximum Transmit Unit，最大传输单元，即物理接口（<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82&spm=1001.2101.3001.7020">数据链路层</a>）提供给其上层（通常是IP层）最大一次传输数据的大小；以普遍使用的以太网接口为例，缺省MTU&#x3D;1500 Byte，这是以太网接口对IP层的约束，如果IP层有&lt;&#x3D;1500 byte 需要发送，只需要一个IP包就可以完成发送任务；如果IP层有&gt; 1500 byte 数据需要发送，需要分片才能完成发送，这些分片有一个共同点，即IP Header ID相同。</p><p><img src="https://iknow-pic.cdn.bcebos.com/810a19d8bc3eb135e1c04ec7b61ea8d3fd1f4443?x-bce-process=image/resize,m_lfit,w_600,h_800,limit_1/quality,q_85/format,f_auto" alt="img"></p><p>**窗口：**TCP报文段首部中，“窗口大小”字段通常用于告知对方自己的能够接受的数据量大小。窗口本质就是一个缓冲区buffer，该字段的值用于告知对方自己剩余的可用缓冲区大小。在每一个TCP报文段中都会通过“窗口”字段告知对方自己的所能接收数据的大小。窗口大小通常用滑动窗口流量控制。</p><h3 id="3-4-TCP基本通信过程："><a href="#3-4-TCP基本通信过程：" class="headerlink" title="3.4 TCP基本通信过程："></a>3.4 TCP基本通信过程：</h3><p>连接建立：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230625213051169.png" alt="image-20230625213051169"></p><p>ACK代表想要收到的下一个字节的序号开头。</p><p>释放连接：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230625213300260.png" alt="image-20230625213300260"></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230625213317566.png" alt="image-20230625213317566"></p><p>问题：<strong>为何不采用三次握手释放连接，而且发送最后一次握手报文后要等到2MSL的时间呢？</strong><br>1)保证A发送的最后一个确认报文段能够到达B，如果A不等待2MSL，当A返回的最后确认报文段丢失的，那么就会导致B不能进入正常关闭状态，而且就算B此时再次发送了一个FIN&#x3D;1的结束报文，A由于此时已经关闭了，也不能再次重传了。B就被吊着了</p><h2 id="4-TCP滑动窗口与超时重传"><a href="#4-TCP滑动窗口与超时重传" class="headerlink" title="4. TCP滑动窗口与超时重传"></a>4. TCP滑动窗口与超时重传</h2><h3 id="4-1-TCP滑动窗口"><a href="#4-1-TCP滑动窗口" class="headerlink" title="4.1 TCP滑动窗口"></a>4.1 TCP滑动窗口</h3><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230626111232396.png" alt="image-20230626111232396"></p><p>滑动窗口的特点：</p><ul><li>使用发送和接受缓冲区，以及滑动窗口机制控制TCP连接上的字节传输</li><li>TCP滑动窗口面向字节流，可以起到<strong>差错控制</strong>和<strong>流量控制</strong>作用</li><li>接收方可以在任何时候发送确认，窗口大小可由接收方根据需要增大或减少</li><li>发送窗口值<strong>不能超过</strong>接收窗口值，发送方可以根据<strong>自身需要来决定</strong></li></ul><p><strong>确认重传机制：</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230626111519354.png" alt="image-20230626111519354"></p><h3 id="4-2-超时重传"><a href="#4-2-超时重传" class="headerlink" title="4.2 超时重传"></a>4.2 超时重传</h3><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230626111610137.png" alt="image-20230626111610137"></p><h3 id="4-3-各种定时器："><a href="#4-3-各种定时器：" class="headerlink" title="4.3 各种定时器："></a>4.3 各种定时器：</h3><p>四个定时器的相关链接：[TCP协议中的计时器 - 请叫我小小兽 - 博客园 (cnblogs.com)](<a href="https://www.cnblogs.com/qingjiaowoxiaoxioashou/p/6506082.html#:~:text=TCP%E4%B8%AD%E6%9C%89%E5%9B%9B%E7%A7%8D%E8%AE%A1%E6%97%B6%E5%99%A8%EF%BC%88Timer%EF%BC%89%EF%BC%8C%E5%88%86%E5%88%AB%E4%B8%BA%EF%BC%9A">https://www.cnblogs.com/qingjiaowoxiaoxioashou/p/6506082.html#:~:text=TCP中有四种计时器（Timer），分别为：</a> 1.重传计时器：Retransmission Timer 2.坚持计时器：Persistent,Timer 3.保活计时器：Keeplive Timer 4.时间等待计时器：Timer_Wait Timer)</p><ul><li>重传定时器：用于控制TCP传输过程中报文确认与<strong>等待重传</strong>的时间</li><li>坚持计时器：用于流量控制中，丢失了“<strong>非零窗口</strong>”的通知后出现一直等待的情况</li><li>保持定时器：用于防止出现<strong>长时间的空闲</strong>每次收到客户端发来的消息就复位；定时器设定为2小时，超时则发送探测包。连续十个探测包还没收到回应，则中断连接。</li><li>时间等待计时器：用于释放连接，也就是<strong>四次握手</strong>的时候，每个方向的连接释放需要再等待一段时间才能关闭连接，设置为报文寿命（MSL maximum segment lifetime）的两倍，也就是2MSL</li></ul><h2 id="5-TCP窗口的拥塞控制和流量控制"><a href="#5-TCP窗口的拥塞控制和流量控制" class="headerlink" title="5. TCP窗口的拥塞控制和流量控制"></a>5. TCP窗口的拥塞控制和流量控制</h2><h3 id="5-1-流量控制"><a href="#5-1-流量控制" class="headerlink" title="5.1 流量控制"></a>5.1 流量控制</h3><h3 id="5-1-1定义："><a href="#5-1-1定义：" class="headerlink" title="5.1.1定义："></a>5.1.1定义：</h3><p>由发送方控制发送速率，使之不超过接收速率，防止接收方来不及接收字节流，而出现报文丢失现象</p><p>TCP的头部的窗口值用于<strong>流量控制</strong></p><ul><li>接收方从缓存中读取速度大于等于字节到达速度，接收方在每个确认中发出一个<strong>非零窗口</strong>通告</li><li>如果发送方发送速度比接收方读取速度快，将造成缓冲区被全部占用，之后到达的字节因缓冲区溢出而丢弃。此时，接收方必须发出一个“<strong>零窗口</strong>”的通告。告知当发送方停止发送（直到接收“非零窗口”通告为止）。</li><li>接收方需要接收能力给出一个合适的<strong>接收窗口</strong>，并将它写入TCP报头中，通知发送方。接收窗口又称为<strong>通知窗口（rwnd）</strong>。</li></ul><h3 id="5-1-2-糊涂窗口综合征-Silly-Window-Syndrome-SWS-："><a href="#5-1-2-糊涂窗口综合征-Silly-Window-Syndrome-SWS-：" class="headerlink" title="5.1.2 糊涂窗口综合征(Silly Window Syndrome, SWS)："></a>5.1.2 糊涂窗口综合征(Silly Window Syndrome, SWS)：</h3><p>•定义：小的报文段在TCP连接上传输，导致有效数据的通信效率低下。小报文段的数据字段长度远小于报文段首部长度20+IP首部长度20</p><p>•SWS可由TCP连接的任何一端引起：接收方通过纯ACK报文段发送小的窗口通告导致SWS；发送方过于积极传输缓冲区中的剩余数据导致SWS</p><h3 id="5-2-拥塞控制"><a href="#5-2-拥塞控制" class="headerlink" title="5.2 拥塞控制"></a>5.2 拥塞控制</h3><p><strong>原理：</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230626113329398.png" alt="image-20230626113329398"></p><p><strong>慢开始阶段以及图解：</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230626145149108.png" alt="image-20230626145149108"></p><p><strong>拥塞避免阶段：</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230626145158053.png" alt="image-20230626145158053"></p><p>cwnd &gt;&#x3D; SST的时候会变成<strong>线性增长</strong>。</p><p><strong>计算方法：</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230629152724413.png" alt="image-20230629152724413"></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230629175614610.png" alt="image-20230629175614610"></p><p><strong>快重传：</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230626145430292.png" alt="image-20230626145430292"></p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>传输层难题</title>
    <link href="/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BC%A0%E8%BE%93%E5%B1%82%E9%9A%BE%E9%A2%98/"/>
    <url>/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%BC%A0%E8%BE%93%E5%B1%82%E9%9A%BE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="传输层难题"><a href="#传输层难题" class="headerlink" title="传输层难题"></a>传输层难题</h1><hr><ol><li><p>传输层为（  B  ）之间提供逻辑通信。</p><p>A. 主机 B. 进程 C. 路由器 D. 操作系统</p></li><li><p>下列关于UDP校验的描述中，（ B   ）是错误的。</p></li></ol><p>​A. UDP校验和段的使用是可选的，如果源主机不想计算校验和，那么该校验和段应为全0</p><p>​B. 在计算校验和的过程中，需要生成一个伪首部，主机需要把该<strong>伪首部发送</strong>给目的主机</p><p>​C. 如果数据报在传输过程中被破坏，那么就把它丢弃</p><p>​D. UDP数据报的伪首部包含了IP地址信息</p><p>2解析：伪首部仅仅在和目的主机校验的时候建立，<strong>并不发送</strong></p><ol start="3"><li><p>A和B建立了TCP连接，当A收到确认号为100 的确认报文段时，表示( )。</p><p>A. 报文段99已收到</p><p>B. 报文段100已收到</p><p>C. 末字节序号为99的报文段已收到</p><p>D. 末字节序号为100的报文段已收到</p></li><li><p>.以下关于TCP报头格式的描述中，错误的是（ D ）。</p><p>A. 报头长度为20~60B，其中固定部分为20B</p><p>B. 端口号字段依次表示源端口号与目的端口号</p><p>C.报头长度总是4的倍数个字节</p><p>D. TCP校验和伪首部中IP分组头的协议字段为17</p></li></ol><p>4解析：TCP的协议号确认应该为6，17是UDP的</p><ol start="5"><li><p>. 下列关于 TCP 协议的四个描述中，错误的是（ Ⅰ 和Ⅱ ）</p><p>Ⅰ. 拥塞窗口（cwnd）是接收端根据网络拥塞情况确定的窗口值，其大小在开始时可</p><p>以按指数规律增长。</p><p>Ⅱ. TCP 连接建立的过程需要经过“三次握手”的过程，而释放过程相对复杂且只有</p><p>客户端可以主动提出释放连接的请求。</p><p>Ⅲ. 接收窗口（rwnd）通过 TCP 首部中的窗口字段通知数据的发送方。</p><p>Ⅳ. 发送窗口确定的依据是：发送窗口&#x3D;min[接收窗口，拥塞窗口]</p></li></ol><p>5解析，A是拥塞窗口，应当由发送方来决定，接收方决定的是rwnd</p><ol start="6"><li><p>以下关于TCP使用的定时器说法错误的是</p><p>A. 设置重传计时器的目的是控制报文确认与等待重传的时间 </p><p>B. 设置保持计时器的目的是为了防止 TCP 连接处于长时期空闲状态</p><p>C. 设置时间等侍计时器的目的是为了保证 TCP 连接释放过程正常地进行</p><p>D. 设置坚持计时器的目的是防止接收端因接收一个长报文的多个分段而造成死锁</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>应用层知识点</title>
    <link href="/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <url>/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="应用层知识点"><a href="#应用层知识点" class="headerlink" title="应用层知识点"></a>应用层知识点</h1><hr><h2 id="1-网络体系结构与网络协议"><a href="#1-网络体系结构与网络协议" class="headerlink" title="1. 网络体系结构与网络协议"></a>1. 网络体系结构与网络协议</h2><p>\1. 网络协议</p><p>u 统一的信息交换规则，规定信息格式，规定如何发送和接收信息。</p><p>u 协议三要素：<strong>语法、语义、时序（或者是 同步 也是正确的）。</strong></p><p>   \2. 协议分层思想</p><p>u 将网络系统功能分解为功能层，用协议规定功能（要做什么）。</p><p>u <strong>对等功能层</strong>之间采用<strong>协议</strong>进行约束（协议数据单元、协议格式）。</p><p>u <strong>相邻功能层</strong>之间采用<strong>接口</strong>进行交互（接口标准、使用服务）。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230624215020662.png" alt="image-20230624215020662"></p><h3 id="1-1资源子网和通信子网："><a href="#1-1资源子网和通信子网：" class="headerlink" title="1.1资源子网和通信子网："></a>1.1资源子网和通信子网：</h3><p>把计算机网络中实现网络通信功能的设备及其软件的集合称为网络的<strong>通信子网</strong>，</p><p>而把网络中实现资源共享功能的设备及其软件的集合称为<strong>资源子网</strong>。</p><p>通信子网组成：各种网络通讯设备，如路由器，网络节点，通信链路等</p><p>资源子网组成：计算机、外部设备，打印机等等</p><h3 id="1-12OSI-模型和IP-TCP"><a href="#1-12OSI-模型和IP-TCP" class="headerlink" title="1.12OSI 模型和IP&#x2F;TCP"></a>1.12OSI 模型和IP&#x2F;TCP</h3><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/5925973f8d684b58b25331ee78dd659b.png" alt="OSI和TCP&#x2F;IP协议之间的对应关系"></p><p>N层实体利用<strong>N-1层实体</strong>所提供的服务，向N+I层实体提供功能更强大的服务。这可以概括为“服务是垂直的”。例如，传输层实体利用网络层实体的服务，向应用层实体提供<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5/99347?fromModule=lemma_inlink">网页</a>传输服务。 [4] </p><p>N层实体使用N-1层实体所提供的服务时，不需要知道N-1层实体所提供的服务是如何实现的以及N-1层实体间的协议，而只需要知道下一层可以为自己提供哪些服务(是快速昂贵通信还是慢速低廉通信)，以及<strong>通过什么样的接口提</strong>供的。</p><h2 id="2-数据交换技术"><a href="#2-数据交换技术" class="headerlink" title="2. 数据交换技术"></a>2. 数据交换技术</h2><ol><li><p><strong>电路交换</strong>(circuit switching)<br>最典型的电路交换网络：电话网络<br>电路交换分为三个阶段</p><p>​    建立连接（电路建立）<br>​    数据传输<br>​    释放连接（拆除电路）<br>电路交换的特征：<strong>资源独占</strong><br>采用电路交换的通信中，通信双方独占其使用的通信资源<br>即使没有数据在传输，第三方也无法使用这个闲置资源</p></li><li><p>报文交换(message switching)</p><p>报文交换广泛应用于上世纪五六十年代至七十年代的电报通信</p><ul><li>将要发送的数据整体作为报文，如 一个文件，以报文为单位进行传输</li><li>采用<strong>存储</strong>+<strong>转发</strong>的交换方式</li></ul></li></ol><h2 id="3-网络应用对传输层的协议选择"><a href="#3-网络应用对传输层的协议选择" class="headerlink" title="3. 网络应用对传输层的协议选择"></a>3. 网络应用对传输层的协议选择</h2><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230624220930869.png" alt="image-20230624220930869"></p><p><strong>各种协议的常用端口号</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230624230047111.png" alt="image-20230624230047111"></p><p><strong>补充：</strong></p><ul><li>TFTP ： port： 69 简单文件传输协议</li></ul><h2 id="4-电子邮件服务与协议"><a href="#4-电子邮件服务与协议" class="headerlink" title="4. 电子邮件服务与协议"></a>4. 电子邮件服务与协议</h2><p>邮件<strong>传输</strong>协议：SMTP&#x2F;MIME （通用Internet邮件<strong>扩展</strong>协议MIME）</p><p>邮件<strong>存储访问</strong>协议：POP、IMAP</p><p>p<strong>邮件传输协议</strong></p><p>Ø客户端到邮件服务器、邮件服务器之间简单<strong>邮件传输协议STMP</strong></p><p><strong>SMTP：</strong></p><p>不支持多语种邮件的传输等</p><p>是一个相对简单的基于文本的协议（ <strong>只传送7位的ASCII码</strong>），使用TCP端口25</p><p>Ø通用Internet邮件<strong>扩展协议MIME</strong></p><p>在MIME下，可以实现二进制的编码，可<strong>传输各种格式的文件，以及支持多语种邮件等</strong></p><p>p<strong>邮件存储访问协议</strong></p><p>Ø邮件服务器到客户端</p><p>Ø邮政协议第3版POP-3</p><p>ØInternet邮件访问协议第4版IMAP-4</p><h3 id="基于Web的电子邮件"><a href="#基于Web的电子邮件" class="headerlink" title="基于Web的电子邮件"></a>基于Web的电子邮件</h3><p>Ø20世纪90年代中期，Hotmail开发了基于Web的电子邮件系统</p><p>Ø目前几乎所有门户网站都提供基于Web的电子邮件，使用Web浏览器收发邮件</p><p>Ø基于Web电子邮件，用户代理就是Web浏览器，用户与远程邮箱之间的通信使用的是HTTP协议，而不是POP3或IMAP4协议</p><p>Ø邮件服务器之间的通信仍然使用SMTP协议</p><h2 id="5-FTP"><a href="#5-FTP" class="headerlink" title="5. FTP"></a>5. FTP</h2><h3 id="5-1-工作原理："><a href="#5-1-工作原理：" class="headerlink" title="5.1 工作原理："></a>5.1 工作原理：</h3><p>p<strong>控制连接</strong>：FTP客户端使用临时端口号（如5100）与服务器端熟知**端口号（21）**之间连接一个控制连接</p><p>p<strong>用户鉴别</strong>：控制连接建立之后，服务器端要求客户端发送用户名和口令</p><p>p<strong>数据连接</strong>：服务器端接收到客户端文件传输命令后，开始发起与客户端的数据连接。客户端使用临时端口号（如5000）与服务器端熟知<strong>端口号20</strong>之间建立数据连接</p><p>p<strong>TFTP</strong>*的特点</p><p>Ø传输可靠性：FTP面向连接的可靠传输，采用<strong>TCP</strong>；TFTP简洁、采用<strong>UDP</strong></p><p>Ø协议命令集：FTP包含发送&#x2F;接收文件、列出目录与删除文件等<strong>复杂命令</strong>，TFTP协议只定义文件发送&#x2F;接收<strong>基本命令</strong></p><p>Ø数据表示：FTP可<strong>指定数据类型</strong>，TFTP只允许传输<strong>ASCII****码或二进制文本文件</strong></p><p>Ø用户鉴别：FTP有登录用户鉴别功能，TFTP不提供用户鉴别功能</p><h2 id="6-DNS"><a href="#6-DNS" class="headerlink" title="6. DNS"></a>6. DNS</h2><p>使用TCP或者UDP都可以</p><p>端口：53</p><p><strong>递归解析</strong>和<strong>迭代解析</strong>的两种定义需要区分清楚</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230625154841648.png" alt="image-20230625154841648"></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230625154903851.png" alt="image-20230625154903851"></p><h2 id="7-HTTP连接方式以及计算RTT："><a href="#7-HTTP连接方式以及计算RTT：" class="headerlink" title="7. HTTP连接方式以及计算RTT："></a>7. HTTP连接方式以及计算RTT：</h2><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/2020032007452929.png" alt="在这里插入图片描述"></p><p>因此如果要读取一个网页的三张图片（不包括网页HTML），需要的RTT时间分别是（建立连接要<strong>2RTT</strong>）</p><ul><li>非持续连接：2RTT *  3</li><li>持续连接：RTT</li><li>流水线：RTT</li></ul>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>应用层难题</title>
    <link href="/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%BE%E9%A2%98/"/>
    <url>/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E9%9A%BE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="应用层难题目"><a href="#应用层难题目" class="headerlink" title="应用层难题目"></a>应用层难题目</h1><ol><li><p>下列哪些不是电路交换技术的特点（  ）。</p><p>A.稳定的数据传输速率</p><p>B.硬件成本较低</p><p>C.不存在信道访问延迟</p><p>D 长距离电路的建立时间长</p></li></ol><p>你的答案：C</p><p>正确答案：B</p><ol start="2"><li><p>以下关于HTTP非持续连接的特点描述中，错误的是（  D  ）。</p><p>A. HTTP协议支持非持续连接和持续连接</p><p>B. HTTP&#x2F;1.0版协议定义非持续连接，而HTTP&#x2F;1.1默认状态为持续连接</p><p>C. 非持续连接中对每次请求&#x2F;响应都要建立一次TCP连接</p><p>D. 非持续连接中获取包含100张图片的网页时，需要打开与关闭100次TCP连接</p><p>应当是101次，100个picture + 1个HTML</p></li><li><p>以下关于FTP用户程序特点的描述中，错误的是（  C  ）。</p></li></ol><p>   A.FTP用户程序主要有传统的FTP命令行、浏览器与FTP下载工具</p><p>   B.传统的FTP命令行是最早的FTP用户程序</p><p>   C.浏览器软件支持访问FTP服务器，可以<strong>直接登录</strong>到FTP服务器并<strong>下载</strong>文件</p><p>   D.使用FTP命令行从FTP服务器下载文件的过程中网络连接意外中断，用户程序通过<strong>断点续传</strong>功能可以继续进行剩余部分的传输</p><ol start="4"><li><p>下面对计算机网络体系结构中协议所做的描述，错误的是（ ）</p><p>A.网络协议的三要素是语法、语义和同步</p><p>B.协议是控制两个对等实体之间通信的规则的集合</p><p>C.在OSI参考模型中，要实现第N层的协议，需要使用N+1层提供的服务</p><p>D.协议规定了对等层实体之间所交换的信息的格式和含义</p></li></ol><p>4解析：这个涉及知识点较多，A的话，同步和时序都是没错的，B当中，接口是两个相邻实体之间的通信规则</p><p>C当中，应该是N-1而不是N+1，例如传输层需要依赖网络层提供的分组数据。D和B类似</p><ol start="5"><li><p>以下关于Internet核心交换与边缘部分的抽象方法描述中，错误的是（ ）。</p><p>A. Internet系统可以看作是由边缘部分与核心交换部分两部分组成</p><p>B.核心交换部分包括由大量路由器互联的服务器集群</p><p>C.核心交换部分为应用程序进程通信提供服务</p><p>D.网络应用程序运行在端系统</p></li><li><p>下列设备不属于资源子网的是（ ）。</p><p>A.主机</p><p>B.终端</p><p>C.各种软件资源和数据服务</p><p>D.结点处理机</p></li><li><p>假设所有域名服务器均采用迭代查询方式进行域名解析。当主机访问规范域名为<a href="http://www.abc.xyz.com的网站时,本地域名服务器在完成该域名解析的过程中,可能发出dns查询的最少和最多次数分别是(/">www.abc.xyz.com的网站时，本地域名服务器在完成该域名解析的过程中，可能发出DNS查询的最少和最多次数分别是（</a>  C ）。</p><p>A. 0，3 B. 1，3 C. 0，4 D. 1，4</p></li><li><p>以下关于DNS概念的描述中，错误的是（C ）。</p><p>A.DNS使用统一的命名空间</p><p>B.DNS使用本地的缓存来改善系统的性能</p><p>C.DNS域名服务的处理依赖于所使用的传输系统</p><p>D.DNS数据库容量限制和更新频率都要求对域名进行分布式管理</p></li></ol><p>解析：应当是地址解析服务</p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网络层知识总结</title>
    <link href="/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <url>/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B1%82%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="网络层知识总结"><a href="#网络层知识总结" class="headerlink" title="网络层知识总结"></a>网络层知识总结</h1><h2 id="1-IPV4地址结构"><a href="#1-IPV4地址结构" class="headerlink" title="1. IPV4地址结构"></a>1. IPV4地址结构</h2><h3 id="1-1-网络层功能与定位"><a href="#1-1-网络层功能与定位" class="headerlink" title="1.1 网络层功能与定位"></a>1.1 网络层功能与定位</h3><p><strong>网际协议 IP</strong> 是 TCP&#x2F;IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有三个协议：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230628171557981.png" alt="image-20230628171557981"></p><p>IP地址分类：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230628173022101.png" alt="IP地址分类表"></p><h2 id="2-NAT-技术"><a href="#2-NAT-技术" class="headerlink" title="2. NAT 技术"></a>2. NAT 技术</h2><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230628231413286.png" alt="image-20230628231413286"></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230628231439050.png" alt="image-20230628231439050"></p><h2 id="3-IP分组格式"><a href="#3-IP分组格式" class="headerlink" title="3. IP分组格式"></a>3. IP分组格式</h2><h3 id="3-1-最大传输单元MTU"><a href="#3-1-最大传输单元MTU" class="headerlink" title="3.1 最大传输单元MTU"></a>3.1 最大传输单元MTU</h3><p><strong>含义</strong>：链路帧的数据字段的最大长度，也就是封装链路帧时允许的IP分组大小上限</p><p><strong>特点</strong>：</p><p>（1）不同网络的MTU大小不同；</p><p>（2）规定IP分组的最大长度为65535字节；</p><p>（3）MTU一般小于IP分组长度，因此需要将IP分组分割成若干个较小的段，每个段的长度不超过MTU</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230629002601622.png" alt="image-20230629002601622"></p><p><strong>分组头部：</strong>（长度可变）</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/v2-d4bd9b60633868608572e72818fbf255_r.jpg" alt="img"></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230629013839420.png" alt="image-20230629013839420"></p><h2 id="4-路由算法协议"><a href="#4-路由算法协议" class="headerlink" title="4. 路由算法协议"></a>4. 路由算法协议</h2><h3 id="3-1-路由协议"><a href="#3-1-路由协议" class="headerlink" title="3.1 路由协议"></a>3.1 路由协议</h3><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230628232537032.png" alt="image-20230628232537032"></p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网络层难题</title>
    <link href="/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B1%82%E9%9A%BE%E9%A2%98/"/>
    <url>/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B1%82%E9%9A%BE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="网络层难题"><a href="#网络层难题" class="headerlink" title="网络层难题"></a>网络层难题</h1><hr><ol><li><p>IP提供主机之间的（   D  ）分组传输服务。</p><p>   A. 可靠的、面向连接的                  B. 不可靠的、面向连接的</p><p>   C. 可靠的、无连接的                    D. 不可靠的、无连接的</p></li><li><p>IP 数据报中的（ TTL ）字段规定了一个数据报在被丢弃之前所允许经过的路由器数。</p></li><li><p>下列关于RIP的描述中，正确的是（ D ）。</p><p>A. RIP根据链路状态法计算最佳路由                  B. RIP是用于自治系统之间的外部网关协议</p><p>C. RIP不能根据网络通信情况动态的改变路由              D. RIP只能适用于小型网络</p></li></ol><p>3解析：A选项应当是OSPF算法</p><ol start="4"><li><p>下面关于OSPF路由协议的描述，错误的是（   <strong>C</strong>   ）。</p><p>A. OSPF用于自治系统内部                                         </p><p>B. OSPF利用了一种全局路由选择算法</p><p>C. 一个OSPF路由器仅向直接相邻的节点发送它的链路状态信息</p><p>D. 一个OSPF路由器不会把错误的路由信息传播给其他路由器</p></li></ol><p>4解析：OSPF应当是用洪泛法发送给所有路由器，RIP才是发给相邻的路由器</p><ol start="5"><li><p>下列关于 ICMP 协议的描述中，正确的是（ Ⅳ ）</p><p>Ⅰ. 作为 IP 的补充，ICMP 报文将直接封装在链路层帧中发送</p><p>Ⅱ. ICMP 报文分为差错报告和查询两类，封装在 IP 数据报中发送</p><p>Ⅲ. <strong>PING</strong> 使用了 ICMP 差错报文</p><p>Ⅳ. ICMP 报文本身出错将不再处理</p></li><li><p>以下关于 IP 分组结构的描述中，错误的是（ B ）。</p><p>A. IPv4 分组头的长度是可变的</p><p>B. 协议字段表示 IP 的版本，值为 4 表示 IPv4</p><p>C. 分组头长度字段以 4B 为单位，总长度字段以字节为单位</p><p>D. 生存时间字段值表示一个分组可以经过的最多的跳数</p></li></ol><p>6解析，B应该是IP的上层协议</p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>链路层物理层难题</title>
    <link href="/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%93%BE%E8%B7%AF%E5%B1%82%E7%89%A9%E7%90%86%E5%B1%82%E9%9A%BE%E9%A2%98/"/>
    <url>/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E9%93%BE%E8%B7%AF%E5%B1%82%E7%89%A9%E7%90%86%E5%B1%82%E9%9A%BE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="链路层和物理层难题"><a href="#链路层和物理层难题" class="headerlink" title="链路层和物理层难题"></a>链路层和物理层难题</h1><hr><ol><li><p>IPV6的地址为0001:0123:0000:0000:0000:ABCD:0000:0001&#x2F;96，下列哪个简写地址是不正确的？（）</p><p>A.1:123:0:0:0:ABCD:0:1&#x2F;96</p><p>B.1:123:0:0:0:ABCD::1&#x2F;96</p><p>C.1:123::ABCD:0:1&#x2F;96</p><p>D.1:123::ABCD::1&#x2F;96</p></li><li><p>一个 IPv6 数据报可以有多个扩展首部，但是只有一种扩展首部可以在一个 IPv6 数据报可以有多个扩展首部，这种扩展首部是（   ）。</p><p>A.逐跳选项首部</p><p>B.路由选择首部</p><p>C.目的站选项首部</p><p>D.身份验证首部</p></li><li><p>IPv6 的地址配置方法不包括( )。</p><p>A.采用无类别编址 CIDR</p><p>B.无状态地址自动配置</p><p>C.DHCPv6 引入 IPv6</p><p>D.手工配置</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>传输层知识点</title>
    <link href="/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2023/06/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%90%86%E8%AE%BA%E7%9F%A5%E8%AF%86%E7%82%B9/%E4%BC%A0%E8%BE%93%E5%B1%82%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="传输层知识点"><a href="#传输层知识点" class="headerlink" title="传输层知识点"></a>传输层知识点</h1><blockquote><p>最早记录于2023&#x2F;05&#x2F;15，旨在系统学习传输层内容</p><p>以下给出一些比较有用的参考文章或者复习方法：</p><p>[(139条消息) 第五章 运输层<a href="https://blog.csdn.net/weixin_43717681/article/details/118250653">练习题+课后习题]_以下关于udp校验和的说法中,错误的是_黄乐荣的博客-CSDN博客</a></p></blockquote><h2 id="1-UDP"><a href="#1-UDP" class="headerlink" title="1. UDP"></a>1. UDP</h2><p><strong>为什么说UDP是面向报文的，而TCP是面向字节流的?</strong><br>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。这就是说，应用层交给UDP多长的报文，UDP就照样发送，即一次发送一个报文</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230515105235697.png" alt="image-20230515105235697"></p><h2 id="2-TCP"><a href="#2-TCP" class="headerlink" title="2. TCP"></a>2. TCP</h2><p><strong>MSS于窗口字段</strong>：</p><p>在TCP报文段的首部中有一个“窗口大小”的字段，该字段占16bit&#x3D;2byte。该字段主要用于TCP滑动窗口进行流量控制，很多人喜欢把TCP的MSS和“窗口大小”字段混淆，今天在这了做一个区分说明。</p><p><strong>MSS</strong>是TCP报文段中数据部分的最大长度，如果上层交付下来的数据超过MSS就要对交付下来的数据进行分段。在TCP连接的第一次、第二次握手中会分别告知对方MSS，从而起到通信双方协商MSS的效果。</p><p><strong>TCP</strong>报文段首部中，“窗口大小”字段通常用于告知对方自己的能够接受的数据量大小。窗口本质就是一个缓冲区buffer，该字段的值用于告知对方自己剩余的可用缓冲区大小。在每一个TCP报文段中都会通过“窗口”字段告知对方自己的所能接收数据的大小。窗口大小通常用滑动窗口流量控制。</p><h3 id="2-3-流量控制"><a href="#2-3-流量控制" class="headerlink" title="2.3 流量控制"></a>2.3 流量控制</h3><h5 id="滑动窗口机制"><a href="#滑动窗口机制" class="headerlink" title="滑动窗口机制"></a>滑动窗口机制</h5><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230515102940385.png" alt="image-20230515102940385"></p><h3 id="2-4-拥塞控制"><a href="#2-4-拥塞控制" class="headerlink" title="2.4 拥塞控制"></a>2.4 拥塞控制</h3><p>关于慢启动和避免拥塞的两个不同的阶段</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230515101115573.png" alt="image-20230515101115573"></p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>计算机网络</category>
      
      <category>理论知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android的build.gradle执行implementation无法导入依赖的解决方法</title>
    <link href="/2023/06/20/%E5%90%84%E7%A7%8D%E9%9A%8F%E7%AC%94%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/gradle%E9%83%A8%E5%88%86%E4%BE%9D%E8%B5%96%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2023/06/20/%E5%90%84%E7%A7%8D%E9%9A%8F%E7%AC%94%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/gradle%E9%83%A8%E5%88%86%E4%BE%9D%E8%B5%96%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="android-的build-gradle-执行implementation无法导入依赖的解决方法"><a href="#android-的build-gradle-执行implementation无法导入依赖的解决方法" class="headerlink" title="android 的build.gradle 执行implementation无法导入依赖的解决方法"></a>android 的build.gradle 执行implementation无法导入依赖的解决方法</h1><hr><blockquote><p>最近在学习android的时候，有几个库都遇到了无法通过implementation从网上下载下来</p><p>后面搜了一圈发现了一篇博主的回答</p><p><a href="https://blog.csdn.net/Goals1989/article/details/125724756">(161条消息) Failed to resolve: com.scwang.smartrefresh:SmartRefreshLayout:1.1.2_hudawei996的博客-CSDN博客</a></p></blockquote><p>主要原因是gradle版本的升级，配置文件发生了变化，导致无法在build.gradle当中导入一些包</p><p>例如用到了数据库的<strong>litepal</strong>包以及<strong>smartrefresh</strong>工具</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">implementation <span class="hljs-string">&#x27;org.litepal.guolindev:core:3.2.3&#x27;</span><br>implementation <span class="hljs-string">&#x27;com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-21&#x27;</span><br></code></pre></td></tr></table></figure><p>需要到<code>setting.gradle</code>当中添加<strong>jcenter（）</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620154640619.png" alt="image-20230620154640619"></p>]]></content>
    
    
    <categories>
      
      <category>各种随笔经验记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android模仿粤苗APP界面功能实现</title>
    <link href="/2023/06/20/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%BC%96%E7%A8%8B/Andoird%E6%A8%A1%E4%BB%BF%E7%B2%A4%E8%8B%97APP/"/>
    <url>/2023/06/20/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%BC%96%E7%A8%8B/Andoird%E6%A8%A1%E4%BB%BF%E7%B2%A4%E8%8B%97APP/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-模仿粤苗APP界面功能实现"><a href="#Android-模仿粤苗APP界面功能实现" class="headerlink" title="Android 模仿粤苗APP界面功能实现"></a>Android 模仿粤苗APP界面功能实现</h1><h2 id="0-题目要求"><a href="#0-题目要求" class="headerlink" title="0. 题目要求"></a>0. 题目要求</h2><p>题目：我的 粤苗APP</p><p>\1. 粤苗APP界面</p><p>Ø 基于已完成的“APP调研报告”相关的经验总结，尽量模拟如下粤苗APP（华为应用市场：粤苗）的功能，即参考如下的界面展示形式及功能模块：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620111831812.png" alt="image-20230620111831812"><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620111855908.png" alt="image-20230620111855908"><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620111909475.png" alt="image-20230620111909475"></p><p>图1 粤苗APP；功能模块及其高清图可以去APP查看</p><p>\2. 具体要求</p><p>模拟图1所示粤苗APP，介绍该APP与服务相关的一些知识点并能提供相应功能：</p><p>1） 建议包含的一些功能：活动之间的转换与数据传递；能适应不同的展示界面；有登录功能，强制下线功能；数据有多样化的持久化功能；能跨程序提供与共享数据；有展示一些多媒体的功能；</p><p>2） 较好的实现了书本上介绍的一些较成熟的功能，并能较好的把这些功能融合在一个完整且无大bug的APP里；</p><p>3） 能在此基础上构建自己的报告亮点，如实现了书本不一样的功能模块，或者为某个知识点找到适当的新的应用场景，或者能解决同学们普遍存在的一些问题等；</p><p>4） 模拟的APP不局限于所参照APP的功能，即只需尽量模拟这些功能，<strong>不要求将每个界面或功能都实现，如果某个界面或功能不能体现已学知识点，可以不用考虑</strong>，当然如果能想办法实现出来，可以作为报告亮点；即<strong>不必与这些界面或功能完全一样，可在此基础上进行变通，达到类似的效果就可以</strong>；如果设计了一些该APP没有的功能，请说明清楚这些功能的实现方式、潜在的用途等；</p><p>5） <strong>总体目标是考察同学们是否已掌握课程内容，是否能灵活利用所学的知识点</strong>，做到每个功能各种实现方式的丰富化（如数据的持久化的三种实现方式都能在APP中有所体现），并且能了解并总结不同实现方式的优劣，且能通过APP的实现体现出来；</p><p>\3. 部分参考</p><p>1）功能实现参考：图第1-3列尽量参考第6章数据持久化技术的各个知识点；第1列尽量参考布局及活动之间的跳转，碎片的实现，多媒体展示功能；第1,2列可以利用Tablayout、ViewPager或RecyclerView；</p><p>2）设计Android基于位置的服务，比如能根据用户所在位置查找最近的服务或门诊网点；添加一个小功能，整合网络技术的应用，比如“收藏”的功能，或个人接种记录的线下保存；利用数据后台下载的功能，比如接种手册或接种指导视频的下载等；</p><p>3）可以借鉴的部分章节内容，第12章可以让你的APP界面变得更美观；第14章展示了一个大型的工程，可以学习下多个功能怎样在一个工程里体现；</p><p>\4. 其它要求</p><p>1）构建的APP要格式工整，美观；个人补充的新的功能或界面可以与“APP调研报告”的总结对应上；</p><p>2）实验报告中需要有功能的描述、实验结果的截屏图像及详细说明；结果展示要具体，图文交叉解释；代码与文本重点要突出；建议报告采用白色背景的形式；</p><p>3）也欢迎采用课程后续章节的知识点完成本次大作业，如果实现的功能言之合理，会考虑酌情加分；</p><p>4）每位同学在最后一次课都需要上台报告，并且最好能现场演示APP的功能等，没上台报告的同学分数会受一定的影响；</p><p>5）报告由个人独立完成。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[TOC]</p><blockquote><p>开发语言：Java</p><p>开发工具：Android Studio</p><p><strong>开发用到的外部包</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//三个依赖，用于Tablayout，viewpager，recyclerView布局</span><br>implementation <span class="hljs-string">&#x27;androidx.legacy:legacy-support-v4:1.0.0&#x27;</span><br>implementation <span class="hljs-string">&#x27;com.google.android.material:material:1.5.0&#x27;</span><br>implementation <span class="hljs-string">&#x27;androidx.recyclerview:recyclerview:1.2.1&#x27;</span><br><span class="hljs-comment">//数据库的litepal</span><br>implementation <span class="hljs-title function_">files</span><span class="hljs-params">(<span class="hljs-string">&#x27;libs/litepal-2.0.0-src.jar&#x27;</span>)</span><br><span class="hljs-comment">//百度地图API</span><br>implementation <span class="hljs-title function_">files</span><span class="hljs-params">(<span class="hljs-string">&#x27;libs/BaiduLBS_Android.jar&#x27;</span>)</span><br><span class="hljs-comment">//引用别人的百度地图项目时用到的</span><br>implementation <span class="hljs-string">&#x27;com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-21&#x27;</span><br><span class="hljs-comment">//二维码扫描依赖</span><br>implementation <span class="hljs-string">&#x27;com.google.zxing:core:3.3.3&#x27;</span><br>implementation <span class="hljs-string">&#x27;com.journeyapps:zxing-android-embedded:3.6.0&#x27;</span><br><br></code></pre></td></tr></table></figure><p>注意！！！</p><ol><li><p>这里可能有的人版本是support-v4对应的包</p><p>添加了support-v4的包后发现build.gradle（Gradle Scripts文件夹下）有报错，</p><p>报错内容类似<code>Version 28 (intended for Android Pie and below) is the last version of the legacy support library</code></p><p>这是因为当前的AS已经不支持这些旧的包，因此可以将support-v4迁移到AndroidX，具体方法参考下面的文章或者自行搜索：</p><p><a href="https://blog.csdn.net/lfdfhl/article/details/105269551">(174条消息) Version 28 (intended for Android Pie and below) is the last version of the legacy support library_谷哥的小弟的博客-CSDN博客</a></p></li><li><p>litepal的引入是<strong>本地</strong>下载好并且导入的依赖</p><p>这里尝试过直接引入<code>implementation &#39;org.litepal.guolindev:core:3.2.0&#39;</code>或者是<code>implementation &#39;org.litepal.android:core:3.2.0&#39;</code></p><p>但是发现在Java，manifest文件当中根本找不到喝这个库相关的内容</p><p>于是就直接到github上面下载jar包并且导入了</p><p>给出下载地址 ： <a href="https://github.com/guolindev/LitePal#latest-downloads/">https://github.com/guolindev/LitePal#latest-downloads/</a></p></li><li><p>百度地图的API（LBS SDK）也是要上网下载到<strong>本地</strong>的，但是会有不同的包选择</p><p>所以如果是使用别人的项目，那么则建议直接用别人libs下面的LBS SDK包，否则可能出现不兼容的情况</p></li><li><p>项目源码：</p><p><a href="https://github.com/Cheesheep/AndroidFinal-YueMiaoApp">Cheesheep&#x2F;AndroidFinal-YueMiaoApp: the final project of Android Class in 2023’s Junior Year02 (github.com)</a></p></li></ol></blockquote><h2 id="1-效果展示"><a href="#1-效果展示" class="headerlink" title="1. 效果展示"></a>1. 效果展示</h2><blockquote><p>全部功能实现功能如下：、</p><p><strong>基本功能：</strong></p><ul><li>用户登录（数据持久化）：<strong>数据库文件存储和读取</strong>账号密码</li><li>退出登录（广播机制实现强制下线）</li><li>提示网络中断（广播机制实现网络监听）</li><li>使用<strong>SharedPreference</strong>实现记住密码功能（数据持久化）：</li><li>点击页面打开嵌入式Web内容（使用WebView）</li><li><strong>侧边栏</strong>放置用户信息条（NavigationVIew）</li><li>新闻内容使用Tab实现切换（ViewPager）</li><li>使用RecyclerView实现多种布局（线性，瀑布式，网格等）</li><li>网格菜单布局GridLayout</li></ul><p><strong>新功能：</strong></p><ul><li>zxing库实现<strong>扫描、生成二维码</strong>（跨程序共享数据，Thread）</li><li>百度API（LBS SDK）实现地图以及寻找附近门诊功能（位置服务）</li><li>受种者信息实现CRUD增删改查（数据库操作）</li><li>轮播图实现（ViewPager，<strong>多线程</strong>）</li></ul></blockquote><ul><li><p>首先打开APP页面先进入的是登录界面，可以选择<strong>记住密码</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619171717.png" alt="联想截图_20230619171717"></p></li><li><p>登录成功后进入首页，页面从上到下是<strong>轮播图</strong>，<strong>预约专题菜单</strong>、<strong>新冠相关新闻</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619173947816.png" alt="image-20230619173947816"></p><p>点击左上角的图标可以展示个人信息侧边栏</p><p>首页下方的新闻可以实现fragemnt的<strong>页面切换</strong>，新闻具体页面用<strong>WebView嵌入网页</strong>对应内容</p></li><li><p>首页点击预约专题当中的<strong>团体预约</strong>：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619173712.png" alt="联想截图_20230619173712"></p><p>通过输入任意数字，英文，中文都可以生成属于自己的二维码，也可以点击扫描别人的二维码</p><p>从而获取团体码数字内容</p></li><li><p>点击底部导航栏，切换到<strong>门诊</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619175026770.png" alt="image-20230619175026770"></p><p>门诊使用了百度地图的API，点击社康，门诊，医院三个按钮，可以基于当前的位置搜索</p><p>到附近最近的门诊等，如图为搜索麦当劳的结果</p></li><li><p>最后切换到个人页面，可以点击进去查看受种者信息</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619175451553.png" alt="image-20230619175451553"></p><p>可以对受种者的信息实现增删改查，也可以将某个受种者绑定到当前的用户</p></li></ul><h2 id="2-基本功能介绍"><a href="#2-基本功能介绍" class="headerlink" title="2. 基本功能介绍"></a>2. 基本功能介绍</h2><blockquote><p>这一部分先简单地介绍一下一些基本的页面功能，大都是之前的实验曾经实现过的</p><p>首先看一下Java文件的布局，文件较多，因此按照页面来进行分类</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619181107797.png" alt="image-20230619181107797"></p><p>主要页面为四个，分别是登陆页面、首页、门诊页面、个人主页</p><p>还有一些子页面，例如团体码扫描，受种者信息等在下面会详细展开</p></blockquote><h3 id="2-1-顶部栏ToolBar以及侧滑栏Navigation"><a href="#2-1-顶部栏ToolBar以及侧滑栏Navigation" class="headerlink" title="2.1 顶部栏ToolBar以及侧滑栏Navigation"></a>2.1 顶部栏ToolBar以及侧滑栏Navigation</h3><blockquote><p>顶部菜单栏：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619183236.png" alt="联想截图_20230619183236"></p><p>侧边栏：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619183300.png" alt="联想截图_20230619183300"></p><p><strong>布局文件</strong>：</p><ul><li>activity_main.xml ：主活动页面</li><li>toolbar_menu：菜单栏图标（右侧的分享和个人页面的logo）</li><li>nav_header,xml ：侧滑栏的头部信息（头像，昵称，联系方式）</li><li>left_drawer.xml：侧滑栏的菜单内容</li></ul><p><strong>java文件</strong>：</p><ul><li>MainActivity</li><li>NavigationUtil</li></ul></blockquote><h4 id="2-1-1-导入导航栏依赖"><a href="#2-1-1-导入导航栏依赖" class="headerlink" title="2.1.1 导入导航栏依赖"></a>2.1.1 导入导航栏依赖</h4><p>导入”NavigationView“的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">implementation &#x27;com.android.support:design:29.0.1&#x27;<br></code></pre></td></tr></table></figure><h4 id="2-1-2-配置toolbar菜单栏布局文件"><a href="#2-1-2-配置toolbar菜单栏布局文件" class="headerlink" title="2.1.2 配置toolbar菜单栏布局文件"></a>2.1.2 配置toolbar菜单栏布局文件</h4><p>关于toolbar的各种设置，可以参考以下文章</p><p><a href="https://blog.csdn.net/qq_42324086/article/details/117390236">(174条消息) Android Toolbar的使用详解_暗恋花香的博客-CSDN博客</a></p><p><strong>设置为NoActionBar</strong>：</p><p>要使用toolbar，首先要去掉系统默认设置的ActionBar</p><p>在AndroidManifest.xml文件当中可以设置活动的主题，我们新建一个NoActionBar的主题，并且给我们需要配置toolBar的页面赋予这个主题即可</p><p><strong>AndroidMenifest.xml</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619183942699.png" alt="image-20230619183942699"></p><p><strong>themes.xml</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422164201720.png" alt="image-20230422164201720"></p><p>看到最右边设置了<code>noActionBar</code>，这样才可以让toolbar正常显示</p><p><strong>配置toolBar</strong></p><p>需要在<code>activity_main.xml</code>文件当中放入toolBar，因为是在首页主活动放置toolBar</p><p><strong>activity_main.xml部分代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    顶部菜单栏toolBar--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.appcompat.widget.Toolbar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/my_toolbar&quot;</span>                                          <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.ActionBar&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:popupTheme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">......</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><p>除了在活动布局文件中放置toolbar，还需要一个菜单图标文件</p><p><strong>toolbar_menu.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/share&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orderInCategory</span>=<span class="hljs-string">&quot;80&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;edit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:showAsAction</span>=<span class="hljs-string">&quot;ifRoom|withText&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag"><span class="hljs-attr">..........</span> /&gt;</span><br><span class="hljs-comment">&lt;!--    后面有更多的item如果放不下就会进入菜单栏--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的配置和actionBar的menu绘制方法类似，唯一区别就是<code>app:showAsAction</code>不同，该属性是Toolbar当中很关键的属性</p><p>其中四个不同的值的作用分别如下：</p><p>1）always：这个值会使菜单项一直显示在 ToolBar上。<br>2）ifRoom：如果有足够的空间，这个值会使菜单项显示在 Tool Bar上。<br>3）never：这个值会使菜单项永远都不出现在 ToolBar上。<br>4）withText：这个值会使菜单项和它的图标、菜单文本一起显示。一般和ifRoom一起通过“|”使用<br>app:showAsAction 属性值为 ifRoom|withText，表示如果有空间，那么就连同文字一起显示在标题栏中，否则就显示在菜单栏中。<br>而当app:showAsAction 属性值为 never时，该项作用为Menu不显示在菜单组件中。</p><p>这个文件后面我们会在<strong>activity的Java代码</strong>当中写入并且连接上</p><p><strong>MainActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">myToolbar.inflateMenu(R.menu.toolbar_menu);<br></code></pre></td></tr></table></figure><h4 id="2-1-3-配置侧滑栏xml文件"><a href="#2-1-3-配置侧滑栏xml文件" class="headerlink" title="2.1.3 配置侧滑栏xml文件"></a>2.1.3 配置侧滑栏xml文件</h4><p>添加NavigationView组件（要使用该组件需要从外部导入design包，在前面有提到导入的具体的包）</p><p>将该组件添加到toolbar所在的活动的页面当中，也就是<code>activity_main.xml</code></p><p><strong>activity_main.xml部分代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">...............</span>&gt;</span><br><br>    ...............//其他布局代码<br>    <br><span class="hljs-comment">&lt;!--左侧导航菜单--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.navigation.NavigationView</span></span><br><span class="hljs-tag"><span class="hljs-attr">..............</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:headerLayout</span>=<span class="hljs-string">&quot;@layout/nav_header&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:menu</span>=<span class="hljs-string">&quot;@menu/left_drawer&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个菜单栏由于是侧滑出现的，所以放在整个布局的最外面，并且需要用<code>DrawerLayout</code>包裹</p><p>注意看NavigationView里面有两个app的属性<code>app:headerLayout</code>和<code>app:menu</code></p><p>因此这里需要新建两个文件，一个是头部的代码<code>nav_header</code>，一个是下面的菜单的部分<code>left_drawer</code></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619184836054.png" alt="image-20230619184836054"></p><p>对应APP页面内容如上，left_drawer是一个菜单menu文件，代码比较简单就不展示了</p><h3 id="2-2-首页内容-网格菜单"><a href="#2-2-首页内容-网格菜单" class="headerlink" title="2.2 首页内容 网格菜单"></a>2.2 首页内容 网格菜单</h3><p>网格的内容比较简单，对应菜单样式</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619185152433.png" alt="image-20230619185152433"></p><p>用了两层layout进行嵌套实现了上下不同的宽度，不同个数的菜单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">GridLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:columnCount</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:rowCount</span>=<span class="hljs-string">&quot;2&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span></span><br><span class="hljs-tag">    &lt;<span class="hljs-attr">GridLayout</span>  &gt;</span><br>        三个<span class="hljs-tag">&lt;<span class="hljs-name">Button</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">GridLayout</span>&gt;</span><br><span class="hljs-comment">&lt;!--    第二行--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">GridLayout</span> &gt;</span><br>        五个<span class="hljs-tag">&lt;<span class="hljs-name">Button</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">GridLayout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">GridLayout</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="2-3-首页内容-新闻列表（TabLayout-ViewPager-Fragment）"><a href="#2-3-首页内容-新闻列表（TabLayout-ViewPager-Fragment）" class="headerlink" title="2.3 首页内容 新闻列表（TabLayout + ViewPager + Fragment）"></a>2.3 首页内容 新闻列表（TabLayout + ViewPager + Fragment）</h3><blockquote><p>通知列表使用了上述三样东西结合</p><p>TabLayout：提供选项切换到不同的菜单</p><p>ViewPager：用于滑动切换到不同的菜单</p><p>Fragment：每个菜单显示的页面内容</p><p><strong>实现效果</strong>：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619215643.png" alt="联想截图_20230619215643"></p><p><strong>涉及配置xml文件</strong>：</p><ul><li>fragment_homepage.xml （左侧碎片布局）</li><li>main_grid_menu.xml （网格菜单）</li><li>selected.xml （选中菜单的颜色设置）</li><li>themes.xml  （设置菜单的文件大小）</li><li>listview_item.xml （单条新闻列表的样式）</li><li>fragment_news_list&#x2F;xml （新闻列表，只含一个listview的碎片）</li></ul><p><strong>Java代码文件</strong>：(package com.example.yuemiaoapp.homepage.fragment;)</p><ul><li>HomepageFragement （整体主页的碎片）</li><li>NewsFragmentPagerAdapter（用于切换列表的适配器）</li><li>NewsListFragement（新闻列表碎片，用于展示不同的碎片）</li></ul></blockquote><h4 id="2-3-1-界面配置文件"><a href="#2-3-1-界面配置文件" class="headerlink" title="2.3.1 界面配置文件"></a>2.3.1 界面配置文件</h4><p>在主页的碎片文件中放入<code>TabLayout</code>和<code>ViewPager</code>控件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">.................</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--顶部导航栏，切换选项卡--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.tabs.TabLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabBackground</span>=<span class="hljs-string">&quot;@drawable/selected&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabTextAppearance</span>=<span class="hljs-string">&quot;@style/MyTabLayoutTextAppearance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">................</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--用于实现左右滑动效果--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.viewpager.widget.ViewPager</span></span><br><span class="hljs-tag"><span class="hljs-attr">.........</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>看到上面在TabLayout当中引入了两个新的东西：</p><p>分别是<code>selected.xml</code>和<code>themes.xml</code>当中的<code>MyTabLayoutTextAppearance</code></p><p>还有一个listview</p><h4 id="2-3-2-java-代码"><a href="#2-3-2-java-代码" class="headerlink" title="2.3.2 java 代码"></a>2.3.2 java 代码</h4><p>这里稍微说明一下<strong>实现的步骤</strong></p><ul><li><p>初始化ViewPager和TabLayout</p><p><strong>HomepageFragment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将页面绑定viewPager，进行设置</span><br>initViewPager();<br><span class="hljs-comment">//初始化layout的设置，例如图标，定位</span><br>initTabLayoutView();<br></code></pre></td></tr></table></figure></li><li><p>使用开源的<code>litepal</code>库从数据库当中获取数据</p><p><strong>NewsListFragment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//根据label标签条件查询处相应的文章</span><br>    mList = LitePal.where(<span class="hljs-string">&quot;label = ?&quot;</span>,label).find(Notification.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到获取数据库的数据是非常简单的，数据库的配置这里就不详细介绍了</p><p>使用LitePal库配置是比较简单的</p><p>对应数据库表的内容：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619224456710.png" alt="image-20230619224456710"></p><p>这些刚好对应了每一条新闻列表上面的数据</p><p>点击之后就会根据url的内容跳转到一个带有<strong>WebView</strong>的页面，从而将新闻内容渲染出来</p></li><li><p>渲染到<code>listView</code>控件上面</p><p>成功获取数据后，我们会使用<strong>Adapter</strong>类来对页面的listView进行渲染</p><p>这里由于为了方便，就将对应的适配器类<code>NewsAdapter</code>放在<code>NewsListFragment.java</code>文件当中了</p><p>既然是listview那么就会有对应的listview_item.xml来对应每一条list的样式内容</p><p><strong>listview_item.xml</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619224916443.png" alt="image-20230619224916443"></p><p>上面是对应的每条新闻列表的样式</p></li></ul><h3 id="2-4-登录页面（sharedPreference存储密码-数据库校对用户信息）"><a href="#2-4-登录页面（sharedPreference存储密码-数据库校对用户信息）" class="headerlink" title="2.4 登录页面（sharedPreference存储密码 + 数据库校对用户信息）"></a>2.4 登录页面（sharedPreference存储密码 + 数据库校对用户信息）</h3><blockquote><p><strong>xml文件</strong>：</p><p>activity_login.xml</p><p><strong>登录账号</strong>：</p><p>详见下面的数据库</p><p><strong>java 相关文件</strong>：</p><ul><li>LoginActivity （登录页面对应的活动）</li><li>BaseActivity  （增加监听广播的内容，所有类的基类）</li><li>ForceOffLineReceiver （广播：用来强制下线）</li></ul><p><strong>登录界面</strong>：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619171717.png" alt="联想截图_20230619171717"></p></blockquote><p>这里的布局文件只有一个，就不详细介绍了</p><p>包裹输入内容的<strong>透明背景</strong>使用zxing库自带的<code>#00000000</code> </p><p>说一下用了哪些主要的控件：</p><ul><li>editText：输入框，可通过<code>android:theme</code>设置颜色风格</li><li>CheckBox：勾选框</li></ul><h4 id="2-4-1-用户信息校对"><a href="#2-4-1-用户信息校对" class="headerlink" title="2.4.1  用户信息校对"></a>2.4.1  用户信息校对</h4><p>从<strong>数据库</strong>当中获取用户的所有信息，和当前输入框的信息进行校对</p><p><strong>LoginActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountEdit.getText().toString();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordEdit.getText().toString();<br>    <span class="hljs-comment">//如果账号是admin且密码是123456,就认为登录成功</span><br>    userInfoList = LitePal.findAll(UserInfo.class);<span class="hljs-comment">//获取密码数据库信息</span><br>    <span class="hljs-keyword">for</span>(UserInfo info : userInfoList)&#123;<br>        <span class="hljs-keyword">if</span>(info.getAdmin().equals(account.trim()) &amp;&amp; info.getPassword().equals(password.trim()))<br>        &#123; <span class="hljs-comment">//密码正确后的逻辑代码&#125;</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>看到上面的代码通过<strong>litepal库</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">userInfoList = LitePal.findAll(UserInfo.class);<span class="hljs-comment">//获取密码数据库信息</span><br></code></pre></td></tr></table></figure><p>这一行来获取<strong>数据库中该表的所有数据</strong></p><p>用户信息表userinfo的内容如下，有密码，姓名等信息</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619225815739.png" alt="image-20230619225815739"></p><p>最后面有一个inoculate_id是用在受种者的功能处的，用于绑定当前使用受种者去预约疫苗记录等操作</p><h4 id="2-4-2-记录用户数据（SharedPreference）"><a href="#2-4-2-记录用户数据（SharedPreference）" class="headerlink" title="2.4.2 记录用户数据（SharedPreference）"></a>2.4.2 记录用户数据（SharedPreference）</h4><p>为了让用户登录更加方便，在登录页面当中，<strong>记住密码</strong>这个功能是必不可少的</p><p>而用SharedPreference可以很方便地实现这个功能</p><p>代码也很简单</p><p><strong>LoginActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">SharedPreferences pref;<br>SharedPreferences.<span class="hljs-type">Editor</span> <span class="hljs-variable">editor</span> <span class="hljs-operator">=</span> pref.edit();<br><span class="hljs-keyword">if</span>(rememberPass.isChecked())&#123; <span class="hljs-comment">//检查是否勾选了记住密码</span><br>    <span class="hljs-comment">//使用Editor来添加数据存储</span><br>    editor.putBoolean(<span class="hljs-string">&quot;remember_password&quot;</span>,<span class="hljs-literal">true</span>);<br>    editor.putString(<span class="hljs-string">&quot;account&quot;</span>,account);<br>    editor.putString(<span class="hljs-string">&quot;password&quot;</span>,password);<br>&#125;<br><span class="hljs-keyword">else</span> editor.clear();<br></code></pre></td></tr></table></figure><p>上图也就十行代码，只需要直接调用SharedPreference的库提供的内容</p><p>在检测到用户勾选了”记住密码“之后，就将数据都put到editor当中，这样就已经将用户的信息存在本地了，它的具体文件位置可以上网搜索</p><p>下次再次进入到LoginActivity的时候，就可以直接调用存在SharedPreference的数据了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">pref = PreferenceManager.getDefaultSharedPreferences(<span class="hljs-built_in">this</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isRemember</span> <span class="hljs-operator">=</span> pref.getBoolean(<span class="hljs-string">&quot;remember_password&quot;</span>,<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span>(isRemember)&#123;<br>    <span class="hljs-comment">//将记住的内容直接设置上去</span><br>    accountEdit.setText(pref.getString(<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;&quot;</span>));<br>    passwordEdit.setText(pref.getString(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;&quot;</span>));<br>    rememberPass.setChecked(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-数据库配置-（文件读写-LitePal库）"><a href="#2-5-数据库配置-（文件读写-LitePal库）" class="headerlink" title="2.5 数据库配置 （文件读写 + LitePal库）"></a>2.5 数据库配置 （文件读写 + LitePal库）</h3><blockquote><p><strong>相关配置文件</strong>：</p><ul><li>litepal.xml</li><li>AndroidManifest.xml</li><li>SchioolDemo.db</li><li>build.gradle</li></ul><p><strong>相关Java文件</strong>：</p><p>DatabaseUtil.java</p></blockquote><h4 id="2-5-1-导入依赖以及配置"><a href="#2-5-1-导入依赖以及配置" class="headerlink" title="2.5.1 导入依赖以及配置"></a>2.5.1 导入依赖以及配置</h4><p>这里我学习了《第一行代码》当中给出的LitePal的库的使用并且进行了导入</p><p>不过这里用给出的<strong>导入方法或者网上的</strong>都不行，于是只能到github直接将<strong>Jar包</strong>下载下来了。</p><p><strong>配置数据库方法</strong></p><p>这里书上也有教程，这里就简单介绍一下</p><ul><li><p>导入依赖</p><p>在build.gradle（Module.app）当中导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">implementation <span class="hljs-title function_">files</span><span class="hljs-params">(<span class="hljs-string">&#x27;libs\\litepal-2.0.0-src.jar&#x27;</span>)</span><br></code></pre></td></tr></table></figure></li><li><p>在main当中新建assets文件夹，并新建一个litepal.xml</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230518173736578.png" alt="image-20230518173736578"></p><p>该文件用于配置数据库和Java当中的类的关系映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">litepal</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dbname</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;MyDBDemo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dbname</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.yuemiaoapp.entity.Notification&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br> ..........<span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">litepal</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>dbname：数据库名字为”SchoolDemo“，然后一共有三个数据表，</p></li><li><p>version ：value就是数据表的个数</p></li><li><p>list：对应每一个Java当中的类的一个映射</p></li></ul></li><li><p>在<code>AndroidManifest.xml</code>当中配置一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;org.litepal.LitePalApplication&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">.......</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>配置成功后，可以通过android studio自带的<strong>Device File Explorer</strong>来查找虚拟机当中的文件</p><p>它在虚拟机文件当中的路径为<code>data/data/com.example.mewsapppage/databases</code></p><p>不过这个路径在本机电脑当中是不实际存在的，也就是说你无法在<strong>虚拟机关机</strong>的情况下去<strong>修改这个文件</strong>.</p><h4 id="2-5-2-存储提前准备好的数据文件"><a href="#2-5-2-存储提前准备好的数据文件" class="headerlink" title="2.5.2 存储提前准备好的数据文件"></a>2.5.2 存储提前准备好的数据文件</h4><p>由于考虑到每次到一台新的机器上面，都会创建一个新的数据库db，因为它是不存在本地的，因此我们要去读取它的文件</p><p>为了避免在Java当中还要手动写代码去导入数据到数据库当中，而且数据也不方便修改</p><p>于是可以采用将<strong>存在安卓资源文件中的db数据库</strong> 写入 到android手机存储db数据库的位置当中，这样就实现了文件的覆盖，可以使用预先写好数据的数据库了！</p><p>这就涉及到文件的读写操作了，我们将数据库文件存放在assets目录下面</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619231802297.png" alt="image-20230619231802297"></p><p>名字也要和我们要生成的安卓手机上的数据库<strong>文件名字一致</strong>，接着编写代码进行IO操作</p><p><strong>DatabaseUtil.java</strong></p><p>首先在Java当中获取存取的路径名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">DB_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/data/data/&quot;</span> + context.getPackageName() +<span class="hljs-string">&quot;/databases/&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">DB_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MyDBDemo.db&quot;</span>;<br></code></pre></td></tr></table></figure><p>接着使用<code>InputStream</code> 和<code>FileOutputStream</code>类来分别进行<strong>字节流</strong>的输入输出操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 得到 assets 目录下我们实现准备好的 SQLite 数据库作为输入流</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> context.getAssets().open(DB_NAME);<br><span class="hljs-comment">// 输出流,在指定路径下生成db文件</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(DB_PATH + DB_NAME);<br><span class="hljs-comment">// 文件写入</span><br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> length;<br><span class="hljs-keyword">while</span> ((length = is.read(buffer)) &gt; <span class="hljs-number">0</span>) <br>    os.write(buffer, <span class="hljs-number">0</span>, length);<br><span class="hljs-comment">// 关闭文件流</span><br>os.flush();os.close();is.close();<br></code></pre></td></tr></table></figure><p>代码也比较简单，这样我们就实现了文件的写入覆盖，就可以在<strong>本地编辑好数据库</strong>之后，直接将数据库跑在安卓的机器上啦</p><h3 id="2-6-强制下线以及网络监听（广播机制）"><a href="#2-6-强制下线以及网络监听（广播机制）" class="headerlink" title="2.6 强制下线以及网络监听（广播机制）"></a>2.6 强制下线以及网络监听（广播机制）</h3><blockquote><p><strong>涉及Java代码</strong>：</p><ul><li>ForceOfflineReceiver.java</li><li>BaseActivity.java</li><li>ActivityCollector.java</li></ul><p><strong>相关配置文件：</strong></p><p>无直接相关的，只需要调用上面的Java类代码即可自动触发功能</p></blockquote><p><strong>退出登录</strong>以及<strong>网络中断</strong>的实现效果：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620102313869.png" alt="image-20230620102313869"></p><h4 id="2-6-1-注册广播器："><a href="#2-6-1-注册广播器：" class="headerlink" title="2.6.1 注册广播器："></a>2.6.1 注册广播器：</h4><p>首先要对广播器Receiver进行<strong>注册</strong></p><p>在BaseActivity当中进行注册，然后所有有需求执行登出操作的界面都可以继承这个类作为基类，这样就会统一收到广播了</p><p>注册的代码如下：</p><p><strong>BaseActivity：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//动态注册广播器</span><br>    <span class="hljs-built_in">super</span>.onResume();<br>    <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>    <span class="hljs-comment">//增加需要监听的内容</span><br>    filter.addAction(<span class="hljs-string">&quot;com.example.myyuemiao.FORCE_OFFLINE&quot;</span>); <span class="hljs-comment">//监听强制下线广播</span><br>    filter.addAction(<span class="hljs-string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>); <span class="hljs-comment">//监听网络连接广播</span><br>    forceOffLineReceiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForceOffLineReceiver</span>();<br>    <span class="hljs-comment">//注册监听，这样ForceOfflineReceiver就可以接收到所有FORCE——OFFLINE的广播</span><br>    registerReceiver(forceOffLineReceiver,filter);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onPause();<br>    <span class="hljs-keyword">if</span>(forceOffLineReceiver != <span class="hljs-literal">null</span>)<br>        unregisterReceiver(forceOffLineReceiver); <span class="hljs-comment">//最后取消注册</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里增加了两条需要监听的内容，分别是强制下线广播和网络链接广播，这样就很容易地实现了注册</p><p>最后不要忘了在onPause或者onDestroy的时候进行取消注册，不然可能会引发一些后果。</p><h4 id="2-6-2-实现监听触发事件"><a href="#2-6-2-实现监听触发事件" class="headerlink" title="2.6.2 实现监听触发事件"></a>2.6.2 实现监听触发事件</h4><p>接下来就是要到ForceOffLineReceiver这个类当中去实现具体的<strong>监听触发</strong>事件了。</p><p>具体类实现：</p><p><strong>ForceOffLineReceiver</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForceOffLineReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-comment">//该监听器包括了网络监听何强制下线监听</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        AlertDialog.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlertDialog</span>.Builder(context);<span class="hljs-comment">//构建对话框</span><br>        builder.setTitle(<span class="hljs-string">&quot;警告&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> intent.getAction();<br>        <span class="hljs-keyword">if</span> (action.equals(<span class="hljs-string">&quot;com.example.myyuemiao.FORCE_OFFLINE&quot;</span>)) &#123;<br>            <span class="hljs-comment">// Handle the FORCE_OFFLINE broadcast</span><br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.equals(<span class="hljs-string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>)) &#123;<br>            <span class="hljs-comment">// Handle the CONNECTIVITY_CHANGE broadcast</span><br>        &#125;<br>        builder.show();<span class="hljs-comment">//令该对话框可视化</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>首先该监听器要继承<code>BroadcastReceiver</code>，然后去重载它的<code>onReceive（）</code>方法，</p><p>该方法在收到之前添加的监听事件之后就会触发，我们需要做一个if判断它是哪个类型的事件触发了即可</p><hr><h2 id="3-新功能以及亮点"><a href="#3-新功能以及亮点" class="headerlink" title="3. 新功能以及亮点"></a>3. 新功能以及亮点</h2><blockquote><p> 这一部分介绍的是过去实验未实现的功能，以及一些APP没有的功能的亮点介绍</p><h3 id="新功能介绍"><a href="#新功能介绍" class="headerlink" title="新功能介绍"></a>新功能介绍</h3><ol><li>轮播图（ViewPager + Thread线程轮询）</li><li>位置服务（位置服务）</li><li>受种者信息数据库</li><li>二维码扫码（跨程序共享数据，zxing框架）</li></ol></blockquote><h3 id="3-0-亮点介绍"><a href="#3-0-亮点介绍" class="headerlink" title="3.0 亮点介绍"></a>3.0 亮点介绍</h3><ol><li><p>轮播图的实现，虽然是之前用过的ViewPager，但是用了同样的工具，展现的是完全不一样的功能，让主页<strong>更加动态和内容更加丰富</strong></p></li><li><p>百度地图实现搜索功能：</p><p>这里是书上也并没有的教程，该APP中不仅实现了基础的当前定位功能，还可以对周围建筑地址<strong>进行搜索</strong>，并且返回一个列表，点击提供的社康，门诊的按键也可以快速地查找周围的门诊或者医院</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620004141771.png" alt="image-20230620004141771"></p></li><li><p>受种者信息操作：（完善原APP功能）</p><p>这里在原本的APP里面只能新增受种者信息，但是发现无法进行删除和修改</p><p>于是将它的增删改查都完善了，并且加上了<strong>绑定当前用户</strong>的功能</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620004532814.png" alt="image-20230620004532814"></p></li><li><p>最后是二维码扫描：</p><p>这里不仅调用了摄像头的接口，并且也实现了<strong>二维码的扫描匹配</strong>，可以扫描或者使用相册里面的图片</p><p>也可以根据输入的信息生成自己的团体码，或者输入别人的来加入团体</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619173712.png" alt="联想截图_20230619173712"></p></li></ol><h3 id="3-1-轮播图"><a href="#3-1-轮播图" class="headerlink" title="3.1 轮播图"></a>3.1 轮播图</h3><p>参考博客：</p><p><a href="https://blog.csdn.net/GYongJia/article/details/89645378">(158条消息) Android开发-轮播图的详细实现_android31实现轮播图_GYongJia的博客-CSDN博客</a></p><p>实现过程中若遇到问题可以到我最下面的第四部分看看有没有同样的问题出现</p><blockquote><p>实现效果：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619232927.png" alt="联想截图_20230619232927"></p><ul><li>xml文件：<ul><li>fragment_slide_show.xml （对应布局文件）</li><li>pager_img.xml （values当中的资源文件）</li><li>dot.xml（drawable下的描点文件，用以表示轮播的当前位置）</li><li>五张轮播图照（png）</li><li>两种点的照片（分别表示选中和未选中）</li></ul></li><li>java文件：<ul><li>SlideShowFragment.java（碎片）</li><li>LoopViewAdapter.class（该类直接放在上面的碎片java文件当中）</li></ul></li></ul></blockquote><h4 id="3-1-1-xml文件配置"><a href="#3-1-1-xml文件配置" class="headerlink" title="3.1.1 xml文件配置"></a>3.1.1 xml文件配置</h4><p>这里用到了三个xml文件</p><p>主要看 <code>fragment_slide_show.xml</code> ，该文件使用ViewPager实现轮播图；</p><p>其实原理是和之前的新闻列表切换是一样的，只不过这次没有了TabLayout</p><p><strong>fragment_slide_show.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">.....</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.homepage.fragment.SlideShowFragment&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--存放图片的ViewPager--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.viewpager.widget.ViewPager</span></span><br><span class="hljs-tag">        <span class="hljs-attr">.......</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/loopviewpager&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">.....</span>    &gt;</span><br>        <span class="hljs-comment">&lt;!-- 标题--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">......</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 小圆点--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/ll_dots_loop&quot;</span><span class="hljs-attr">....</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到这里的布局比较简单，上面是用一个ViewPager，实现轮播图的效果</p><p>然后用圆点和标题方便标识不同的页面</p><h4 id="3-1-2-Java文件"><a href="#3-1-2-Java文件" class="headerlink" title="3.1.2 Java文件"></a>3.1.2 Java文件</h4><p>所有相关的代码都在<code>SlideShowFragment.java</code>下</p><p><strong>开启线程Thread</strong></p><p>这里主要讲下轮播图如何实现定时滚动</p><p>关键代码在于开启一个新的线程来进行轮询，这样就可以在不影响主线程的情况下</p><p>做到定时轮询，然后同时也可以实现其他的功能了。</p><p><strong>SlideShowFragment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 开启轮询 </span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(isRunning)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                Thread.sleep(<span class="hljs-number">5000</span>); <span class="hljs-comment">//间隔5s换一张图</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            <span class="hljs-comment">//下一条</span><br>            <span class="hljs-keyword">if</span>(!isRunning) <span class="hljs-comment">//若退出登录，则活动停止，线程终止</span><br>                <span class="hljs-keyword">break</span>;<br>            requireActivity().runOnUiThread(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    viewPager.setCurrentItem(viewPager.getCurrentItem()+<span class="hljs-number">1</span>);<br>                &#125; &#125;); &#125; &#125;<br>&#125;.start();<br></code></pre></td></tr></table></figure><h3 id="3-2-地图功能实现"><a href="#3-2-地图功能实现" class="headerlink" title="3.2 地图功能实现"></a>3.2 地图功能实现</h3><p>这个功能可以说是工程量较大的一个内容了；</p><p>需要导入百度的SDK，还要获取API KEY</p><p><strong>主要参考：</strong></p><p><a href="https://blog.csdn.net/weixin_43117800/article/details/116236948">(159条消息) Android集成百度地图实现搜索及列表展示_android 模仿百度地图搜索_“嗯哈的博客-CSDN博客</a></p><p>参考该博客的gitee的源码，写的挺完善的。</p><blockquote><p>实现效果以及功能：</p><ul><li><p>可以点击地图的不同位置，会自动在下面列表显示相关的地址信息</p></li><li><p>右上角的logo可以回到我们当前所在的位置</p></li><li><p>也可以直接搜索我们想要的地址信息</p></li><li><p>双击或者双指滑动可以放大地图等等</p></li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230619175026770.png" alt="image-20230619175026770"></p><p>xml配置文件：</p><ul><li>activity_clinic_map.xml 、location_item.xml （layout文件夹）</li><li>gray_bk_15.xml 、seach_bg.xml（drawable文件夹）</li></ul><p>java 文件配置：</p><ul><li>ClinicMapActivity（地图页面）</li><li>ClinicListAdapter（搜索结果列表适配器）</li><li>BaiduMapUtils（提供位置信息<code>LocatioClient</code>的初始化以及计算距离等相关函数）</li></ul><p>外部导入包以及API KEY获取：</p><p>这些网上都有很多教程，这里就不赘述了</p></blockquote><h4 id="3-2-1-xml文件配置"><a href="#3-2-1-xml文件配置" class="headerlink" title="3.2.1 xml文件配置"></a>3.2.1 xml文件配置</h4><p><strong>activity_clinic_map.xml</strong> </p><p>首先是地图的页面，这里用到了一个关键的控件<code>MapView</code>，是百度的SDK提供的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">com.baidu.mapapi.map.MapView</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/mapview&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:clickable</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p><strong>AndroidManifest.xml</strong></p><p>这个文件的配置很重要，主要配置两个地方</p><ul><li><p>权限配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这个权限用于进行网络定位 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_COARSE_LOCATION&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 这个权限用于访问GPS定位 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_FINE_LOCATION&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 用于访问wifi网络信息，wifi信息会用于进行网络定位 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!-- 这个权限用于获取wifi的获取权限，wifi信息会用来进行网络定位 --&gt;</span><br>...........<br></code></pre></td></tr></table></figure><p>这里涉及到很多权限，具体完整的可以直接去看源码</p></li><li><p>API KEY配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MyApplication&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">service</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.baidu.location.f&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:process</span>=<span class="hljs-string">&quot;:remote&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.baidu.lbsapi.API_KEY&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;这里换成你自己API KEY的值&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-2-2-java相关文件"><a href="#3-2-2-java相关文件" class="headerlink" title="3.2.2 java相关文件"></a>3.2.2 java相关文件</h4><ul><li>在<code>ClinicMapAcitiity</code>和<code>BaiduMapUtils</code>当中的很多代码都是以配置为主</li></ul><p>具体的配置代码在官网也可以查询到</p><p>例如初始化<strong>当前定位信息</strong>，调用的是<code>initLocation()</code></p><p><strong>ClinicMapActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initLocation</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//client的各种配置信息</span><br>    mLocationClient = BaiduMapUtils.getLocationClient(ClinicMapActivity.<span class="hljs-built_in">this</span>);<br>    <span class="hljs-comment">//添加监听器</span><br>    <span class="hljs-type">MyLocationListener</span> <span class="hljs-variable">myLocationListener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyLocationListener</span>();<br>    mLocationClient.registerLocationListener(myLocationListener);<br>    mLocationClient.start();<br>&#125;<br></code></pre></td></tr></table></figure><p>在MyLocationListener当中会进行调用回调函数<code>onReceiveLocation()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLocationListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BDAbstractLocationListener</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceiveLocation</span><span class="hljs-params">(BDLocation location)</span> &#123;<br>.....<br>            showMap(native_latitude, native_longitude);<br><span class="hljs-comment">//            mLocationClient.stop();</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这个函数的调用的是时候我是遇到了一点问题的，我放到后面讲</p><p>这里的<strong>showMap</strong>函数可以实现定位到想要去的位置，只要<strong>输入经度纬度</strong>即可</p><p>实现效果如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230620003114.png" alt="联想截图_20230620003114"></p><p>实现的效果如上图所示，可以自动移动地图，并且在当前经纬度<strong>标上一个记号</strong></p><ul><li>而在<code>ClinicListAdapter</code>则是对获取的poiInfo信息进行处理，poiInfo是定位后返回的list列表的信息</li></ul><p>最终渲染出来的<strong>搜索的列表</strong>如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620102537740.png" alt="image-20230620102537740"></p><p>而实现它的关键就是使用百度地图的POI搜索，PoiInfo是什么呢，简单介绍一下：</p><blockquote><p>POI（Point of Interest），即“兴趣点”。在地理信息系统中，一个POI可以是一栋房子、一个景点、一个邮筒或者一个公交站等。<br>百度地图SDK提供三种类型 的POI检索：城市内检索、周边检索和区域检索（即矩形区域检索）。下面分别对三种POI检索服务的使用方法作说明。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">PoiInfo<span class="hljs-punctuation">:</span> name = 五里店; uid = fe29f769d4d79f839d9d682e; address = 江北区; province = 重庆市; city = 重庆市; area = 江北区; street_id = fe29f769d4d79f839d9d682e; phoneNum = ; postCode = <span class="hljs-literal"><span class="hljs-keyword">null</span></span>; detail = <span class="hljs-number">1</span>; location = latitude<span class="hljs-punctuation">:</span> <span class="hljs-number">29.584075</span><span class="hljs-punctuation">,</span> longitude<span class="hljs-punctuation">:</span> <span class="hljs-number">106.562899</span>; hasCaterDetails = <span class="hljs-literal"><span class="hljs-keyword">false</span></span>; isPano = <span class="hljs-literal"><span class="hljs-keyword">false</span></span>; tag = <span class="hljs-literal"><span class="hljs-keyword">null</span></span>; poiDetailInfo = PoiDetailInfo<span class="hljs-punctuation">:</span> ......<br></code></pre></td></tr></table></figure><p>上面是PoiInfo的部分信息，可以看到会返回非常详细的信息，支撑我们做出各种数据处理</p><p>在<code>ClinicMapActivity</code>当中获取到poi数据后,传入到<code>ClinicListAdapter</code>进行数据渲染</p><p><strong>ClinicMapActivity</strong></p><p>在代码当中注册Poi搜索的<strong>监听器</strong>,然后调用<code>mClinicListAdapter.addAll(native_latitude, native_longitude, allPoi);</code>传输数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initpoiSearch</span><span class="hljs-params">()</span> &#123;<br>    mPoiSearch = PoiSearch.newInstance();<br>    mPoiSearch.setOnGetPoiSearchResultListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OnGetPoiSearchResultListener</span>() &#123;       <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onGetPoiResult</span><span class="hljs-params">(PoiResult poiResult)</span> &#123;<br>            List&lt;PoiInfo&gt; allPoi = poiResult.getAllPoi();<br>            <span class="hljs-keyword">if</span> (allPoi != <span class="hljs-literal">null</span> &amp;&amp; allPoi.size() != <span class="hljs-number">0</span>) &#123;<br>                mLocation = allPoi.get(<span class="hljs-number">0</span>);<br>                mClinicListAdapter.addAll(native_latitude, native_longitude, allPoi);<br>            &#125; <span class="hljs-keyword">else</span> &#123;mClinicListAdapter.notifyDataSetChanged();&#125;<br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-二维码生成以及扫描"><a href="#3-3-二维码生成以及扫描" class="headerlink" title="3.3  二维码生成以及扫描"></a>3.3  二维码生成以及扫描</h3><blockquote><p>参考博客（该功能的项目文件体量是目前所有功能当中最大的）：</p><p><a href="https://blog.csdn.net/lowprofile_coding/article/details/83386050">(159条消息) zxing开源库的基本使用_安辉就是我的博客-CSDN博客</a></p><p>对应Github源码地址</p><p><a href="https://github.com/ansen666/ZxingTest">ansen666&#x2F;ZxingTest (github.com)</a></p><p>实现效果：</p><p>通过输入任意数字，英文，中文都可以生成属于自己的二维码，也可以点击扫描别人的二维码从而获取团体码数字内容</p><p>可以长按自己的二维码进行<strong>识别或者保存</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619173712.png" alt="联想截图_20230619173712"></p><p>外部导入依赖（Google的zxing库）：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">implementation <span class="hljs-string">&#x27;com.google.zxing:core:3.3.3&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>xml文件</strong>：</p><ul><li><p>源项目对应的xml配置</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620005303301.png" alt="image-20230620005303301"></p><p>这里的activity_main移植之后换成自己定义的活动页面就好了</p></li><li><p>还有一些colors、themes、strings等文件需要替换，但是这些也可以不用它的</p><p>不是必需的</p></li></ul><p><strong>java文件</strong>：</p><p>对应的Java文件也是挺多的，分成了不同的模块</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620005557261.png" alt="image-20230620005557261"></p><p>大概有十个文件左右，除了两个activity，其他全是各种功能类</p></blockquote><h4 id="3-3-1-xml文件配置"><a href="#3-3-1-xml文件配置" class="headerlink" title="3.3.1 xml文件配置"></a>3.3.1 xml文件配置</h4><p>首先是AndroidManifest的权限配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CAMERA&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.VIBRATE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-feature</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.hardware.camera&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-feature</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.hardware.camera.autofocus&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure><p><strong>activity_scan.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">              <span class="hljs-attr">..</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;@layout/title_top_white&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span>  <span class="hljs-attr">......</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">SurfaceView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/scan_activity_preview&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:keepScreenOn</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">...</span>/&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">com.example.yuemiaoapp.teambookpage.view.ScannerView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/scan_activity_mask&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">....</span> /&gt;</span><br>......<br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里导入了两个比较特别的控件，<code>SurfaceView</code>和<code>ScannerView</code>，用来实现扫描的效果</p><h4 id="3-3-2-Java源码"><a href="#3-3-2-Java源码" class="headerlink" title="3.3.2 Java源码"></a>3.3.2 Java源码</h4><ol><li><strong>扫描识别二维码：</strong></li></ol><p>先介绍一下点击扫描二维码的功能，使用intent来开启一个<code>ScanActivity</code>，这个Activity是我已经封装好的，对应UI实现如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230618215334.png" alt="联想截图_20230618215334"></p><p>ScanActivity里面处理了扫描二维码的整个流程，扫描成功后会把扫描结果返回。ScanActivity类的代码有点多，就不贴出来了，有兴趣的自己看源码。</p><ol start="2"><li><strong>TeamBookActivity</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> R.id.btn_scanning:<span class="hljs-comment">//扫描</span><br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(TeamBookActivity.<span class="hljs-built_in">this</span>,ScanActivity.class);<br>    startActivityForResult(intent,SCAN_REQUEST_CODE);<br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>然后在重写Activity类的onActivityResult方法来处理收到的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> resultCode, <span class="hljs-meta">@Nullable</span> Intent intent)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onActivityResult(requestCode, resultCode, intent);<br>    <span class="hljs-keyword">if</span> (requestCode == SCAN_REQUEST_CODE &amp;&amp; resultCode == RESULT_OK) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> intent.getStringExtra(ScanActivity.INTENT_EXTRA_RESULT);<br>        showToast(<span class="hljs-string">&quot;扫描结果:&quot;</span>+input);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>从相册选择二维码图片</strong></li></ol><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230620101548.png" alt="联想截图_20230620101548"></p><p>代码同样在<code>teambookactivity</code>下，启动系统相册，并且从中选择图片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">innerIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_PICK,<br>MediaStore.Images.Media.EXTERNAL_CONTENT_URI);<br><span class="hljs-type">Intent</span> <span class="hljs-variable">wrapperIntent</span> <span class="hljs-operator">=</span> Intent.createChooser(innerIntent, <span class="hljs-string">&quot;选择二维码图片&quot;</span>);<br>startActivityForResult(wrapperIntent, SELECT_IMAGE_REQUEST_CODE);<br></code></pre></td></tr></table></figure><p>然后同样是在<code>onActivityResult</code>当中处理选择的图片的内容，调用BitmapUtil.parseQRcode方法解析二维码图片。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> resultCode, <span class="hljs-meta">@Nullable</span> Intent intent)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onActivityResult(requestCode, resultCode, intent);<br>    <span class="hljs-keyword">if</span>(requestCode==SELECT_IMAGE_REQUEST_CODE)&#123;<span class="hljs-comment">//从图库选择图片</span><br>......<br>        <span class="hljs-keyword">if</span> (cursor.moveToFirst()) &#123;<br>            ......<br>            String result= BitmapUtil.parseQRcode(photoPath);<br>            <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(result)) &#123;<br>                showToast(<span class="hljs-string">&quot;从图库选择的图片识别结果:&quot;</span>+result);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                showToast(<span class="hljs-string">&quot;从图库选择的图片不是二维码图片&quot;</span>);<br>            &#125;<br>        &#125;<br>        cursor.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>parseQRcode()</code>方法是将文件路径读取成Bitmap格式的数据进行压缩</p><ol start="4"><li><strong>生成二维码图片</strong></li></ol><p>实现效果:</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620103614531.png" alt="image-20230620103614531"></p><p>生成二维码图片调用CreateQRBitmp.createQRCodeBitmap方法生成，这个方法是我们自己封装的，需要传入两个参数:</p><p>参数1:  图片内容、   参数2:   二维码图片最中间显示的logo(Bitmap对象)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">contentString</span> <span class="hljs-operator">=</span> etInput.getText().toString().trim();<br><span class="hljs-keyword">if</span>(TextUtils.isEmpty(contentString))&#123;<br>    showToast(<span class="hljs-string">&quot;请输入二维码内容&quot;</span>);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">Bitmap</span> <span class="hljs-variable">portrait</span> <span class="hljs-operator">=</span> BitmapFactory.decodeResource(getResources(),R.mipmap.ic_launcher);<br><span class="hljs-comment">//两个方法，一个不传大小，使用默认</span><br>qrCodeBitmap = CreateQRBitmp.createQRCodeBitmap(contentString, portrait);<br>ivQrImage.setImageBitmap(qrCodeBitmap);<br></code></pre></td></tr></table></figure><p>至此扫描二维码的主要功能就介绍完了.</p><h3 id="3-4-受种者记录操作"><a href="#3-4-受种者记录操作" class="headerlink" title="3.4 受种者记录操作"></a>3.4 受种者记录操作</h3><blockquote><p>实现效果:</p><p>可以在受种者记录处查看当前的记录信息,可以点击右下角的＋号进行新增</p><p>也可以点击进去具体的记录信息查看,同时具体的信息界面提供了修改以及绑定用户的方法</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230619175419.png" alt="联想截图_20230619175419"></p><p>xml文件:</p><ul><li>activity_inoculate_edit.xml　（编辑或者新增１具体信息）</li><li>activity_inoculate_info_page.xml　（展示具体信息）</li><li>activity_inoculate_list.xml （受种者信息的列表）</li><li>activity_person_page.xml (入口)</li></ul><p>Java文件(personpage软件包下):</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620110133117.png" alt="image-20230620110133117"></p></blockquote><p><strong>功能介绍:</strong></p><p><strong>展现受种者信息:</strong></p><p>对应数据表(inoculateinfo):</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230620110444203.png" alt="image-20230620110444203"></p><p>看到最右边的字段是user_id作为外键, 区分不同用户下的受种者记录,防止冲突</p><p><strong>InoculateListAdapter</strong> (该类在InoculateListActivity文件当中)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">InoculateListAdapter</span><span class="hljs-params">(Activity activity)</span>&#123;<br>    <span class="hljs-built_in">this</span>.activity = activity;<br>    <span class="hljs-comment">//获取当前用户的受种者记录</span><br>    inoculateInfoList = LitePal.where(<span class="hljs-string">&quot;user_id = ?&quot;</span>,String.valueOf(userInfo.getId()))<br>            .find(InoculateInfo.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面在初始化Adapter的时候,通过<code>LitePal.where()</code>来筛选不同用户对应的受种者信息.</p><h2 id="4-遇到的问题"><a href="#4-遇到的问题" class="headerlink" title="4. 遇到的问题"></a>4. 遇到的问题</h2><h3 id="4-1-设置NavigationView时控件无法直接引用"><a href="#4-1-设置NavigationView时控件无法直接引用" class="headerlink" title="4.1 设置NavigationView时控件无法直接引用"></a>4.1 设置NavigationView时控件无法直接引用</h3><p>nav_header无法直接被<code>activity.findViewById()</code>找到</p><p>由于该控件不是在<strong>activity_main.xml</strong>当中，只是被引用了</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518134252.png" alt="联想截图_20230518134252"></p><p>所以无法直接找到，因此要用如下代码获得</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">        <br><span class="hljs-type">NavigationView</span> <span class="hljs-variable">mNavigationView</span> <span class="hljs-operator">=</span> activity.findViewById(R.id.nav_view);<br><span class="hljs-type">View</span> <span class="hljs-variable">headerView</span> <span class="hljs-operator">=</span> mNavigationView.getHeaderView(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>也就是先获得NavigationView，再获取它当中的<strong>headerVIew</strong></p><h3 id="4-2-轮播图遇到的问题："><a href="#4-2-轮播图遇到的问题：" class="headerlink" title="4.2  轮播图遇到的问题："></a>4.2  轮播图遇到的问题：</h3><ul><li><p>在退出登录的时候，Thread线程没有结束，但是活动已经销毁了，所以会导致报错</p><p><strong>解决方法</strong>：退出登录的时候要用标志位进行判断</p></li></ul><h3 id="4-3-百度地图遇到的问题："><a href="#4-3-百度地图遇到的问题：" class="headerlink" title="4.3 百度地图遇到的问题："></a>4.3 <strong>百度地图遇到的问题：</strong></h3><ul><li><p>debug.keystore报错不能运行 说是invalid</p><p>解决：删除debug.keystore 等它自动重新创建</p></li><li><p>butterknife工具无法使用</p><p>解决：要把gradle版本调低</p></li><li><p>smartrefresh包无法正常导入</p><p>解决：新版的gradle里面没有这个库</p><p><a href="https://blog.csdn.net/Goals1989/article/details/125724756">(159条消息) Failed to resolve: com.scwang.smartrefresh:SmartRefreshLayout:1.1.2_hudawei996的博客-CSDN博客</a></p><p>对应上面博客，将setting.gradle当中的文件修改一下，加上jcenter</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/48033d7ff4a64807b0cc8ce7ec026501.png" alt="img"></p></li><li><p>外部导入的包发现和support-v4有冲突</p><p>解决：在<code>gradle.properties</code>加上</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">android.enableJetifier</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure></li><li><p>模拟器运行的时候无法执行LocationListener监听器<code>onRecieveLocation</code>函数，但是用<strong>真机</strong>又可以、</p><p>也就是说模拟器运行状态下无法实现<strong>当前位置的定位</strong></p></li><li><p>报错<code>has been stopped because you do not aaree with the orivacy compliance policy,Please recheck the setAoreePriyacy intarfao</code></p><p>网上都说是没有设置那个<code>setAgreePrivacy</code>为True，但是设置了也不行</p></li></ul><h3 id="4-4-数据库的框架litepal无法直接导入"><a href="#4-4-数据库的框架litepal无法直接导入" class="headerlink" title="4.4 数据库的框架litepal无法直接导入"></a>4.4 数据库的框架litepal无法直接导入</h3><p>关于这个问题和那个<code>smartrefresh</code>开源包无法导入是一样的，当前gradle不支持了</p><p>所以还是要将<code>settng.gradle</code> 的两个Management 都加上<code>jcenter（）</code></p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>xxxxxxxxxxxxxxxxxxxxxx不给你看</p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>移动互联网编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot项目使用Elastic Search教程</title>
    <link href="/2023/06/04/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD/Springboot%E4%BD%BF%E7%94%A8Elastic%20Search%E6%95%99%E7%A8%8B/"/>
    <url>/2023/06/04/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD/Springboot%E4%BD%BF%E7%94%A8Elastic%20Search%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Springboot项目使用Elastic-Search教程-完整步骤"><a href="#Springboot项目使用Elastic-Search教程-完整步骤" class="headerlink" title="Springboot项目使用Elastic Search教程(完整步骤)"></a>Springboot项目使用Elastic Search教程(完整步骤)</h1><blockquote><p>最近的项目需要用到Elastic Search，上网查资料的时候发现内容比较分散，搜索起来的时候比较费力，</p><p>于是最近入门配置成功之后，稍微总结一下吧。</p><p>先给出一些网上的教程</p><ol><li><p><a href="https://blog.csdn.net/gybshen/article/details/111469217">(152条消息) Spring Boot整合Elasticsearch，最新最全教程_spring elasticsearch_Cloud-Future的博客-CSDN博客</a></p><p>这一篇代码是写的挺清晰的</p></li><li><p>查看对应的spring data es和es和springboot对应的版本</p><p><a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/">Spring Data Elasticsearch - Reference Documentation</a></p><p><a href="https://blog.csdn.net/yexiaomodemo/article/details/107717296">(152条消息) spring data elasticsearch 对应 elasticsearch 版本_elasticsearch版本兼容_悟能的师兄的博客-CSDN博客</a></p></li><li><p>安装ES的教程</p><p><a href="https://blog.csdn.net/weixin_44876536/article/details/103082986">Windows下搭建ElasticSearch、Logstash以及基本插件_Duui的博客-CSDN博客</a></p></li><li><p>spring-data-elasticsearch官方文档</p><p><a href="https://docs.spring.io/spring-data/elasticsearch/docs/current/reference/html/#reference">Spring Data Elasticsearch - Reference Documentation</a></p></li></ol></blockquote><p>[TOC]</p><h2 id="1-安装Elastic-Search"><a href="#1-安装Elastic-Search" class="headerlink" title="1. 安装Elastic Search"></a>1. 安装Elastic Search</h2><p>这个比较简单，先直接去官网上面找到<strong>对应的Springboot的</strong>版本，然后下载Zip，解压</p><p>例如我的springboot版本是2.7.5，所以ES我下的是7.17.3</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230604174859202.png" alt="image-20230604174859202"></p><p>ES官网<a href="https://www.elastic.co/cn/downloads/elasticsearch">Download Elasticsearch | Elastic</a></p><p>主页右边可以选择过去的版本</p><p><strong>解压后</strong>直接运行bin文件下的elasticsearch.bat的批处理文件</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230604174939035.png" alt="image-20230604174939035"></p><p>然后等待CMD输出一些指令即可运行成功了！</p><p>cmd运行内容如图</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230604183512060.png" alt="image-20230604183512060"></p><p>在后面运行springboot的时候记得也要同时运行着这个Elastic Search</p><p>可以去<code>localhost:9200</code>处查看是否正确的运行;</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230605164859410.png" alt="image-20230605164859410"></p><h2 id="2-安装IK分词器（这个索引当中用了ik-max-word的话就要装）"><a href="#2-安装IK分词器（这个索引当中用了ik-max-word的话就要装）" class="headerlink" title="2. 安装IK分词器（这个索引当中用了ik_max_word的话就要装）"></a>2. 安装IK分词器（这个索引当中用了ik_max_word的话就要装）</h2><p>IK分词器是es的一个插件</p><p>我在后面配置好了springboot之后才发现要配置这个</p><p>运行spring boot的时候发现有<code>reason=analyzer [ik_max_word] has not been configured in mappings]]</code>的报错</p><p>然后搜了一下发现还需要安装分词器</p><p>因为在实体类索引当中我使用了分词</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230605161823817.png" alt="image-20230605161823817"></p><p>github下载网址 <a href="https://github.com/medcl/elasticsearch-analysis-ik">medcl&#x2F;elasticsearch-analysis-ik: The IK Analysis plugin integrates Lucene IK analyzer into elasticsearch, support customized dictionary. (github.com)</a>，在页面的右侧的release可以查看过去的版本</p><p><strong>注意版本要和ElasticSearch的一致！！</strong></p><p>分词器也是安装好对应版本（和ES版本一致）的zip文件后，直接<strong>解压到ES的plugin文件夹</strong>下即可</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/359bd7b0d80f4c1e8f1e7fcb22228ac3.png" alt="在这里插入图片描述"></p><p>安装好后再次运行Elastic Search即可。</p><h2 id="3-springboot配置相关依赖"><a href="#3-springboot配置相关依赖" class="headerlink" title="3. springboot配置相关依赖"></a>3. springboot配置相关依赖</h2><p>从这个步骤往后都是可以参照我最上面给出的教程网址，跟着走即可</p><p>我这里只讲一下大概</p><h4 id="3-1-pom导入依赖"><a href="#3-1-pom导入依赖" class="headerlink" title="3.1 pom导入依赖"></a>3.1 pom导入依赖</h4><p>只配这个data-elasticsearch就可以了，那个client可以不用，那个有什么用目前我还不会</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="3-2-java-编写相关配置类"><a href="#3-2-java-编写相关配置类" class="headerlink" title="3.2 java 编写相关配置类"></a>3.2 java 编写相关配置类</h4><p>这个配置类也很简单，所有的都是这样配置，网上直接找就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ElasticSearch 客户端配置</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> geng</span><br><span class="hljs-comment"> * 2020/12/19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestClientConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractElasticsearchConfiguration</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title function_">elasticsearchClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ClientConfiguration</span> <span class="hljs-variable">clientConfiguration</span> <span class="hljs-operator">=</span> ClientConfiguration.builder()<br>                .connectedTo(<span class="hljs-string">&quot;localhost:9200&quot;</span>)<br>                .build();<br>        <span class="hljs-keyword">return</span> RestClients.create(clientConfiguration).rest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-实体类entity与Dao层"><a href="#3-3-实体类entity与Dao层" class="headerlink" title="3.3 实体类entity与Dao层"></a>3.3 实体类entity与Dao层</h4><p>实体类Recipe</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Document(indexName = &quot;recipe&quot;,createIndex = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Recipe</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Field(type = FieldType.Integer)</span><br>    <span class="hljs-keyword">private</span> Integer id; <span class="hljs-comment">//菜谱id</span><br>    <span class="hljs-meta">@Field(type = FieldType.Integer)</span><br>    <span class="hljs-keyword">private</span> Integer categoryId;<span class="hljs-comment">//菜谱种类，外键ID</span><br>    <span class="hljs-meta">@Field(type = FieldType.Text,analyzer = &quot;ik_max_word&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-meta">@Field(type = FieldType.Keyword)</span><br>    <span class="hljs-keyword">private</span> String coverUrl; <span class="hljs-comment">//食谱封面</span><br>    <span class="hljs-meta">@Field(type = FieldType.Text,analyzer = &quot;ik_max_word&quot;)</span><br>    <span class="hljs-keyword">private</span> String mainIngredient;<span class="hljs-comment">//添有主要食材的名字</span><br>..................<br>&#125;<br></code></pre></td></tr></table></figure><p>关于这些注解的介绍可参考官方文档，或者csdn教程<a href="https://blog.csdn.net/u013089490/article/details/84323762">(153条消息) Spring Data Elasticsearch篇(1):常用注解_spring data elasticsearch @field_mykefei的博客-CSDN博客</a></p><p>对应的DAO层非常简单，spring的data-elasticsearch都已经提供好了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ESRecipeDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ElasticsearchRepository</span>&lt;Recipe,String&gt; &#123;<br>    List&lt;Recipe&gt; <span class="hljs-title function_">findByTitleOrMainIngredient</span><span class="hljs-params">(String title,String mainIngredient)</span>;<br>    List&lt;Recipe&gt; <span class="hljs-title function_">findByTitle</span><span class="hljs-params">(String title)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里dao定义了两个函数，都是它自动提供好的，只要你的实体类里面有这些参数，这个函数就可以被自动构建出来，比MybatisPlus还要高级，更详细的用法这里就不介绍了，这个只能实现简单的搜索，还没有分词功能</p><p>service层什么的就直接调用Dao层的接口就好了，这里也不展开了。</p><p>正确运行后，索引如果正确建立了，也是可以通过接口访问的</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230605164951261.png" alt="image-20230605164951261"></p><p>端口后面加上你新建的index（索引）的名称，可以校对一下里面的数据是否和实体类的一一对应</p><h4 id="3-4-高亮分词查询实现："><a href="#3-4-高亮分词查询实现：" class="headerlink" title="3.4 高亮分词查询实现："></a>3.4 高亮分词查询实现：</h4><p>参考了以下博主的文章，写的很好，基本上直接套用他写的highquerySeearch</p><p><a href="https://blog.csdn.net/wpw2000/article/details/115704320">(156条消息) SpringBoot整合ElasticSearch7.12实现增删改查及高亮分词查询_elasticsearchrepository分词查询_夜中听雪的博客-CSDN博客</a></p><p>高亮部分代码如下</p><p> &#x2F;&#x2F;带高亮的查询<br>    @Test<br>    public void highlightQuery() throws Exception{<br>        SearchRequest searchRequest &#x3D; new SearchRequest(“discusspost”);&#x2F;&#x2F;discusspost是索引名，就是表名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">highlightQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>      <span class="hljs-type">SearchRequest</span> <span class="hljs-variable">searchRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;discusspost&quot;</span>);<span class="hljs-comment">//discusspost是索引名，就是表名</span><br><br>      <span class="hljs-comment">//高亮</span><br>      <span class="hljs-type">HighlightBuilder</span> <span class="hljs-variable">highlightBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>();<br>      highlightBuilder.field(<span class="hljs-string">&quot;title&quot;</span>);<br>      highlightBuilder.field(<span class="hljs-string">&quot;content&quot;</span>);<br>      highlightBuilder.requireFieldMatch(<span class="hljs-literal">false</span>);<br>      highlightBuilder.preTags(<span class="hljs-string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>);<br>      highlightBuilder.postTags(<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>);<br><br>      <span class="hljs-comment">//构建搜索条件</span><br>      <span class="hljs-type">SearchSourceBuilder</span> <span class="hljs-variable">searchSourceBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchSourceBuilder</span>()<br>              .query(QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;互联网寒冬&quot;</span>, <span class="hljs-string">&quot;title&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>))<br>              .sort(SortBuilders.fieldSort(<span class="hljs-string">&quot;type&quot;</span>).order(SortOrder.DESC))<br>              .sort(SortBuilders.fieldSort(<span class="hljs-string">&quot;score&quot;</span>).order(SortOrder.DESC))<br>              .sort(SortBuilders.fieldSort(<span class="hljs-string">&quot;createTime&quot;</span>).order(SortOrder.DESC))<br>              .from(<span class="hljs-number">0</span>)<span class="hljs-comment">// 指定从哪条开始查询</span><br>              .size(<span class="hljs-number">10</span>)<span class="hljs-comment">// 需要查出的总记录条数</span><br>              .highlighter(highlightBuilder);<span class="hljs-comment">//高亮</span><br><br>      searchRequest.source(searchSourceBuilder);<br>      <span class="hljs-type">SearchResponse</span> <span class="hljs-variable">searchResponse</span> <span class="hljs-operator">=</span> restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);<br><br>      List&lt;DiscussPost&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>      <span class="hljs-keyword">for</span> (SearchHit hit : searchResponse.getHits().getHits()) &#123;<br>          <span class="hljs-type">DiscussPost</span> <span class="hljs-variable">discussPost</span> <span class="hljs-operator">=</span> JSONObject.parseObject(hit.getSourceAsString(), DiscussPost.class);<br><br>          <span class="hljs-comment">// 处理高亮显示的结果</span><br>          <span class="hljs-type">HighlightField</span> <span class="hljs-variable">titleField</span> <span class="hljs-operator">=</span> hit.getHighlightFields().get(<span class="hljs-string">&quot;title&quot;</span>);<br>          <span class="hljs-keyword">if</span> (titleField != <span class="hljs-literal">null</span>) &#123;<br>              discussPost.setTitle(titleField.getFragments()[<span class="hljs-number">0</span>].toString());<br>          &#125;<br>          <span class="hljs-type">HighlightField</span> <span class="hljs-variable">contentField</span> <span class="hljs-operator">=</span> hit.getHighlightFields().get(<span class="hljs-string">&quot;content&quot;</span>);<br>          <span class="hljs-keyword">if</span> (contentField != <span class="hljs-literal">null</span>) &#123;<br>              discussPost.setContent(contentField.getFragments()[<span class="hljs-number">0</span>].toString());<br>          &#125;<br>          System.out.println(discussPost);<br>          list.add(discussPost);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="4-用logstash将Elastic-Search和mysql连接起来"><a href="#4-用logstash将Elastic-Search和mysql连接起来" class="headerlink" title="4. 用logstash将Elastic Search和mysql连接起来"></a>4. 用logstash将Elastic Search和mysql连接起来</h2><h4 id="4-1-下载配置"><a href="#4-1-下载配置" class="headerlink" title="4.1 下载配置"></a>4.1 下载配置</h4><p>当所有配置完成后，代码也可以正常运行了，接口可以正常测试了</p><p>但是发现返回的<strong>什么都没有</strong>，原来是忘记了给es本身添加数据了，毕竟ES和MYSQL可没有连接到一起</p><p>那么如何往Elastic Search当中添加数据呢？</p><p>为了方便，可以使用<strong>logstash</strong>直接和数据库关联起来，logstash可以很方便的获取各个地方的数据源，并且导入到ES当中</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/v2-28dff31022dce1cda36f4983ed44cd12_r.jpg" alt="img"></p><p>下载地址：</p><p><a href="https://www.elastic.co/cn/downloads/logstash">Download Logstash Free | Get Started Now | Elastic</a></p><p>下载教程：</p><p><a href="https://blog.csdn.net/liyongbing1122/article/details/85096187">(152条消息) 安装 ElasticSearch 并连接mysql数据库_elasticsearch怎么和数据库关联_liyongbing1122的博客-CSDN博客</a></p><p>注意教程里面还需要下载一个<strong>mysql的JDBC驱动</strong>,自己去Oracle下载就好了，</p><p>下好后直接将jar包放入<code>下载logstash的路径\logstash-7.17.3\logstash-core\lib\jars</code></p><p>（不过网上好像说也不一定要放这个位置，反正我是放了）</p><p>在logstash的bin目录下新建<code>logstash-mysql.conf</code>配置文件，感觉logstash本身就是面向各种数据源进行配置的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs conf">input &#123;<br>    stdin &#123;<br>    &#125;<br>    #如果需要同步多个表，那么重复配置jdbc&#123;&#125;这一部分，只需要修改表相关的部分<br>    jdbc &#123;<br>      # 数据库  数据库名称为test，表名为users<br>      jdbc_connection_string =&gt; &quot;jdbc:mysql://localhost:3306/refrigerator&quot;<br>      # 用户名密码<br>      jdbc_user =&gt; &quot;root&quot;<br>      jdbc_password =&gt; &quot;root&quot;<br>      # jar包的位置（把jar包直接放到logstash-core/lib/jars下）<br>      jdbc_driver_library =&gt; &quot;D:\RookieCODE\Tools\LogStash\logstash-7.17.3\logstash-core\lib\jars\mysql-connector-j-8.0.33.jar&quot;<br>      # mysql的Driver<br>      jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;<br>      jdbc_paging_enabled =&gt; &quot;true&quot;<br>      jdbc_page_size =&gt; &quot;50000&quot;<br>      #statement_filepath =&gt; &quot;config-mysql/recipe.sql&quot;<br>      #这里的sql效果是：全量同步、增量更新users表。 如果需要全量同步以及更新users表，则select * from users即可。<br>      statement =&gt; &quot;select * from recipe&quot;<br>      #定时字段 各字段含义（由左至右）分、时、天、月、年，全部为*默认含义为每分钟都更新(cron表达式)<br>      schedule =&gt; &quot;* * * * *&quot;<br>        record_last_run =&gt; true<br>        use_column_value =&gt; true<br>        tracking_column =&gt; &quot;LastUpdateDate&quot;<br>        tracking_column_type =&gt; &quot;timestamp&quot;<br>        clean_run =&gt; true<br>        lowercase_column_names =&gt; false<br>      #索引的类型<br>      type =&gt; &quot;_doc&quot;<br>    &#125;<br>&#125;<br> <br>filter &#123;<br>    json &#123;<br>        source =&gt; &quot;message&quot;<br>        remove_field =&gt; [&quot;message&quot;]<br>    &#125;<br>&#125;<br>output &#123;<br>    elasticsearch &#123;<br>        hosts =&gt; &quot;127.0.0.1:9200&quot;<br>        # index名<br>index =&gt; &quot;recipe&quot;<br># 需要关联的数据库中要有一个id字段（最好就是表的主键），对应索引的id号<br>        document_id =&gt; &quot;%&#123;id&#125;&quot;<br>    &#125;<br>    stdout &#123;<br>        codec =&gt; json_lines<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-2-运行"><a href="#4-2-运行" class="headerlink" title="4.2 运行"></a>4.2 运行</h4><p>一开始以为一定要先用这条指令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">./logstash -e &#x27;input &#123; stdin &#123; &#125; &#125; output &#123; stdout &#123;&#125; &#125;&#x27;<br></code></pre></td></tr></table></figure><p>但是这条一直无法运行</p><p>报错类似于 JAVA JDK的问题</p><p>一开始说不支持当前版本，8.0以前的已经弃用，然后要9.0以上的版本</p><p>然后现在又说</p><p>删掉了1.8的Java之后，变成如下报错</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">DEPRECATION: <span class="hljs-title">The</span> <span class="hljs-title">use</span> <span class="hljs-title">of</span> <span class="hljs-title">JAVA_HOME</span> <span class="hljs-title">is</span> <span class="hljs-title">now</span> <span class="hljs-title">deprecated</span> <span class="hljs-title">and</span> <span class="hljs-title">will</span> <span class="hljs-title">be</span> <span class="hljs-title">removed</span> <span class="hljs-title">starting</span> <span class="hljs-title">from</span> 8.0. </span><br></code></pre></td></tr></table></figure><p>接着我使用了logstash捆绑自带的jdk，然后放到环境变量<code>LS_JAVA_HOME</code>还是报错，</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">Using LS_JAVA_HOME <span class="hljs-keyword">defined</span> java: D:\RookieCODE\Tools\LogStash\logstash-<span class="hljs-number">7</span>.<span class="hljs-number">17</span>.<span class="hljs-number">3</span>\jdk<br><span class="hljs-function">WARNING: <span class="hljs-title">Using</span> <span class="hljs-title">LS_JAVA_HOME</span> <span class="hljs-title">while</span> <span class="hljs-title">Logstash</span> <span class="hljs-title">distribution</span> <span class="hljs-title">comes</span> <span class="hljs-title">with</span> <span class="hljs-title">a</span> <span class="hljs-title">bundled</span> <span class="hljs-title">JDK</span>.</span><br><span class="hljs-function"><span class="hljs-title">OpenJDK</span> 64-<span class="hljs-title">Bit</span> <span class="hljs-title">Server</span> <span class="hljs-title">VM</span> <span class="hljs-title">warning</span>: <span class="hljs-title">Option</span> <span class="hljs-title">UseConcMarkSweepGC</span> <span class="hljs-title">was</span> <span class="hljs-title">deprecated</span> <span class="hljs-title">in</span> <span class="hljs-title">version</span> 9.0 <span class="hljs-title">and</span> <span class="hljs-title">will</span> <span class="hljs-title">likely</span> <span class="hljs-title">be</span> <span class="hljs-title">removed</span> <span class="hljs-title">in</span> <span class="hljs-title">a</span> <span class="hljs-title">future</span> <span class="hljs-title">release</span>.</span><br></code></pre></td></tr></table></figure><p>这里那不就是9.0也要弃用吗</p><p>然后其实换了捆绑的jsk之后</p><p>直接用<strong>数据库配置的命令</strong>就成功了</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">logstash -f logstash-mysql.conf<br></code></pre></td></tr></table></figure><p>不过记得要<strong>先启动elasticsearch</strong>，然后再用上面的指令，即可正确导入数据</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230605020120282.png" alt="image-20230605020120282"></p><p>导入成功的话会有数据记录显示在控制台</p><p>如果没有更新那么重新运行程序也不会导入（即使你修改了config文件）</p><p>如果每次更新了数据库就重新在logstash的bin目录cmd下<strong>重新运行</strong>上面的那条配置指令即可</p><h2 id="5-安装-elastic-search-head"><a href="#5-安装-elastic-search-head" class="headerlink" title="5. 安装 elastic search head"></a>5. 安装 elastic search head</h2><p>参考以下文章</p><p><a href="https://blog.csdn.net/wpc2018/article/details/121108389">(156条消息) ELasticSearch——head插件的安装和基本使用_elasticsearch-head_万里顾—程的博客-CSDN博客</a></p><p>记得要去elastic search的配置文件里面设置一下解决<strong>跨域问题</strong></p><hr><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.  总结"></a>6.  总结</h2><p>经过上面的步骤就配置完成了，运行成功后sprinboot的cmd如下</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230605165557542.png" alt="image-20230605165557542"></p><p>使用apifox进行测试</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230605165618265.png" alt="image-20230605165618265"></p><p>其实从零开始的话要配置的东西还是挺多的，也要查挺多文章，但是所幸elasticsearch和它的插件还有相关的工具的下载和安装并不麻烦（解压即可用），使用起来难度还是不高的。</p><p>当时搜了挺多文章的资料的，想着把他们整合到一起，希望能够帮助到需要的小伙伴。</p><blockquote><p>删除整个索引的代码（在git bash当中）</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl  -XPOST -H <span class="hljs-string">&quot;Content-Type: application/json&quot;</span> http://localhost:9200/你的index_name/_delete_by_query?pretty=<span class="hljs-literal">true</span> -d <span class="hljs-string">&#x27;&#123;&quot;query&quot;:&#123;&quot;match_all&quot;: &#123;&#125;&#125;&#125;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>在XPOST后面要加上Content ….定义post的类型，否则默认是<code>www-form-data</code></p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>软工实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Studio实现校园APP（完整步骤）</title>
    <link href="/2023/05/17/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%BC%96%E7%A8%8B/Android%20studio%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%ADAPP/"/>
    <url>/2023/05/17/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%BC%96%E7%A8%8B/Android%20studio%E5%AE%9E%E7%8E%B0%E6%A0%A1%E5%9B%ADAPP/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-studio实现校园APP（完整步骤）"><a href="#Android-studio实现校园APP（完整步骤）" class="headerlink" title="Android studio实现校园APP（完整步骤）"></a>Android studio实现校园APP（完整步骤）</h1><p>[TOC]</p><blockquote><p>开发语言：Java</p><p>开发工具：Android Studio</p><p>用到的一些控件，功能：</p><p>Tablayout，ViewPager（滑动切换菜单功能），Navigation，ToolBar</p><p><strong>需要的外部包</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//新增的四个依赖，用于Tablayout，viewpager，recyclerView布局，以及数据库litepal</span><br>   implementation <span class="hljs-string">&#x27;androidx.legacy:legacy-support-v4:1.0.0&#x27;</span><br>   implementation <span class="hljs-string">&#x27;com.google.android.material:material:1.5.0&#x27;</span><br>   implementation <span class="hljs-string">&#x27;androidx.recyclerview:recyclerview:1.2.1&#x27;</span><br>   implementation <span class="hljs-title function_">files</span><span class="hljs-params">(<span class="hljs-string">&#x27;libs\\litepal-2.0.0-src.jar&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p>注意！！！</p><ol><li><p>这里可能有的人版本是support-v4对应的包</p><p>添加了support-v4的包后发现build.gradle（Gradle Scripts文件夹下）有报错，</p><p>报错内容类似<code>Version 28 (intended for Android Pie and below) is the last version of the legacy support library</code></p><p>这是因为当前的AS已经不支持这些旧的包，因此可以将support-v4迁移到AndroidX，具体方法参考下面的文章或者自行搜索：</p><p><a href="https://blog.csdn.net/lfdfhl/article/details/105269551">(174条消息) Version 28 (intended for Android Pie and below) is the last version of the legacy support library_谷哥的小弟的博客-CSDN博客</a></p></li><li><p>最后一个litepal的引入是本地下载好的依赖</p><p>这里尝试过直接引入<code>implementation &#39;org.litepal.guolindev:core:3.2.0&#39;</code>或者是<code>implementation &#39;org.litepal.android:core:3.2.0&#39;</code></p><p>但是发现在Java，manifest文件当中根本找不到喝这个库相关的内容</p><p>于是就直接到github上面下载jar包并且导入了</p><p>给出下载地址</p><p><a href="https://github.com/guolindev/LitePal#latest-downloads/">https://github.com/guolindev/LitePal#latest-downloads/</a></p></li></ol></blockquote><h2 id="1-效果展示"><a href="#1-效果展示" class="headerlink" title="1. 效果展示"></a>1. 效果展示</h2><blockquote><p>实现功能如下：</p><ul><li>自适应平板和手机的<strong>碎片化</strong>布局（Fragment）</li><li>用户登录（数据持久化）：<strong>数据库文件存储和读取</strong>账号密码</li><li>强制登出（广播机制）</li><li>提示网络中断（广播机制）</li><li>记住密码功能（数据持久化）：使用<strong>SharedPreference</strong></li><li>点击页面打开嵌入式Web内容（使用WebView）以及跳转到<strong>浏览器</strong></li><li>双页模式使用<strong>侧边栏</strong>放置信息条（NavigationVIew）</li><li>右侧单页使用Tab实现切换</li><li>使用RecyclerView实现网格布局（右边碎片网格菜单）</li><li>左边碎片的网格菜单布局GridLayout</li></ul></blockquote><ul><li><p>首先一打开APP的页面就是登录页面。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230517232119(1).png" alt="联想截图_20230517232119(1)"></p><p>可以选中<strong>记住密码</strong>，下次就可以不用输入了</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230517233602(1).png" alt="联想截图_20230517233602(1)"></p><p>平板模式如图所示，自适应到屏幕中间</p></li><li><p>登录后进入到首页，这里给出的平板和手机两种布局，稍有不同</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230517232617(1).png" alt="联想截图_20230517232617(1)"></p><p>这里最上面导航栏左边是<strong>个人信息的侧边栏</strong>，最右边的按钮是<strong>退出登录</strong>的按钮。接着是<strong>网格菜单</strong>，可以点击进入不同的页面</p><p>最下面是可以左右切换或者上下滚动的<strong>学校新闻列表</strong></p><p>点击网格菜单右下角的<code>更多服务</code>的按钮，会展示更多的<strong>网格菜单</strong>内容</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230517233152(1).png" alt="联想截图_20230517233152(1)"></p><p>平板打开的话页面如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230517233423(1).png" alt="联想截图_20230517233423(1)"></p><p>看到这里左边已经没有了网格菜单，只剩下新闻列表的内容</p><p>然后右边列出了刚刚给出的更多新闻的菜单，这里实际上就是将<strong>两个碎片</strong>拼在了一起</p></li><li><p>接着打开侧边栏，展示了部分用户信息以及一些导航栏入口</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230517233637(1).png" alt="联想截图_20230517233637(1)"></p><p>手机的话也是类似的，最下方也有一个用于登出的<strong>注销</strong>按钮</p><p>点击<strong>用户信息</strong>或者用户的<strong>头像</strong>可以进入个人信息页面</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518114857.png" alt="联想截图_20230518114857"></p><p>在用户信息页面当中会展示更多的个人信息</p></li><li><p>尝试点击进入一个菜单的详情页面或者通知，会通过WebView将链接当中的网址内容展现出来</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230517232807(1).png" alt="联想截图_20230517232807(1)"></p><p>如图为手机下打开《计软主页》内容，点击右上角可以选择跳转到浏览器打开该链接</p></li><li><p>最后做了一个<strong>网络中断检测</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518121747.png" alt="联想截图_20230518121747"></p><p>网络中断的时候会有弹窗弹出，但不会强制下线，不过在进入到每一个新的页面的时候，若还是网络中断，则也会弹出该警告</p></li></ul><hr><h2 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2. 具体实现"></a>2. 具体实现</h2><blockquote><p>首先看一下Java类的文件布局</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518125521.png" alt="联想截图_20230518125521"></p><p>主要分成三个部分</p><p>这个BaseActivity是其他所有类的基类，通过该类可以实现任意一个页面强制下线的功能</p><p>功能类大致介绍一下：</p><ul><li>ActivityCollector：用于管理增加或回收所有活动</li><li>DatabaseUtil：对存在assets中的.db数据库文件做读取存储实现</li><li>ForceOffLineReceiver：实现强制下线以及网络状态监听</li><li>NavigationUtil：对侧滑栏的控件绑定数据，视图等进行动态设置</li><li>NewsFragmentPagerAdapter：对viewPager显示通知内容进行适配</li><li>RightGridMenuAdapter：对右侧碎片的RecyclerView内容进行适配</li></ul></blockquote><h3 id="2-1-顶部栏ToolBar以及侧滑栏Navigation"><a href="#2-1-顶部栏ToolBar以及侧滑栏Navigation" class="headerlink" title="2.1 顶部栏ToolBar以及侧滑栏Navigation"></a>2.1 顶部栏ToolBar以及侧滑栏Navigation</h3><blockquote><p>顶部菜单栏：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230518130742345.png" alt="image-20230518130742345"></p><p>侧滑栏：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518130831.png" alt="联想截图_20230518130831"></p><p>xml文件：</p><ul><li>activity_main.xml ：主活动页面</li><li>toolbar_menu：菜单栏图标（右侧的分享和个人页面的logo）</li><li>nav_header,xml ：侧滑栏的头部信息（头像，昵称，联系方式）</li><li>left_drawer.xml：侧滑栏的菜单内容</li></ul><p>Java文件：</p><ul><li>MainActivity</li><li>NavigationUtil</li></ul></blockquote><h4 id="2-1-1-导入导航栏依赖"><a href="#2-1-1-导入导航栏依赖" class="headerlink" title="2.1.1 导入导航栏依赖"></a>2.1.1 导入导航栏依赖</h4><p>导入”NavigationView“的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">implementation &#x27;com.android.support:design:29.0.1&#x27;<br></code></pre></td></tr></table></figure><h4 id="2-1-2-配置toolbar菜单栏布局文件"><a href="#2-1-2-配置toolbar菜单栏布局文件" class="headerlink" title="2.1.2 配置toolbar菜单栏布局文件"></a>2.1.2 配置toolbar菜单栏布局文件</h4><p>关于toolbar的各种设置，可以参考以下文章</p><p><a href="https://blog.csdn.net/qq_42324086/article/details/117390236">(174条消息) Android Toolbar的使用详解_暗恋花香的博客-CSDN博客</a></p><p><strong>设置为NoActionBar</strong>：</p><p>要使用toolbar，首先要去掉系统默认设置的ActionBar</p><p>在AndroidManifest.xml文件当中可以设置活动的主题，我们新建一个NoActionBar的主题，并且给我们需要配置toolBar的页面赋予这个主题即可</p><p><strong>AndroidMenifest.xml</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518131127.png" alt="联想截图_20230518131127"></p><p><strong>themes.xml</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422164201720.png" alt="image-20230422164201720"></p><p>看到最右边设置了noActionBar，这样才可以让toolbar正常显示</p><p><strong>配置toolBar</strong></p><p>需要在<code>activity_main.xml</code>文件当中放入toolBar，因为是在首页主活动放置toolBar</p><p><strong>activity_main.xml部分代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    顶部菜单栏toolBar--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.appcompat.widget.Toolbar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/my_toolbar&quot;</span>                                          <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.ActionBar&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:popupTheme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">......</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><p>除了在活动布局文件中放置toolbar，还需要一个菜单图标文件</p><p><strong>toolbar_menu.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tool_msg&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/share&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orderInCategory</span>=<span class="hljs-string">&quot;80&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;edit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:showAsAction</span>=<span class="hljs-string">&quot;ifRoom|withText&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tool_user&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">..........</span> /&gt;</span><br><span class="hljs-comment">&lt;!--    后面有更多的item如果放不下就会进入菜单栏--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的配置和actionBar的menu绘制方法类似，唯一区别就是<code>app:showAsAction</code>不同，该属性是Toolbar当中很关键的属性</p><p>其中四个不同的值的作用分别如下：</p><p>1）always：这个值会使菜单项一直显示在 ToolBar上。<br>2）ifRoom：如果有足够的空间，这个值会使菜单项显示在 Tool Bar上。<br>3）never：这个值会使菜单项永远都不出现在 ToolBar上。<br>4）withText：这个值会使菜单项和它的图标、菜单文本一起显示。一般和ifRoom一起通过“|”使用<br>app:showAsAction 属性值为 ifRoom|withText，表示如果有空间，那么就连同文字一起显示在标题栏中，否则就显示在菜单栏中。<br>而当app:showAsAction 属性值为 never时，该项作用为Menu不显示在菜单组件中。</p><p>这个文件后面我们会在<strong>activity的Java代码</strong>当中写入并且连接上</p><p><strong>MainActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">myToolbar.inflateMenu(R.menu.toolbar_menu);<br></code></pre></td></tr></table></figure><h4 id="2-1-3-配置侧滑栏xml文件"><a href="#2-1-3-配置侧滑栏xml文件" class="headerlink" title="2.1.3 配置侧滑栏xml文件"></a>2.1.3 配置侧滑栏xml文件</h4><p>添加NavigationView组件</p><p>（要使用该组件需要从外部导入design包，在前面有提到导入的具体的包）</p><p>将该组件添加到toolbar所在的活动的页面当中，这里就是activity_main.xml</p><p><strong>activity_main.xml部分代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">...............</span>&gt;</span><br><br>    --------<br>    这里是该页面的其他布局文件，可以将整个布局文件代码放进去也是可以的<br>    <br>    --------<br>    <br><span class="hljs-comment">&lt;!--左侧导航菜单--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.navigation.NavigationView</span></span><br><span class="hljs-tag"><span class="hljs-attr">..............</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;start&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/colorPrimary&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:headerLayout</span>=<span class="hljs-string">&quot;@layout/nav_header&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:menu</span>=<span class="hljs-string">&quot;@menu/left_drawer&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个菜单栏由于是侧滑出现的，所以放在整个布局的最外面，并且需要用<code>DrawerLayout</code>包裹</p><p>注意看下面两个app的属性<code>app:headerLayout</code>和<code>app:menu</code></p><p>因此这里需要新建两个文件，一个是头部的代码，一个是下面的菜单的部分</p><p><strong>nav_header.xml</strong></p><p>代码以及预览如图</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518132647.png" alt="联想截图_20230518132647"></p><p>看下左边，这里用了帧布局的方法嵌套一个<code>ImageView</code>和<code>RelativeLayout</code>，ImageView这样就可以作为背景图片，使得导航栏头部更加美观</p><p><strong>left_drawer.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;.......&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/navigation_item_user&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/navigation_item_setting&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/navigation_item_about&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/navigation_item_logout&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个是菜单栏的页面，预览的效果和最终实现的效果是<strong>有差异的</strong>，不需要以预览的那个效果为准。</p><p>将nav_header和left_drawer结合之后，效果图片在上面有显示。</p><h4 id="2-1-4-Java逻辑代码实现"><a href="#2-1-4-Java逻辑代码实现" class="headerlink" title="2.1.4 Java逻辑代码实现"></a>2.1.4 Java逻辑代码实现</h4><p>ToolBar的初始化代码都在<strong>MainActivity</strong>当中。</p><p>侧滑栏的代码为了减少MainActivity的冗余，将其单独分离出了一个功能类NavigationUtil</p><p>程序入口在onCreate当中实现</p><p><strong>MainActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br>    <span class="hljs-comment">//设置顶部菜单栏的按钮，监听事件等</span><br>    initToolBarView();<br>    <span class="hljs-type">NavigationUtil</span> <span class="hljs-variable">navigationUtil</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NavigationUtil</span>(<span class="hljs-built_in">this</span>,myToolbar,drawerLayout);<br>    navigationUtil.initMainNavigation();<br>&#125;<br></code></pre></td></tr></table></figure><p>先调用<code>initToolBarView（）</code>进行初始化</p><p>接着new一个新的Util类，并且将需要用到的控件传参进去，调用<code>initMainNavigation（）</code></p><p>这里稍微说一下NavigationView的设置的时候一些注意事项</p><ul><li><p>nav_header无法直接被<code>activity.findViewById()</code>找到</p><p>由于该控件不是在<strong>activity_main.xml</strong>当中，只是被引用了</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518134252.png" alt="联想截图_20230518134252"></p><p>所以无法直接找到，因此要用如下代码获得</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">        <br><span class="hljs-type">NavigationView</span> <span class="hljs-variable">mNavigationView</span> <span class="hljs-operator">=</span> activity.findViewById(R.id.nav_view);<br><span class="hljs-type">View</span> <span class="hljs-variable">headerView</span> <span class="hljs-operator">=</span> mNavigationView.getHeaderView(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>也就是先获得NavigationView，再获取它当中的<strong>headerVIew</strong></p></li><li><p>用户的信息展现是动态的，这里的数据是存储在<strong>数据库</strong>当中的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">nickName.setText(LoginActivity.userInfo.getNickname());<br>grade.setText(LoginActivity.userInfo.getGrade());<br>major.setText(LoginActivity.userInfo.getMajor());<br></code></pre></td></tr></table></figure><p>如上，信息都存储在来自登录活动当中的静态成员变量userInfo，后面会有介绍登录的实现</p><p>不同的用户登录，显示的信息是不一样的</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518150801.png" alt="联想截图_20230518150801"></p></li></ul><h4 id="2-1-5-个人信息页面"><a href="#2-1-5-个人信息页面" class="headerlink" title="2.1 5 个人信息页面"></a>2.1 5 个人信息页面</h4><p>最后这里简单地介绍一下个人页面的信息。</p><p>可以点击侧滑栏的头像或者《用户信息》都可以跳转到该页面。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518114857(1).png" alt="联想截图_20230518114857(1)"></p><p>这里放出的是平板的界面，和手机是完全一样的，</p><p>只是平板会拉伸，但是信息内容都是左右放置，所以不会有区别</p><hr><h3 id="2-2平板手机适配（Fragment）"><a href="#2-2平板手机适配（Fragment）" class="headerlink" title="2. 2平板手机适配（Fragment）"></a>2. 2平板手机适配（Fragment）</h3><p>为了实现手机的平板的适配，就需要用到一个非常强大的功能Fragment了，它被称为安卓的第五大组件，</p><p>可以实现类似于Activity的效果，同时有具有极为灵活的特性</p><p>看一下<strong>activity_main</strong>文件</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230518153955863.png" alt="image-20230518153955863"></p><p>首先这里有两个文件，带有(sw600dp)的是存放在<strong>layout-sw600dp</strong>的文件夹当中</p><p>这样当屏幕比较大的时候，就会自动加载（sw600dp）的activity_main文件了</p><p>activity_main (sw600dp)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">.........</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span> <span class="hljs-attr">.......</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--顶部工具栏--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">androidx.appcompat.widget.Toolbar</span>   <span class="hljs-attr">.......</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span> <span class="hljs-attr">............</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout.........</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--左边碎片--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fragment</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/main_left_fragment&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.myschool.fragment.MainLeftFragment&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;3&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">tools:layout</span>=<span class="hljs-string">&quot;@layout/fragment_main_left&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">tools:ignore</span>=<span class="hljs-string">&quot;MissingConstraints&quot;</span> /&gt;</span><br>            <span class="hljs-comment">&lt;!--右边碎片--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fragment</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/right_frag&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.myschool.fragment.MainRightFragment&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;2&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">tools:layout</span>=<span class="hljs-string">&quot;@layout/fragment_main_right&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">tools:ignore</span>=<span class="hljs-string">&quot;MissingConstraints&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--左侧导航菜单--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.navigation.NavigationView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">......</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里省略了其他的内容，着重于看两个fragment，这里的<strong>layout_weight</strong>的大小不同，说明它们占据的布局位置也不同。</p><p>而在适配手机的activity_main当中，就不需要后面的那个fragment的碎片。</p><h3 id="2-3-左侧碎片-（MainLeftFragment）"><a href="#2-3-左侧碎片-（MainLeftFragment）" class="headerlink" title="2.3 左侧碎片 （MainLeftFragment）"></a>2.3 左侧碎片 （MainLeftFragment）</h3><p>对控件的初始化代码都放在该Fragment类的<code>onCreateView（）</code>当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="hljs-params">                         Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-comment">//获取碎片视图</span><br>    view = inflater.inflate(R.layout.fragment_main_left, container, <span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">//设置首页工具栏内容以及样式</span><br>    <span class="hljs-comment">//初始化上方的网格菜单</span><br>    initGridMenu();<br>    <span class="hljs-comment">//将页面绑定viewPager，进行设置</span><br>    initViewPager();<br>    <span class="hljs-comment">//初始化layout的设置，例如图标，定位</span><br>    initTabLayoutView();<br>    <span class="hljs-keyword">return</span> view;<br></code></pre></td></tr></table></figure><h4 id="2-3-1-网格菜单（GridLayout）"><a href="#2-3-1-网格菜单（GridLayout）" class="headerlink" title="2.3.1 网格菜单（GridLayout）"></a>2.3.1 网格菜单（GridLayout）</h4><p>网格菜单使用了gridLayout，并且在里面 放置了多个图片的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">GridLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:columnCount</span>=<span class="hljs-string">&quot;4&quot;</span>   <span class="hljs-attr">设置它的最大列</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:rowCount</span>=<span class="hljs-string">&quot;2&quot;</span>    <span class="hljs-attr">设置最大行</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br></code></pre></td></tr></table></figure><p>实现效果如图</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518155931.png" alt="联想截图_20230518155931"></p><h4 id="2-3-2-通知列表（TabLayout-ViewPager-Fragment）"><a href="#2-3-2-通知列表（TabLayout-ViewPager-Fragment）" class="headerlink" title="2.3.2 通知列表（TabLayout + ViewPager + Fragment）"></a>2.3.2 通知列表（TabLayout + ViewPager + Fragment）</h4><blockquote><p>通知列表使用了上述三样东西结合</p><p>TabLayout：提供选项切换到不同的菜单</p><p>ViewPager：用于滑动切换到不同的菜单</p><p>Fragment：每个菜单显示的页面内容</p><p><strong>实现效果</strong>：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518160221.png" alt="联想截图_20230518160221"></p><p><strong>涉及配置xml文件</strong>：</p><ul><li>fragment_main_left.xml （左侧碎片布局）</li><li>main_grid_menu.xml （网格菜单）</li><li>selected.xml （选中菜单的颜色设置）</li><li>themes.xml  （设置菜单的文件大小）</li></ul><p><strong>Java代码文件</strong>：</p><ul><li>MainLeftFragment （整体左侧碎片）</li><li>NewsFragmentPagerAdapter（用于切换列表的适配器）</li><li>NotificationFragment（通知列表碎片）</li></ul></blockquote><h5 id="界面配置文件"><a href="#界面配置文件" class="headerlink" title="界面配置文件"></a>界面配置文件</h5><p>给出整体的左侧碎片简略xml代码</p><p><strong>fragment_main_left.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">.................</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--顶部网格菜单--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">layout</span>=<span class="hljs-string">&quot;@layout/main_grid_menu&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!--顶部导航栏，切换选项卡--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.tabs.TabLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabBackground</span>=<span class="hljs-string">&quot;@drawable/selected&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabTextAppearance</span>=<span class="hljs-string">&quot;@style/MyTabLayoutTextAppearance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">................</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--用于实现左右滑动效果--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.viewpager.widget.ViewPager</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/viewPager&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">.........</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/more_page_bt&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>中间的两个<code>ViewPager</code>和<code>TabLayout</code>就是我们用来实现通知列表的控件</p><p>初始化这几个控件的方法，具体源码去查看仓库代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将页面绑定viewPager，进行设置</span><br>initViewPager();<br><span class="hljs-comment">//初始化layout的设置，例如图标，定位</span><br>initTabLayoutView();<br></code></pre></td></tr></table></figure><p>每个通知List的文章布局：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230518171636001.png" alt="image-20230518171636001"></p><p>对应的数据库内容：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230518171829841.png" alt="image-20230518171829841"></p><p>这里最右侧的”标签“是用于显示不同tab下的文章内容</p><p>获取通知列表数据的方法如下</p><p><strong>NotifictaionFragment.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//根据label标签条件查询处相应的文章</span><br>    mList = LitePal.where(<span class="hljs-string">&quot;label = ?&quot;</span>,label).find(Notification.class);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据where方法获取对应label下的内容，这样就可以将全部通知信息放在<strong>一张表</strong>下面</p><p><strong>注意事项！：</strong></p><p><strong>其他xml文件的添加</strong></p><p>这里说几个tablayout和viewPager要导入的一些其他的简短的xml文件</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230423002236907.png" alt="image-20230423002236907"></p><p>在<code>themes.xml</code>（或styles.xml）文件当中要添加<code>style name = MyTabLayoutTextAppearance</code>的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    TabLayout的文本大小--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MyTabLayoutTextAppearance&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;TextAppearance.AppCompat.Widget.ActionBar.Title&quot;</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:textSize&quot;</span>&gt;</span>18sp<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:textColor&quot;</span>&gt;</span>@color/white<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还有在drawable文件下的 <code>selected.xml</code>，用于展示被选中下菜单的颜色</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_selected</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@color/TabBackGround&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@color/colorAccent&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-文章详情页面（WebView）"><a href="#2-4-文章详情页面（WebView）" class="headerlink" title="2.4 文章详情页面（WebView）"></a>2.4 文章详情页面（WebView）</h3><blockquote><p><strong>xml文件</strong>：</p><p>activity_news_article_content.xml</p><p><strong>java文件</strong>：</p><p>NewsArticleContentActivity</p></blockquote><p><strong>xml文件内容</strong>：</p><p><strong>activity_news_article_content.xml</strong></p><p>这里就用线性布局放置了一个WebView，比较简单</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">WebView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/news_webView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个比较简单，文章或者是菜单什么点击后都会触发事件并且跳转到这个活动，</p><p>跳转过来的时候往往会带有一个标题和一个链接url，然后就可以用xml文件里面的WebView显示出来</p><p>例如在左侧碎片最下面的一个图标可以跳转到公文通</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230518162233.png" alt="联想截图_20230518162233"></p><h3 id="2-5-登录界面"><a href="#2-5-登录界面" class="headerlink" title="2.5 登录界面"></a>2.5 登录界面</h3><p>上面讲的很多内容都是上一个实验的，而登录界面则涉及到了新的知识，广播机制以及数据持久化存储</p><blockquote><p><strong>xml文件</strong>：</p><p>activity_login.xml</p><p><strong>登录账号</strong>：</p><p>账号：2020111051  密码：8888</p><p>账号：admin 密码：1111</p><p><strong>java 相关文件</strong>：</p><ul><li>LoginActivity</li><li>BaseActivity</li></ul><p><strong>登录界面</strong>：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230517233602(1).png" alt="联想截图_20230517233602(1)"></p></blockquote><p>这里的布局文件只有一个，就不详细介绍了</p><p>只说一下用了哪些不太常见的控件</p><ul><li>editText：输入框，可通过<code>android:theme</code>设置颜色风格</li><li>CheckBox：勾选框</li></ul><h4 id="2-5-1-用户信息校对"><a href="#2-5-1-用户信息校对" class="headerlink" title="2.5.1  用户信息校对"></a>2.5.1  用户信息校对</h4><p>从<strong>数据库</strong>当中获取用户的所有信息，和当前输入框的信息进行校对</p><p><strong>LoginActivity</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> accountEdit.getText().toString();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> passwordEdit.getText().toString();<br>    <span class="hljs-comment">//如果账号是admin且密码是123456,就认为登录成功</span><br>    userInfoList = LitePal.findAll(UserInfo.class);<span class="hljs-comment">//获取密码数据库信息</span><br>    <span class="hljs-keyword">for</span>(UserInfo info : userInfoList)&#123;<br>        <br>        <span class="hljs-keyword">if</span>(info.getAdmin().equals(account.trim()) &amp;&amp; info.getPassword().equals(password.trim()))<br>        &#123; <br>            <span class="hljs-comment">//密码正确后的逻辑代码</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>看到上面的代码通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">userInfoList = LitePal.findAll(UserInfo.class);<span class="hljs-comment">//获取密码数据库信息</span><br><br></code></pre></td></tr></table></figure><p>这一行来获取数据库中该表的所有数据</p><p>该表的内容如下</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230518171531080.png" alt="image-20230518171531080"></p><h4 id="2-5-2-记录用户数据（SharedPreference）"><a href="#2-5-2-记录用户数据（SharedPreference）" class="headerlink" title="2.5.2 记录用户数据（SharedPreference）"></a>2.5.2 记录用户数据（SharedPreference）</h4><p>为了让用户登录更加方便，在登录页面当中，<strong>记住密码</strong>这个功能是必不可少的</p><p>而用SharedPreference可以很方便地实现这个功能</p><p>代码也很简单，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">SharedPreferences pref;<br>SharedPreferences.<span class="hljs-type">Editor</span> <span class="hljs-variable">editor</span> <span class="hljs-operator">=</span> pref.edit();<br><span class="hljs-keyword">if</span>(rememberPass.isChecked())&#123; <span class="hljs-comment">//检查是否勾选了记住密码</span><br>    <span class="hljs-comment">//使用Editor来添加数据存储</span><br>    editor.putBoolean(<span class="hljs-string">&quot;remember_password&quot;</span>,<span class="hljs-literal">true</span>);<br>    editor.putString(<span class="hljs-string">&quot;account&quot;</span>,account);<br>    editor.putString(<span class="hljs-string">&quot;password&quot;</span>,password);<br>&#125;<br><span class="hljs-keyword">else</span> editor.clear();<br></code></pre></td></tr></table></figure><p>上图也就十行代码，只需要直接调用SharedPreference的库提供的内容</p><p>在检测到用户勾选了”记住密码“之后，就将数据都put到editor当中，这样就已经将用户的信息存在本地了，它的具体文件位置可以上网搜索</p><p>下次再次进入到LoginActivity的时候，就可以直接调用存在SharedPreference的数据了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">pref = PreferenceManager.getDefaultSharedPreferences(<span class="hljs-built_in">this</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isRemember</span> <span class="hljs-operator">=</span> pref.getBoolean(<span class="hljs-string">&quot;remember_password&quot;</span>,<span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span>(isRemember)&#123;<br>    <span class="hljs-comment">//将记住的内容直接设置上去</span><br>    accountEdit.setText(pref.getString(<span class="hljs-string">&quot;account&quot;</span>,<span class="hljs-string">&quot;&quot;</span>));<br>    passwordEdit.setText(pref.getString(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;&quot;</span>));<br>    rememberPass.setChecked(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6-数据库实现-（LitePal）"><a href="#2-6-数据库实现-（LitePal）" class="headerlink" title="2.6 数据库实现 （LitePal）"></a>2.6 数据库实现 （LitePal）</h3><blockquote><p><strong>相关配置文件</strong>：</p><ul><li>litepal.xml</li><li>AndroidManifest.xml</li><li>SchioolDemo.db</li><li>build.gradle</li></ul><p><strong>相关Java文件</strong>：</p><p>DatabaseUtil.java</p></blockquote><h4 id="2-6-1-导入依赖以及配置"><a href="#2-6-1-导入依赖以及配置" class="headerlink" title="2.6.1 导入依赖以及配置"></a>2.6.1 导入依赖以及配置</h4><p>这里我学习了《第一行代码》当中给出的LitePal的库的使用并且进行了导入</p><p>不过这里用给出的导入方法或者网上的都不行，于是只能到github直接将<strong>Jar包</strong>下载下来了。</p><p><strong>配置数据库方法</strong></p><p>这里书上也有教程，这里就简单介绍一下</p><ul><li><p>导入依赖</p><p>在build.gradle（Module.app）当中导入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">implementation <span class="hljs-title function_">files</span><span class="hljs-params">(<span class="hljs-string">&#x27;libs\\litepal-2.0.0-src.jar&#x27;</span>)</span><br></code></pre></td></tr></table></figure></li><li><p>在main当中新建assets文件夹，并新建一个litepal.xml</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230518173736578.png" alt="image-20230518173736578"></p><p>该文件用于配置数据库和Java当中的类的关系映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">litepal</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dbname</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;SchoolDemo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dbname</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.myschool.schobject.Notification&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.myschool.schobject.UserInfo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.myschool.schobject.Card&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">litepal</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>dbname：数据库名字为”SchoolDemo“，然后一共有三个数据表，</p></li><li><p>version ：value就是数据表的个数</p></li><li><p>list：对应每一个Java当中的类的一个映射</p></li></ul></li><li><p>在<code>AndroidManifest.xml</code>当中配置一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;org.litepal.LitePalApplication&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">.......</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>配置成功后，可以通过android studio自带的<strong>Device File Explorer</strong>来查找虚拟机当中的文件</p><p>它在虚拟机文件当中的路径为<code>data/data/com.example.mewsapppage/databases</code></p><p>不过这个路径在本机电脑当中是不实际存在的，也就是说你无法在<strong>虚拟机关机</strong>的情况下去<strong>修改这个文件</strong>.</p><h4 id="2-6-2-存储提前准备好的数据文件"><a href="#2-6-2-存储提前准备好的数据文件" class="headerlink" title="2.6.2 存储提前准备好的数据文件"></a>2.6.2 存储提前准备好的数据文件</h4><p>由于考虑到每次到一台新的机器上面，都会创建一个新的数据库db，因为它是不存在本地的，因此我们要去读取它的文件</p><p>为了避免在Java当中还要手动写代码去导入数据到数据库当中，而且数据也不方便修改</p><p>于是可以采用将<strong>存在安卓资源文件中的db数据库</strong> 写入 到android手机存储db数据库的位置当中，这样就实现了文件的覆盖，可以使用预先写好数据的数据库了！</p><p>这就涉及到文件的读写操作了，我们将数据库文件存放在assets目录下面</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230518175126413.png" alt="image-20230518175126413"></p><p>名字也要和我们要生成的安卓手机上的数据库<strong>文件名字一致</strong>，接着编写代码进行IO操作</p><p><strong>DatabaseUtil.java</strong></p><p>首先在Java当中获取存取的路径名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// com.example.myschool 是程序的包名，请根据自己的程序调整</span><br><span class="hljs-comment">// /data/data/com.example.myschool/databases目录是准备放 SQLite 数据库的地方，也是 Android 程序默认的数据库存储目录</span><br><span class="hljs-comment">// 数据库名为 SchoolDemo.db</span><br><span class="hljs-type">String</span> <span class="hljs-variable">DB_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/data/data/&quot;</span> + context.getPackageName() +<span class="hljs-string">&quot;/databases/&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">DB_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SchoolDemo.db&quot;</span>;<br></code></pre></td></tr></table></figure><p>接着使用<code>InputStream</code> 和<code>FileOutputStream</code>类来分别进行<strong>字节流</strong>的输入输出操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 得到 assets 目录下我们实现准备好的 SQLite 数据库作为输入流</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> context.getAssets().open(DB_NAME);<br><span class="hljs-comment">// 输出流,在指定路径下生成db文件</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(DB_PATH + DB_NAME);<br><span class="hljs-comment">// 文件写入</span><br><span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> length;<br><span class="hljs-keyword">while</span> ((length = is.read(buffer)) &gt; <span class="hljs-number">0</span>) <br>    os.write(buffer, <span class="hljs-number">0</span>, length);<br><span class="hljs-comment">// 关闭文件流</span><br>os.flush();<br>os.close();<br>is.close();<br></code></pre></td></tr></table></figure><p>代码也比较简单，这样我们就实现了文件的写入覆盖，就可以在<strong>本地编辑好数据库</strong>之后，直接将数据库跑在安卓的机器上啦</p><h3 id="2-7-强制下线以及网络监听（广播机制）"><a href="#2-7-强制下线以及网络监听（广播机制）" class="headerlink" title="2.7 强制下线以及网络监听（广播机制）"></a>2.7 强制下线以及网络监听（广播机制）</h3><blockquote><p><strong>涉及Java代码</strong>：</p><ul><li>ForceOfflineReceiver.java</li><li>BaseActivity.java</li><li>ActivityCollector.java</li></ul><p>相关配置文件：</p><p>无直接相关的，只需要调用上面的Java类代码即可自动触发功能</p></blockquote><h4 id="2-7-1-注册广播器："><a href="#2-7-1-注册广播器：" class="headerlink" title="2.7.1 注册广播器："></a>2.7.1 注册广播器：</h4><p>首先要对广播器Receiver进行<strong>注册</strong></p><p>在BaseActivity当中进行注册，然后所有有需求执行登出操作的界面都可以继承这个类作为基类，这样就会统一收到广播了</p><p>注册的代码如下：</p><p><strong>BaseActivity：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//动态注册广播器</span><br>    <span class="hljs-built_in">super</span>.onResume();<br>    <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">filter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>    <span class="hljs-comment">//增加需要监听的内容</span><br>    filter.addAction(<span class="hljs-string">&quot;com.example.myschool.FORCE_OFFLINE&quot;</span>); <span class="hljs-comment">//监听强制下线广播</span><br>    filter.addAction(<span class="hljs-string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>); <span class="hljs-comment">//监听网络连接广播</span><br>    forceOffLineReceiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForceOffLineReceiver</span>();<br>    <span class="hljs-comment">//注册监听，这样ForceOfflineReceiver就可以接收到所有FORCE——OFFLINE的广播</span><br>    registerReceiver(forceOffLineReceiver,filter);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onPause();<br>    <span class="hljs-keyword">if</span>(forceOffLineReceiver != <span class="hljs-literal">null</span>)<br>        unregisterReceiver(forceOffLineReceiver); <span class="hljs-comment">//最后取消注册</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里增加了两条需要监听的内容，分别是强制下线广播和网络链接广播，这样就很容易地实现了注册</p><p>最后不要忘了在onPause或者onDestroy的时候进行取消注册，不然可能会引发一些后果。</p><h4 id="2-7-2-实现监听触发事件"><a href="#2-7-2-实现监听触发事件" class="headerlink" title="2.7.2 实现监听触发事件"></a>2.7.2 实现监听触发事件</h4><p>接下来就是要到ForceOffLineReceiver这个类当中去实现具体的<strong>监听触发</strong>事件了。</p><p>具体类实现：</p><p><strong>ForceOffLineReceiver</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForceOffLineReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-comment">//该监听器包括了网络监听何强制下线监听</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        AlertDialog.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlertDialog</span>.Builder(context);<span class="hljs-comment">//构建对话框</span><br>        builder.setTitle(<span class="hljs-string">&quot;警告&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">action</span> <span class="hljs-operator">=</span> intent.getAction();<br>        <span class="hljs-keyword">if</span> (action.equals(<span class="hljs-string">&quot;com.example.myschool.FORCE_OFFLINE&quot;</span>)) &#123;<br>            <span class="hljs-comment">// Handle the FORCE_OFFLINE broadcast</span><br>            <br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (action.equals(<span class="hljs-string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>)) &#123;<br>            <span class="hljs-comment">// Handle the CONNECTIVITY_CHANGE broadcast</span><br>            <br>        &#125;<br>        builder.show();<span class="hljs-comment">//令该对话框可视化</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>首先该监听器要继承<code>BroadcastReceiver</code>，然后去重载它的<code>onReceive（）</code>方法，</p><p>该方法在收到之前添加的监听事件之后就会触发，我们需要做一个if判断它是哪个类型的事件触发了即可</p><h2 id="3-实验总结"><a href="#3-实验总结" class="headerlink" title="3. 实验总结"></a>3. 实验总结</h2><h3 id="3-1-APP亮点"><a href="#3-1-APP亮点" class="headerlink" title="3.1 APP亮点"></a>3.1 APP亮点</h3><p>这里列出该APP设计的一些认为比较突出的地方：</p><ul><li>使用SharedPreference实现记住密码</li><li>使用安卓的库LitePel实现数据库的账号密码的存取</li><li>用户信息从数据库中提取，不同的用户动态展现不同的信息</li><li>使用放在assets文件中已经写好的数据库，可手动编辑</li><li>碎片化实现平板与手机的适配</li><li>使用gridLayout网格绘制菜单（与下面对比两种不同的方式）</li><li>recyclerView实现网格菜单</li></ul><h3 id="3-2-遇到过的问题"><a href="#3-2-遇到过的问题" class="headerlink" title="3.2. 遇到过的问题"></a>3.2. 遇到过的问题</h3><ul><li><p>数据库无法在新的机器上存储，需要在代码添加进去</p><p>解决方法：</p><p>在本地做好一个数据库文件，然后通过文件字节流读写的方式写入到安卓模拟器上的位置</p></li><li><p>ImageView无法通过elevation设置阴影</p><p>使用CardView包裹实现阴影效果</p></li></ul><h3 id="3-3-感想心得"><a href="#3-3-感想心得" class="headerlink" title="3.3 感想心得"></a>3.3 感想心得</h3><p>本次实验给我的第一感觉就是内容比上次要多了更多，需要做的东西有诸如数据库，广播等等，这也是因为我们学到了更加多的新知识，因此也需要在实验中应用上相关的知识。</p><p>虽然这次的内容比较多吧，但是感觉没有上次做起来这么难了，因为上次的是第一次去认真地完成一个APP，从零开始，而这次不仅已经有了上一次实验的经验，有些代码框架和内容也可以沿用上一次的，并且基于上一次做的不足的地方做更好地调整，例如这次我对侧边栏进行了更多地美化，加上了背景图片的嵌入，还有设计了个人信息界面，可以通过侧边栏找到入口进入。另外在页面碎片当中也进行了代码的优化和简化。</p><p>当然这一次收获最大的还是数据持久化的学习还有广播机制的应用，使用广播机制就可以实现几乎所有APP都会具有的一个功能，就是登录，而为了存储用户的数据，自然也就需要结合数据持久化的存储，而这次直接学习了数据库的使用，因此在ListView显示每一条文章的数据的时候再也不需要在Java当中手动写入这些数据了，而是可以直接放在数据库db文件当中，而这里用的是安卓提供的SQLite数据库，不仅可以存储用户数据，也可以存储文章数据等等。</p><p>不过在学习的同时也越来越发现自己还有很多不会的地方，现在做的实际上对于社会上的安卓工程师，这些只是很简单的东西，例如数据库应该会有更好地方法进行操作，可以利用后台写接口的方式更好地对数据进行处理，总之，仍有很多的地方需要学习。</p><h3 id="可以改进或者扩展的地方（删掉）"><a href="#可以改进或者扩展的地方（删掉）" class="headerlink" title="可以改进或者扩展的地方（删掉）"></a>可以改进或者扩展的地方（删掉）</h3><ol><li>图片没有真正存进数据库里面，以后看看可能可以用Bitmap存储</li><li>控件的阴影设置有自定义的方法，也可以用别人的库，还可以用什么<code>点9图</code></li><li>数据库以后应该可以采用后台开发的方式，看看能不能用springboot开发</li><li>平板正放侧放切屏的时候会闪退</li><li>数据库的db文件是否可以一直存在软件当中，还是到新的机器上就会被清除</li></ol>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>移动互联网编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓学习笔记01</title>
    <link href="/2023/05/10/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%BC%96%E7%A8%8B/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/"/>
    <url>/2023/05/10/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%BC%96%E7%A8%8B/%E5%AE%89%E5%8D%93%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001/</url>
    
    <content type="html"><![CDATA[<h1 id="安卓学习笔记01"><a href="#安卓学习笔记01" class="headerlink" title="安卓学习笔记01"></a>安卓学习笔记01</h1><blockquote><p>旨在记录一些平时做项目的时候会遇到的一些问题，</p><p>或者是比较值得记录的一些知识点</p></blockquote><h3 id="一些烦人的小问题"><a href="#一些烦人的小问题" class="headerlink" title="一些烦人的小问题"></a>一些烦人的小问题</h3><ul><li><p>进入的时候项目报错：大致是缺少这个版本的Gradle，比如说什么gradle 7.4.2 .。。 </p><p>这个时候需要在gradle当中换个Java版本</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230510215245920.png" alt="image-20230510215245920"></p></li><li><p>创建了新的layout文件后，<code>R.layout.xxx</code>爆红找不到</p><p>发现其他的layout文件正常，没有什么问题，那就重启吧</p></li><li></li></ul><h3 id="数据库上手："><a href="#数据库上手：" class="headerlink" title="数据库上手："></a>数据库上手：</h3><h4 id="1-安装litepal库（参考《第一行代码》中的教程）"><a href="#1-安装litepal库（参考《第一行代码》中的教程）" class="headerlink" title="1. 安装litepal库（参考《第一行代码》中的教程）"></a>1. 安装litepal库（参考《第一行代码》中的教程）</h4><blockquote><p>这里主要说下遇到的一些问题</p></blockquote><p><strong>注意：manifest文件中<code>android:name=&quot;org.litepal.LitePalApplication&quot;</code>爆红的问题</strong></p><p>​一开始尝试添加包名：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">implementation <span class="hljs-string">&#x27;org.litepal.guolindev:core:3.2.0&#x27;</span><br></code></pre></td></tr></table></figure><p>结果是不行的，尝试了很久，项目里面根本就找不到litepal这个包，并且在Java里面输入相关的类或者方法都没有</p><p>解决方法是直接下载LitePal的jar包，并且放到app&#x2F;libs下直接导入使用</p><p><a href="https://github.com/guolindev/LitePal#latest-downloads/">github下载地址</a></p><p>找到里面的<strong>download</strong>文件下的需要的版本的jar包，一般是<code>litepal-1.1.0-src.jar</code>这样的名字，直接放到项目的app&#x2F;libs当中</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230513100512061.png" alt="image-20230513100512061"></p><p>导入成功后，解决爆红问题</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230513111546.png" alt="联想截图_20230513111546"></p><h4 id="2-使用adb-shell进行数据库调试"><a href="#2-使用adb-shell进行数据库调试" class="headerlink" title="2. 使用adb shell进行数据库调试"></a>2. 使用adb shell进行数据库调试</h4><p>找到SDK下的adb文件所在位置<code>\AndroidSDK\platform-tools</code>，可以放入系统变量，方便访问。</p><p>这里可能会有<strong>Permission Denied</strong>的提示。</p><p>可以输入su指令，提高权限</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230513105810582.png" alt="image-20230513105810582"></p><p>如果su指令不行或者不存在， 模拟器那里不要使用Google play的，使用Google API的</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230513105810582.png"></p><p>成功进入后，进入该包下的database，查看到有database.db类似后缀的文件</p><p>进入sqlite模式</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230513114334687.png" alt="image-20230513114334687"></p><h4 id="3-找到数据库位置（找到sqlite的db文件）"><a href="#3-找到数据库位置（找到sqlite的db文件）" class="headerlink" title="3. 找到数据库位置（找到sqlite的db文件）"></a>3. 找到数据库位置（找到sqlite的db文件）</h4><p>先在android studio当中找到File explorer，注意要先<strong>开启模拟器</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230513122254634.png" alt="image-20230513122254634"></p><p>然后找到 <code>data/data/com.example.mewsapppage/databases</code>在这里就可以找到数据库db后缀的文件。</p><p>可以在其他软件处打开该文件，或者使用android studio中扩展plugin处下载的<strong>database navigator</strong>也是可以的。</p><p>该文件绝对路径右键save as即可找到</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230513122453.png" alt="联想截图_20230513122453"></p><h4 id="4-从外部导入数据库db文件"><a href="#4-从外部导入数据库db文件" class="headerlink" title="4. 从外部导入数据库db文件"></a>4. 从外部导入数据库db文件</h4><p>可参考以下文章</p><p><a href="https://www.jianshu.com/p/c745e69c2521">Android 使用外部db数据库文件 - 简书 (jianshu.com)</a></p><p>然后根据自己的需求稍微改一下里面的代码。</p><p>如果是用Litepal配置就更简单了，litepal配置好之后，直接调用函数即可。</p><p>函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.newsapppage;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStream;<br><br><span class="hljs-keyword">import</span> android.annotation.SuppressLint;<br><span class="hljs-keyword">import</span> android.content.Context;<br><span class="hljs-keyword">import</span> android.util.Log;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 将assets中的db文件拷贝到databases中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseUtil</span> &#123;<br><br>    <span class="hljs-meta">@SuppressLint(&quot;SdCardPath&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">packDataBase</span><span class="hljs-params">(Context context)</span>&#123;<br>        <span class="hljs-comment">// com.kinth.youdian 是程序的包名，请根据自己的程序调整</span><br>        <span class="hljs-comment">// /data/data/com.kinth.youdian/databases目录是准备放 SQLite 数据库的地方，也是 Android 程序默认的数据库存储目录</span><br>        <span class="hljs-comment">// 数据库名为 db_youdian.db</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">DB_PATH</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/data/data/&quot;</span> + context.getPackageName() +<span class="hljs-string">&quot;/databases/&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">DB_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;NewsDemo.db&quot;</span>;<br><br>        <span class="hljs-comment">// 检查 SQLite 数据库文件是否存在</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 得到 assets 目录下我们实现准备好的 SQLite 数据库作为输入流</span><br>                <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> context.getAssets().open(DB_NAME);<br>                <span class="hljs-comment">// 输出流,在指定路径下生成db文件</span><br>                <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(DB_PATH + DB_NAME);<br>                Log.d(<span class="hljs-string">&quot;数据库名称: &quot;</span>,DB_NAME);<br><br>                <span class="hljs-comment">// 文件写入</span><br>                <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                <span class="hljs-type">int</span> length;<br>                <span class="hljs-keyword">while</span> ((length = is.read(buffer)) &gt; <span class="hljs-number">0</span>) &#123;<br>                    os.write(buffer, <span class="hljs-number">0</span>, length);<br>                &#125;<br>                Log.d(<span class="hljs-string">&quot;成功：&quot;</span>,<span class="hljs-string">&quot;success！&quot;</span>);<br>                <span class="hljs-comment">// 关闭文件流</span><br>                os.flush();<br>                os.close();<br>                is.close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="在Fragment当中配置侧滑栏"><a href="#在Fragment当中配置侧滑栏" class="headerlink" title="在Fragment当中配置侧滑栏"></a>在Fragment当中配置侧滑栏</h2><blockquote><p>这里说一下在Fragment当中配置侧滑栏</p><p>因为之前配置侧滑栏是放在Activity当中的，后面改成Fragment之后，除了对代码作了一定的修改，还出现了一些其他的问题</p></blockquote><h4 id="问题1-用findViewById（）绑定控件的方式要稍微改下"><a href="#问题1-用findViewById（）绑定控件的方式要稍微改下" class="headerlink" title="问题1.  用findViewById（）绑定控件的方式要稍微改下"></a>问题1.  用findViewById（）绑定控件的方式要稍微改下</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//原本应该是</span><br>activity.findViewById(R.id.xxx);<br><span class="hljs-comment">//应该改成</span><br>view.findViewById(R.id.xx);<br></code></pre></td></tr></table></figure><p>而这里的View是在Fragment当中的onCreateView（）当中获得的</p><p>获得方法例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">view = inflater.inflate(R.layout.fragment_main_left, container, <span class="hljs-literal">false</span>);<br><br></code></pre></td></tr></table></figure><p>但是，假设操作的时候是在<strong>其他类里面</strong>：</p><p>而如果想要通过Activity或者Fragment来<code>getView（）</code>获取这个view，</p><p>则一定要<strong>注意</strong>不能在Fragement的<code>onCreateView</code>（）方法中去执行<code>getView（）</code></p><p>否则会报错获取的控件为空指针。</p><p>报错如下：<code>&#39;xxxxxxx控件&#39; on a null object reference</code></p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>移动互联网编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android实现一个简易的新闻列表APP（TabLayouut + ViewPager + Fragment）</title>
    <link href="/2023/04/22/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%BC%96%E7%A8%8B/Android%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E6%96%B0%E9%97%BB%E5%88%97%E8%A1%A8APP%EF%BC%88TabLayout+ViewPager+Fragment%EF%BC%89/"/>
    <url>/2023/04/22/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%BC%96%E7%A8%8B/Android%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E6%98%93%E7%9A%84%E6%96%B0%E9%97%BB%E5%88%97%E8%A1%A8APP%EF%BC%88TabLayout+ViewPager+Fragment%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Android实现一个简易的新闻列表APP（TabLayout-ViewPager-Fragment）"><a href="#Android实现一个简易的新闻列表APP（TabLayout-ViewPager-Fragment）" class="headerlink" title="Android实现一个简易的新闻列表APP（TabLayout+ViewPager+Fragment）"></a>Android实现一个简易的新闻列表APP（TabLayout+ViewPager+Fragment）</h1><p>[TOC]</p><blockquote><p>开发语言：Java</p><p>开发工具：Android Studio</p><p>用到的一些控件，功能：</p><p>Tablayout，ViewPager（滑动切换菜单功能），Navigation，ToolBar</p><p><strong>需要的外部包</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> androidx.fragment.app.Fragment;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentManager;<br><span class="hljs-keyword">import</span> androidx.fragment.app.FragmentPagerAdapter;<br></code></pre></td></tr></table></figure><p>注意！！！这里可能有的人版本是support-v4对应的包</p><p>添加了support-v4的包后发现build.gradle（Gradle Scripts文件夹下）有报错，</p><p>报错内容类似<code>Version 28 (intended for Android Pie and below) is the last version of the legacy support library</code></p><p>这是因为当前的AS已经不支持这些旧的包，因此可以将support-v4迁移到AndroidX，具体方法参考下面的文章或者自行搜索：</p><p><a href="https://blog.csdn.net/lfdfhl/article/details/105269551">(174条消息) Version 28 (intended for Android Pie and below) is the last version of the legacy support library_谷哥的小弟的博客-CSDN博客</a></p><p>代码的<strong>源码仓库</strong>地址为</p><p><a href="https://github.com/Cheesheep/AndroidExp2-News-App/tree/master">Cheesheep&#x2F;AndroidExp2-News-App at master (github.com)</a></p></blockquote><h2 id="1-实现内容以及效果"><a href="#1-实现内容以及效果" class="headerlink" title="1.实现内容以及效果"></a>1.实现内容以及效果</h2><p>先放出最终的<strong>实现效果</strong>：</p><ul><li><p>首页是国际新闻列表，总共有四个菜单</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422151217835.png" alt="image-20230422151217835"></p></li><li><p>可以通过<strong>滑动或点击</strong>切换到其他菜单，可以看到不同页面的列表有一定的差异</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422151529248.png" alt="image-20230422151529248"></p></li><li><p>点击查看其中一篇文章，可以看到本地是加载了一篇纯文本的内容</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422151800242.png" alt="image-20230422151800242"></p></li><li><p>点击右上角的菜单列表，有另外两种查看该文章的方式，选择<strong>阅读原文</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422151907617.png" alt="image-20230422151907617"></p><p>接着在app内显示出原文所在的网页</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422152926285.png" alt="image-20230422152926285"></p><p>再次点击<strong>右上角菜单</strong>可以选择重新显示本地的文章</p><p>如果选择浏览器打开，就会<strong>跳转到浏览器</strong>并且显示该网页</p></li><li><p>回到主页面，左划或者点击左上角即可显示滑动菜单栏</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422153049656.png" alt="image-20230422153049656"></p><p>打开后这里放了一些个人页面的信息</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230422153131.png" alt="联想截图_20230422153131"></p><p>不过菜单上面的功能都没有实现，只是做了样式，包括顶部的分享和个人页面按钮也是</p></li></ul><h2 id="2-实现代码"><a href="#2-实现代码" class="headerlink" title="2. 实现代码"></a>2. 实现代码</h2><h3 id="2-1-顶部菜单栏以及侧滑栏实现（Toolbar）"><a href="#2-1-顶部菜单栏以及侧滑栏实现（Toolbar）" class="headerlink" title="2.1 顶部菜单栏以及侧滑栏实现（Toolbar）"></a>2.1 顶部菜单栏以及侧滑栏实现（Toolbar）</h3><blockquote><p>顶部菜单栏的效果如图</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422164518062.png" alt="image-20230422164518062"></p><p>涉及到的配置文件：</p><ul><li><p>activity_main.xml ：主活动页面</p></li><li><p>toolbar_menu：菜单栏图标（右侧的分享和个人页面的logo）</p></li><li><p>nav_header,xml ：侧滑栏的头部信息（头像，昵称，联系方式）</p></li><li><p>left_drawer.xml：侧滑栏的菜单内容</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230422153131.png" alt="联想截图_20230422153131"></p><p>侧滑栏如上</p></li><li><p>Java活动文件：</p><p><strong>MainActivity.java</strong> :全部逻辑功能代码都在该活动当中</p></li></ul></blockquote><h4 id="2-1-1-导入导航栏依赖"><a href="#2-1-1-导入导航栏依赖" class="headerlink" title="2.1.1 导入导航栏依赖"></a>2.1.1 导入导航栏依赖</h4><p>导入”NavigationView“的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">implementation &#x27;com.android.support:design:29.0.1&#x27;<br></code></pre></td></tr></table></figure><h4 id="2-1-2-配置toolbar菜单栏布局文件"><a href="#2-1-2-配置toolbar菜单栏布局文件" class="headerlink" title="2.1.2 配置toolbar菜单栏布局文件"></a>2.1.2 配置toolbar菜单栏布局文件</h4><p>关于toolbar的各种设置，可以参考以下文章</p><p><a href="https://blog.csdn.net/qq_42324086/article/details/117390236">(174条消息) Android Toolbar的使用详解_暗恋花香的博客-CSDN博客</a></p><p><strong>设置为NoActionBar</strong>：</p><p>要使用toolbar，首先要去掉系统默认设置的ActionBar</p><p>在AndroidManifest.xml文件当中可以设置活动的主题，我们新建一个NoActionBar的主题，并且给我们需要配置toolBar的页面赋予这个主题即可</p><p><strong>AndroidManifest.xml</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422162635485.png" alt="image-20230422162635485"></p><p><strong>themes.xml</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422164201720.png" alt="image-20230422164201720"></p><p>最右边是noActionBar，内容设置了toolbar的背景颜色等等</p><p><strong>配置toolBar</strong></p><p>需要在<code>activity_main.xml</code>文件当中放入toolBar，因为是在首页主活动放置toolBar</p><p><strong>activity_main.xml部分代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    顶部菜单栏toolBar--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.appcompat.widget.Toolbar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/my_toolbar&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;?attr/actionBarSize&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;?attr/colorPrimary&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:titleTextColor</span>=<span class="hljs-string">&quot;@color/white&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:elevation</span>=<span class="hljs-string">&quot;4dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:theme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.ActionBar&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:popupTheme</span>=<span class="hljs-string">&quot;@style/ThemeOverlay.AppCompat.Light&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>除了在活动布局文件中放置toolbar，还需要一个菜单图标文件</p><p><strong>toolbar_menu.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tool_msg&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/share&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orderInCategory</span>=<span class="hljs-string">&quot;80&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;edit&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:showAsAction</span>=<span class="hljs-string">&quot;ifRoom|withText&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tool_user&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:icon</span>=<span class="hljs-string">&quot;@drawable/personal&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orderInCategory</span>=<span class="hljs-string">&quot;80&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;share&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:showAsAction</span>=<span class="hljs-string">&quot;ifRoom|withText&quot;</span> /&gt;</span><br><span class="hljs-comment">&lt;!--    后面有更多的item如果放不下就会进入菜单栏--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的配置和actionBar的menu绘制方法类似，唯一区别就是<code>app:showAsAction</code>不同，该属性是Toolbar当中很关键的属性</p><p>其中四个不同的值的作用分别如下：</p><p>1）always：这个值会使菜单项一直显示在 ToolBar上。<br>2）ifRoom：如果有足够的空间，这个值会使菜单项显示在 Tool Bar上。<br>3）never：这个值会使菜单项永远都不出现在 ToolBar上。<br>4）withText：这个值会使菜单项和它的图标、菜单文本一起显示。一般和ifRoom一起通过“|”使用<br>app:showAsAction 属性值为 ifRoom|withText，表示如果有空间，那么就连同文字一起显示在标题栏中，否则就显示在菜单栏中。<br>而当app:showAsAction 属性值为 never时，该项作用为Menu不显示在菜单组件中。</p><p>这个文件后面我们会在<strong>activity的Java代码</strong>当中写入并且连接上</p><p><strong>MainActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">myToolbar.inflateMenu(R.menu.toolbar_menu);<br></code></pre></td></tr></table></figure><h4 id="2-1-3-配置侧滑栏的xml布局文件"><a href="#2-1-3-配置侧滑栏的xml布局文件" class="headerlink" title="2.1.3 配置侧滑栏的xml布局文件"></a>2.1.3 配置侧滑栏的xml布局文件</h4><p>添加NavigationView组件</p><p>（要使用该组件需要从外部导入design包，在前面有提到导入的具体的包）</p><p>将该组件添加到toolbar所在的活动的页面当中，这里就是activity_main.xml</p><p><strong>activity_main.xml部分代码</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/drawer_layout&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>    --------<br>    这里是该页面的其他布局文件，可以将整个布局文件代码放进去也是可以的<br>    <br>    --------<br>    <br><span class="hljs-comment">&lt;!--左侧导航菜单--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.navigation.NavigationView</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/nav_view&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;start&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/colorPrimary&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:headerLayout</span>=<span class="hljs-string">&quot;@layout/nav_header&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">app:menu</span>=<span class="hljs-string">&quot;@menu/left_drawer&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个菜单栏由于是侧滑出现的，所以放在整个布局的最外面，并且需要用<code>DrawerLayout</code>包裹</p><p>注意看下面两个app的属性<code>app:headerLayout</code>和<code>app:menu</code></p><p>除此之外需要新建两个文件，一个是头部的代码，一个是菜单的部分</p><p><strong>nav_header.xml</strong></p><p>这里代码就不全部放出来了，给出效果</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230422181842842.png" alt="image-20230422181842842"></p><p><strong>left_drawer.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/navigation_item_user&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;用户中心&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/navigation_item_setting&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;用户设置&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/navigation_item_about&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;关于我们&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/navigation_item_logout&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;注销&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个是菜单栏的页面，预览的效果和最终实现的效果是<strong>有差异的</strong>，不需要以预览的那个效果为准。</p><p>将nav_header和left_drawer结合之后，效果图片在上面有显示。</p><h4 id="2-1-4-Java逻辑代码实现"><a href="#2-1-4-Java逻辑代码实现" class="headerlink" title="2.1.4 Java逻辑代码实现"></a>2.1.4 Java逻辑代码实现</h4><p>布局文件写好后，就是在Activity活动当中去实现我们的点击事件，以及一些组件的连接，布局的设置其他等等。</p><p>这里对应的Java代码<strong>全部都在MainActivity.java</strong>当中</p><p>ToolBar和侧边栏的初始化都在MainActivity的<code>initToolBarView()</code>方法当中</p><p><strong>初始化Toolbar</strong>：</p><p><strong>MainActivity.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initToolBarView</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Toolbar</span> <span class="hljs-variable">myToolbar</span> <span class="hljs-operator">=</span> findViewById(R.id.my_toolbar);<br>    drawer_layout = findViewById(R.id.drawer_layout);<br>    <span class="hljs-comment">//将图标菜单文件添加到toolbar当中</span><br>    myToolbar.inflateMenu(R.menu.toolbar_menu);<br>    myToolbar.setTitle(<span class="hljs-string">&quot;Hello News&quot;</span>);<br>    <span class="hljs-comment">//ToolBar的菜单的点击事件</span><br>    myToolbar.setOnMenuItemClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Toolbar</span>.OnMenuItemClickListener() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onMenuItemClick</span><span class="hljs-params">(MenuItem item)</span> &#123;<br>            <span class="hljs-keyword">switch</span> (item.getItemId())&#123;<br>                <span class="hljs-keyword">default</span>:<br>                    Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;菜单栏功能尚未开发&quot;</span>, Toast.LENGTH_SHORT).show();<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure><p>通过<code>inflateMenu（）</code>将右侧的菜单图标添加到toolbar当中。</p><p>然后设置这些图标的点击事件，只不过这里我没有去写对应的功能，要用到的话，识别item当中的id即可。</p><p><strong>监听打开侧滑栏的按钮</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//配置侧滑栏，并且监听点击事件</span><br>myToolbar.setNavigationIcon(R.drawable.left_nav);<br><span class="hljs-comment">//打开侧滑栏的监听事件</span><br>myToolbar.setNavigationOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>        drawer_layout.openDrawer(GravityCompat.START);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这样就可以通过点击打开侧滑栏了。</p><p>然后是侧滑栏的按钮的监听设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//侧滑栏里面的菜单的监听事件</span><br><span class="hljs-type">NavigationView</span> <span class="hljs-variable">mNavigationView</span> <span class="hljs-operator">=</span> findViewById(R.id.nav_view);<br>mNavigationView.setNavigationItemSelectedListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NavigationView</span>.OnNavigationItemSelectedListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onNavigationItemSelected</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MenuItem item)</span> &#123;<br>        <span class="hljs-comment">//侧滑栏中菜单的点击事件</span><br>    &#125;<br><br>&#125;);<br></code></pre></td></tr></table></figure><p>这样就完成了toolbar的代码了</p><hr><p><strong>注意事项</strong>！：</p><p><strong>想让Toolbar本身的inflateMenu生效，则必须删去以下类似代码！！！</strong></p><p>不然会由于同时使用了ActionBar导致失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//设置侧边栏</span><br>setSupportActionBar(myToolbar);<br>setTitle(<span class="hljs-string">&quot;Top News&quot;</span>);<span class="hljs-comment">//设置标题名称</span><br>getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置左边home键</span><br>getSupportActionBar().setHomeAsUpIndicator(R.drawable.left_nav);<span class="hljs-comment">//更换home键样式</span><br><br></code></pre></td></tr></table></figure><h3 id="2-2-导航栏实现（TabLayout-ViewPager-Fragment）"><a href="#2-2-导航栏实现（TabLayout-ViewPager-Fragment）" class="headerlink" title="2.2 导航栏实现（TabLayout + ViewPager + Fragment）"></a>2.2 导航栏实现（TabLayout + ViewPager + Fragment）</h3><blockquote><p>导航栏使用了上述三样东西结合</p><p>TabLayout：提供选项切换到不同的菜单</p><p>ViewPager：用于滑动切换到不同的菜单</p><p>Fragment：每个菜单显示的页面内容</p><p><strong>涉及配置文件</strong>：</p><ul><li>activity_main.xml</li><li>selected.xml （选中菜单的颜色设置）</li><li>themes.xml  （设置菜单的文件大小）</li></ul></blockquote><h4 id="2-2-1-导入相关依赖"><a href="#2-2-1-导入相关依赖" class="headerlink" title="2.2.1 导入相关依赖"></a>2.2.1 导入相关依赖</h4><p>如果是旧版的话应当是导入support-v4里面的组件，这个时候可能会出现兼容问题</p><h4 id="2-2-2-界面配置文件"><a href="#2-2-2-界面配置文件" class="headerlink" title="2.2.2 界面配置文件"></a>2.2.2 界面配置文件</h4><p>该菜单就是在首页展现的，因此所有布局文件也都在<strong>activity_main.xml</strong>当中</p><p><strong>Tablayout+ViewPager控件</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--顶部导航栏，切换选项卡--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">com.google.android.material.tabs.TabLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/tabLayout&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;80dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabIndicatorColor</span>=<span class="hljs-string">&quot;#ffffff&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabIndicatorHeight</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabTextColor</span>=<span class="hljs-string">&quot;@color/white&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabIconTint</span>=<span class="hljs-string">&quot;@color/white&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabSelectedTextColor</span>=<span class="hljs-string">&quot;@color/white&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabMode</span>=<span class="hljs-string">&quot;fixed&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabBackground</span>=<span class="hljs-string">&quot;@drawable/selected&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:tabTextAppearance</span>=<span class="hljs-string">&quot;@style/MyTabLayoutTextAppearance&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-comment">&lt;!--用于实现左右滑动效果--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.viewpager.widget.ViewPager</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/viewPager&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>接着要在对应的页面的活动文件当中进行代码逻辑编写：</p><p><strong>initViewPager()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initViewPager</span><span class="hljs-params">()</span> &#123;<br>    mViewPager= (ViewPager) findViewById(R.id.viewPager);<br>    <span class="hljs-type">MyFragmentPagerAdapter</span> <span class="hljs-variable">myFragmentPagerAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyFragmentPagerAdapter</span>(getSupportFragmentManager());<br>    mViewPager.setAdapter(myFragmentPagerAdapter);<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化viewPager，这里用到了一个新的类myFragmentPagerAdapter来初始化内容</p><p>该类需要继承<code>FragmentPagerAdapter</code>，不过现在的android studio当中会显示该类已经被移除了，但是实际上还能用，不报错就行，不用管那个下划线，</p><p><strong>FragmentPagerAdapter.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFragmentPagerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FragmentPagerAdapter</span> &#123;<br>    <span class="hljs-keyword">private</span> String[] mTitles = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;国际&quot;</span>, <span class="hljs-string">&quot;体育&quot;</span>, <span class="hljs-string">&quot;生活&quot;</span>,<span class="hljs-string">&quot;科学&quot;</span>&#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyFragmentPagerAdapter</span><span class="hljs-params">(FragmentManager fm)</span> &#123;<br>        <span class="hljs-built_in">super</span>(fm);<br>    &#125;<br>    <span class="hljs-comment">//选择不同的菜单返回不同的Fragment页面</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Fragment <span class="hljs-title function_">getItem</span><span class="hljs-params">(<span class="hljs-type">int</span> position)</span> &#123;<br>        <span class="hljs-keyword">if</span> (position == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SportNewsFragment</span>();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (position == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LifeNewsFragment</span>();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (position==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScienceNewsFragment</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalNewsFragment</span>();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> mTitles.length;&#125;<br><br>    <span class="hljs-comment">//ViewPager与TabLayout绑定后，这里获取到PageTitle就是Tab的Text</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> CharSequence <span class="hljs-title function_">getPageTitle</span><span class="hljs-params">(<span class="hljs-type">int</span> position)</span> &#123;<span class="hljs-keyword">return</span> mTitles[position];&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该类的代码也比较简短，根据需要的菜单数量，增加String数组元素个数和页面Fragment的数量就行</p><p><strong>initTabLayoutView()</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initTabLayoutView</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//将TabLayout与ViewPager绑定在一起</span><br>    <span class="hljs-type">TabLayout</span> <span class="hljs-variable">mTabLayout</span> <span class="hljs-operator">=</span> (TabLayout) findViewById(R.id.tabLayout);<br>    mTabLayout.setupWithViewPager(mViewPager);<br><br>    <span class="hljs-comment">//指定Tab的位置</span><br>    TabLayout.<span class="hljs-type">Tab</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> mTabLayout.getTabAt(<span class="hljs-number">0</span>);<br>    TabLayout.<span class="hljs-type">Tab</span> <span class="hljs-variable">two</span> <span class="hljs-operator">=</span> mTabLayout.getTabAt(<span class="hljs-number">1</span>);<br>    TabLayout.<span class="hljs-type">Tab</span> <span class="hljs-variable">three</span> <span class="hljs-operator">=</span> mTabLayout.getTabAt(<span class="hljs-number">2</span>);<br>    TabLayout.<span class="hljs-type">Tab</span> <span class="hljs-variable">four</span> <span class="hljs-operator">=</span> mTabLayout.getTabAt(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-comment">//设置Tab的图标，假如不需要则把下面的代码删去</span><br>    one.setIcon(R.drawable.global);<br>    two.setIcon(R.drawable.soccer);<br>    three.setIcon(R.drawable.life);<br>    four.setIcon(R.drawable.science);<br>&#125;<br></code></pre></td></tr></table></figure><p>初始化TabLayout的设置，先将viewPager与TabLayout<strong>绑定</strong>在一起，然后设定对应的位置，最后设置图标，代码比较简单。</p><p><strong>注意事项！：</strong></p><p><strong>其他xml文件的添加</strong></p><p>这里说几个tablayout和viewPager要导入的一些其他的简短的xml文件</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230423002236907.png" alt="image-20230423002236907"></p><p>在<code>themes.xml</code>（或styles.xml）文件当中要添加<code>style name = MyTabLayoutTextAppearance</code>的样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    TabLayout的文本大小--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MyTabLayoutTextAppearance&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;TextAppearance.AppCompat.Widget.ActionBar.Title&quot;</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:textSize&quot;</span>&gt;</span>18sp<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;android:textColor&quot;</span>&gt;</span>@color/white<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还有在drawable文件下的 <code>selected.xml</code>，用于展示被选中下菜单的颜色</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:state_selected</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@color/TabBackGround&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@color/colorAccent&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-新闻列表实现"><a href="#2-3-新闻列表实现" class="headerlink" title="2.3 新闻列表实现"></a>2.3 新闻列表实现</h3><blockquote><p><strong>涉及配置文件</strong>：</p><ul><li>fragment_global_news.xml 以及类似的四个文件（都是只有一个ListView）</li><li>listView_item.xml以及相关的三种卡片布局</li></ul><p><strong>Java文件</strong>：</p><ul><li>GlobalNewsFragment.java （新闻列表的显示页面）</li><li>NewsUtils.java （存放新闻的数据，例如标题，内容，url）</li><li>NewsBean.java 新闻类（含标题，内容等）</li></ul></blockquote><p>由于四个新闻列表页面的布局是很像的，所以这里只拿<strong>其中一个</strong>举例</p><p>菜单的布局实现后，就要说下具体怎么实现新闻的列表内容了。</p><p>这里也是相对复杂一点的内容，因为该Fragment的代码内容比较多</p><p>但是布局文件xml是比较少的，或者说都是相似的</p><h4 id="2-3-1-布局配置文件"><a href="#2-3-1-布局配置文件" class="headerlink" title="2.3.1 布局配置文件"></a>2.3.1 布局配置文件</h4><p>首先是Fragment碎片的布局</p><p>很简单，只有一个ListView在里面</p><p><strong>fragment_global_news.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.newsListPage.GlobalNewsFragment&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ListView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/globalList&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>相对的其他的碎片文件也是一样</p><p>接着是list里面每个的样式该怎么实现呢？</p><p>这就要我们自己去涉及一个布局样式</p><p><strong>listview_item.xml</strong></p><p>这里代码较长，就只给出一个样式结合以及图片了</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230423003925586.png" alt="image-20230423003925586"></p><p>其他的样式例如有</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230423004808391.png" alt="image-20230423004808391"></p><h4 id="2-3-2-Java代码实现listView与自定义新闻卡片结合"><a href="#2-3-2-Java代码实现listView与自定义新闻卡片结合" class="headerlink" title="2.3.2 Java代码实现listView与自定义新闻卡片结合"></a>2.3.2 Java代码实现listView与自定义新闻卡片结合</h4><p>接下来是将listView与自定义的卡片xml文件结合到一起</p><p>最终效果如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230423005006208.png" alt="image-20230423005006208"></p><p><strong>GlobalNewsFragment.java</strong> ：</p><p>首先看看代码初始化的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalNewsFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fragment</span> &#123;<br>    <span class="hljs-keyword">private</span> ListView lv;<br>    <span class="hljs-keyword">private</span> ArrayList&lt;NewsBean&gt; mList;<br>    <span class="hljs-keyword">private</span> View globalView;<br>    <span class="hljs-keyword">private</span> MainActivity mainActivity;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="hljs-params">                             Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-comment">// 获取view，并且连接到主活动上面</span><br>        globalView = inflater.inflate(R.layout.fragment_global_news, container, <span class="hljs-literal">false</span>);<br>        mainActivity =(MainActivity) getActivity();<br>        initUI();<br>        initData();<br>        initAdapter();<br>        <span class="hljs-keyword">return</span> globalView;<br>    &#125;<br></code></pre></td></tr></table></figure><p>只需要一个onCreateVIew（）是Fragment类当中的函数重载，其他的函数都是自己写出来的了。</p><p>初始化globalVIew的时候，获取了上面写好的配置文件<code>fragment_global_news.xml</code> 。</p><p>介绍三个初始化的函数内容</p><ul><li><p><strong>initUI（）</strong>：</p><p>监听列表每个item的点击事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initUI</span><span class="hljs-params">()</span> &#123;<br>    lv = (ListView) globalView.findViewById(R.id.globalList);<br>    <span class="hljs-comment">//设置点击事件监听</span><br>    lv.setOnItemClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AdapterView</span>.OnItemClickListener() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onItemClick</span><span class="hljs-params">(AdapterView&lt;?&gt; parent, View view, <span class="hljs-type">int</span> position, <span class="hljs-type">long</span> id)</span> &#123;<br>            <span class="hljs-comment">//跳转到显示文章内容的活动</span><br>            <span class="hljs-type">NewsBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> mList.get(position);          NewsArticleContentActivity.actionStart(mainActivity,bean.title,bean.news_content,bean.news_url);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是对每个列表的新闻卡片做了一个点击监听的事件，通过<strong>Intent</strong>跳转到文章的详情页面，经典的活动之间的跳转方法，不阐述了。</p><p>listView的获取连接了之前写的xml文件<code>globalList.xml</code>当中</p><p>该意图已经封装好一个方法，只需要传固定的参数即可，分别是标题，内容，还有url链接。</p><p>文章的详情页面用一个Activity来实现，下一小节会讲到。</p></li><li><p><strong>initData（）</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initData</span><span class="hljs-params">()</span> &#123;<br>    mList = NewsUtils.getGlobalNews(mainActivity);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里只调用了一个函数。</p><p>功能是将数据存到mList当中，方便后面用适配器Adapter调用</p><p>来看下<strong>NewsUtils</strong>类里面是怎么获取数据的</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230423010309674.png" alt="image-20230423010309674"></p><p>代码内容是比较简单直接的，虽然这里可以使用数据库的方式会更高效。</p><p>MewsBean里面的内容也只有简单的几个成员数据而已。</p><p><strong>NewsBean</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NewsBean</span> &#123;<br>    <span class="hljs-keyword">public</span> String title;<br>    <span class="hljs-keyword">public</span> String des;<br>    <span class="hljs-keyword">public</span> Drawable icon;<br>    <span class="hljs-keyword">public</span> String news_url;<br>    <span class="hljs-keyword">public</span> String news_content;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>initAdapter（）</strong></p><p>一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initAdapter</span><span class="hljs-params">()</span> &#123;<br>    lv.setAdapter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalNewsFragment</span>.NewsAdapter());<br>&#125;<br></code></pre></td></tr></table></figure><p>setAdapter（）方法是官方提供的，而里面的NewsAdapter（）则需要我们去自定义实现</p><p><strong>NewsAdpter类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NewsAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseAdapter</span> &#123;<br>    <span class="hljs-comment">//适配器处理新闻列表</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> mList.size();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> NewsBean <span class="hljs-title function_">getItem</span><span class="hljs-params">(<span class="hljs-type">int</span> position)</span> &#123;<br>        <span class="hljs-keyword">return</span> mList.get(position);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getItemId</span><span class="hljs-params">(<span class="hljs-type">int</span> position)</span> &#123;<br>        <span class="hljs-keyword">return</span> position;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">getView</span><span class="hljs-params">(<span class="hljs-type">int</span> position, View convertView, ViewGroup parent)</span> &#123;<br>        GlobalNewsFragment.ViewHolder holder;<br>        <span class="hljs-keyword">if</span> (convertView == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//获取卡片的具体内容</span><br>            holder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GlobalNewsFragment</span>.ViewHolder();<br>            convertView = View.inflate(mainActivity.getApplicationContext(), R.layout.listview_item, <span class="hljs-literal">null</span>);<br>            holder.tv_title = (TextView) convertView.findViewById(R.id.tv_title);<br>            holder.tv_des = (TextView) convertView.findViewById(R.id.tv_des);<br>            holder.iv_icon = (ImageView) convertView.findViewById(R.id.iv_icon);<br>            convertView.setTag(holder);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            holder = (GlobalNewsFragment.ViewHolder) convertView.getTag();<br>        &#125;<br>        <span class="hljs-type">NewsBean</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> getItem(position);<br>        holder.tv_title.setText(item.title);<br>        holder.tv_des.setText(item.des);<br>        holder.iv_icon.setImageDrawable(item.icon);<br>        <span class="hljs-keyword">return</span> convertView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该类继承了BaseAdapter，并对四个基本的方法进行了重载。</p><p>前面的三个都比较简单，根据名字就可以知道该方法调用的是一些基本的参数，例如获得列表当中的item等等。</p><p>最后的getView（）比较长，主要是将数据<strong>传递到view</strong>布局上面</p><p>该方法可以看到调用了<code>listview_item.xml</code>文件，想要不同的<strong>卡片样式</strong>，这里可以选中不同的布局文件。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230423011751041.png" alt="image-20230423011751041"></p><p>holder类（直接定义在当前的Fragment类里面就行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewHolder</span> &#123;<br>    TextView tv_title;<br>    TextView tv_des;<br>    ImageView iv_icon;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>至此就完成了新闻列表样式的渲染和点击事件了。</p><h3 id="2-4-新闻具体内容实现"><a href="#2-4-新闻具体内容实现" class="headerlink" title="2.4 新闻具体内容实现"></a>2.4 新闻具体内容实现</h3><blockquote><p><strong>相关配置文件</strong>：</p><ul><li>activity_news_article_content.xml</li><li>article_open_browser.xml （设置右上角菜单内容）</li></ul><p><strong>java代码</strong>：</p><ul><li>NewsArticleContentActivity.java</li></ul></blockquote><p>该页面对应一个Activity，实现效果如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230423012206793.png" alt="image-20230423012206793"></p><p>点击阅读原文，实际上是将当前页面的标题和内容<strong>隐藏</strong>，然后将webView显示出来。</p><h4 id="2-4-1-布局配置文件"><a href="#2-4-1-布局配置文件" class="headerlink" title="2.4.1 布局配置文件"></a>2.4.1 布局配置文件</h4><p>根据页面内容可以看出，活动文件的内容应当有标题，内容，webView。</p><p><strong>activity_news_article_content.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.NewsArticleContentActivity&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ScrollView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--标题--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;30sp&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:fontFamily</span>=<span class="hljs-string">&quot;sans-serif-black&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/LocalTitle&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--下划线--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">View</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;1dp&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@color/cardview_dark_background&quot;</span></span><br><span class="hljs-tag">                /&gt;</span><br><span class="hljs-comment">&lt;!--文章内容--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;18sp&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/LocalContent&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 嵌入网页内容--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">WebView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/news_webView&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:visibility</span>=<span class="hljs-string">&quot;gone&quot;</span></span><br><span class="hljs-tag">                /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ScrollView</span>&gt;</span><br><span class="hljs-comment">&lt;!--    先隐藏嵌入的网页--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里要用到<strong>scorllView</strong>来避免由于文章内容过多而页面无法下拉的问题。</p><p>一开始的WebView设置是<strong>不可见gone</strong>的，在运行后经过点击事件才能让其可见。</p><p><strong>标题栏</strong>：</p><p>直接使用默认给出的actionBar</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Theme.NEWSPage&quot;</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">&quot;Theme.MaterialComponents.DayNight.DarkActionBar&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>标题当中的菜单栏</strong></p><p><strong>article_open_browser.xml</strong> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">menu</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/article_open_webView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;阅读原文&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/article_open_browser&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:title</span>=<span class="hljs-string">&quot;用浏览器打开&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">menu</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230423013518.png" alt="联想截图_20230423013518"></p><h4 id="2-4-2-Java代码实现"><a href="#2-4-2-Java代码实现" class="headerlink" title="2.4.2 Java代码实现"></a>2.4.2 Java代码实现</h4><p>相关代码都在<strong>NewsArticleContentActivity.java</strong>当中实现</p><p>首先看看初始化这个活动的时候用到的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_news_article_content);<br>    <span class="hljs-comment">//设置标题栏内容</span><br>    <span class="hljs-type">ActionBar</span> <span class="hljs-variable">actionBar</span> <span class="hljs-operator">=</span> getSupportActionBar();<br>    <span class="hljs-keyword">if</span>(actionBar != <span class="hljs-literal">null</span>)&#123;<br>        setTitle(<span class="hljs-string">&quot;Article&quot;</span>);<br>        actionBar.setHomeButtonEnabled(<span class="hljs-literal">true</span>);<span class="hljs-comment">//设置左上角是否可以点击</span><br>        actionBar.setDisplayHomeAsUpEnabled(<span class="hljs-literal">true</span>);<span class="hljs-comment">//添加返回的图标</span><br>    &#125;<br>    <span class="hljs-comment">//设置文章内容</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">newsTitle</span> <span class="hljs-operator">=</span> getIntent().getStringExtra(<span class="hljs-string">&quot;news_title&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">newsContent</span> <span class="hljs-operator">=</span> getIntent().getStringExtra(<span class="hljs-string">&quot;news_content&quot;</span>);<br>    articleUrl = getIntent().getStringExtra(<span class="hljs-string">&quot;news_url&quot;</span>);<br>    title = findViewById(R.id.LocalTitle);<br>    content = findViewById(R.id.LocalContent);<br>    title.setText(newsTitle);<br>    content.setText(newsContent);<br>    <span class="hljs-comment">//设置webView内容</span><br>    isArticleDisplayed = <span class="hljs-literal">true</span>;<span class="hljs-comment">//从新闻列表进入文章的时候默认标志位为真</span><br>    webView = findViewById(R.id.news_webView);<br>    webView.getSettings().setJavaScriptEnabled(<span class="hljs-literal">true</span>);<br>    webView.setWebViewClient(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebViewClient</span>()&#123;<br>        <span class="hljs-comment">//重写这个方法解决重定向的问题</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldOverrideUrlLoading</span><span class="hljs-params">(WebView view, String url)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;);<br>    webView.loadUrl(articleUrl);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里都是对<code>activity_news_article_content.xml</code>布局的内容渲染。</p><p>代码分为三个步骤</p><ol><li>通过<code>setHomeBUttonEnabled（）</code>和<code>setDisplayHomeAsUpEnabled（）</code>来设置顶部菜单栏左边的返回按钮。</li><li>用<code>getIntent（）</code>获取传过来的文章标题，内容和链接urls，并且给控件的内容设置相应的文本</li><li>设置WebView，加载Url链接到WebView控件上面。（这里还需要去AndroidManifest当中设置一下uses-permission和usesClearText）</li></ol><p>关于getIntent获得的数据，我在NewsArticleContentActivity类当中写了一个<code>actionStart（）</code>方法作为接口来接收Intent，提供给外部想要进入这个活动并且传参。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//提供一个传入意图的接口，用来跳转活动</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionStart</span><span class="hljs-params">(Context context,String newsTitle,String newsContent,String newsUrl)</span>&#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(context,NewsArticleContentActivity.class);<br>    intent.putExtra(<span class="hljs-string">&quot;news_title&quot;</span>,newsTitle);<br>    intent.putExtra(<span class="hljs-string">&quot;news_content&quot;</span>,newsContent);<br>    intent.putExtra(<span class="hljs-string">&quot;news_url&quot;</span>,newsUrl);<br>    context.startActivity(intent);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建右侧的顶部菜单栏</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//重写顶部菜单栏构造方法</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCreateOptionsMenu</span><span class="hljs-params">(Menu menu)</span> &#123;<br>    <span class="hljs-type">MenuInflater</span> <span class="hljs-variable">inflater</span> <span class="hljs-operator">=</span> getMenuInflater();<br>    inflater.inflate(R.menu.article_open_browser,menu);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onCreateOptionsMenu(menu);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的方法将之前写好的<code>article_open_browser.xml</code>放到menu当中</p><p>最后是重写这个菜单里面的点击触发事件，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onOptionsItemSelected</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> MenuItem item)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (item.getItemId()) &#123;<br>        <span class="hljs-keyword">case</span> android.R.id.home:<br>            <span class="hljs-comment">//设置返回按钮事件</span><br>            finish();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">case</span> R.id.article_open_browser:<br>            <span class="hljs-comment">//设置浏览器打开事件</span><br>            <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>            intent.setAction(Intent.ACTION_VIEW);<br>            intent.setData(Uri.parse(articleUrl));<span class="hljs-comment">//跳转到网页</span><br>            startActivity(intent);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">case</span> R.id.article_open_webView:<br>            <span class="hljs-comment">//设置显示的显示网页内容</span><br>            <span class="hljs-keyword">if</span>(isArticleDisplayed)&#123;<br>                title.setVisibility(View.GONE);<br>                content.setVisibility(View.GONE);<br>                webView.setVisibility(View.VISIBLE);<br>                item.setTitle(<span class="hljs-string">&quot;本地文章&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                title.setVisibility(View.VISIBLE);<br>                content.setVisibility(View.VISIBLE);<br>                webView.setVisibility(View.GONE);<br>                item.setTitle(<span class="hljs-string">&quot;嵌入网页&quot;</span>);<br>            &#125;<br>            isArticleDisplayed = !isArticleDisplayed;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onOptionsItemSelected(item);<br>&#125;<br></code></pre></td></tr></table></figure><p>分别对返回键，显示网页内容，和跳转浏览器三个按键做了点击响应</p><p>对应下图的三个图标：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230423091235.png" alt="联想截图_20230423091235"></p><p>至此就完成了新闻文章详情页面的所有功能了。</p><p><strong>注意事项！！：</strong></p><p>webview无法正常打开的原因（这里指已经设置了uses-permission的情况）：</p><p>可以参考这篇博客文章，完美解决问题</p><p><a href="https://blog.csdn.net/jppipai/article/details/124433198">(174条消息) WebView出现net:ERR_CLEARTEXT_NOT_PERMITTED和net::ERR_UNKNOWN_URL_SCHEME错误的解决办法_飞鸭传书的博客-CSDN博客</a></p><p>主要原因有例如现在的版本不支持http格式的协议，因此需要在AndroidManifest.xml当中新添加一行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    用于允许网络连接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">   <span class="hljs-attr">........其他设置</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:usesCleartextTraffic</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">   <span class="hljs-attr">......其他设置</span></span><br><span class="hljs-tag">    &gt;</span><br></code></pre></td></tr></table></figure><p>接着会出现网页能够加载一下，然后就又发生了错误，这次提示<code>net::ERR_UNKNOWN_URL_SCHEME错误</code>,这里是重定向的问题</p><p>解决方法是重写 <code>shouldOverrideUrlLoading(WebView view, String url)</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript">webView.<span class="hljs-title function_">setWebViewClient</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebViewClient</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">shouldOverrideUrlLoading</span>(<span class="hljs-params"><span class="hljs-title class_">WebView</span> view, <span class="hljs-title class_">String</span> url</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ul><li><p><code>return true</code> 表示当前url即使是重定向url也不会再执行（除了在return true之前使用webview.loadUrl(url)除外，因为这个会重新加载）</p></li><li><p><code>return false</code> 表示由系统执行url，直到不再执行此方法，即加载完重定向的ur（即具体的url，不再有重定向）。</p></li></ul><p>或者采用上面博客给出的更加多判断的方法，可以对更多类型的页面的重定向进行判断</p><hr><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>最后来说一下总结吧</p><p>本次可以说是安卓课上第一次做一个比较像App的实验了，之前的几次实验和作业也只是实现了一些简单的样式或者功能，而这次不仅要实现功能，UI也要进行一定的设计和美化。</p><p>个人认为工作量还是比较大的了，花费的时间也比较多，虽然最后做出来的功能其实并没有很多，但是因为是第一次做这种体量的安卓项目。</p><p>相比于以往接触到的小程序开发，web开发，android给人最大的不同就是需要配置大量的布局文件。在android当中，并不需要编写像html，css这样的文件去渲染页面，而是需要用xml文件来展现布局的页面内容，也并没有JavaScript这样的语言去对前端的样式，数据逻辑进行处理，而是靠Java语言来编写一个叫做活动（Activity）的东西，将数据连接到一起。</p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>移动互联网编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理Java实现正规式生成NFA（算符优先实现Thompson算法）</title>
    <link href="/2023/04/15/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%80%9A%E8%BF%87%E6%AD%A3%E5%88%99%E5%BC%8F%E5%BE%97%E5%88%B0NFA%EF%BC%88%E5%88%A9%E7%94%A8%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F%E5%AE%9E%E7%8E%B0Thompson%E7%AE%97%E6%B3%95%EF%BC%89/"/>
    <url>/2023/04/15/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E9%80%9A%E8%BF%87%E6%AD%A3%E5%88%99%E5%BC%8F%E5%BE%97%E5%88%B0NFA%EF%BC%88%E5%88%A9%E7%94%A8%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F%E5%AE%9E%E7%8E%B0Thompson%E7%AE%97%E6%B3%95%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="编译原理Java实现正规式生成NFA（利用算符优先级实现Thompson算法）"><a href="#编译原理Java实现正规式生成NFA（利用算符优先级实现Thompson算法）" class="headerlink" title="编译原理Java实现正规式生成NFA（利用算符优先级实现Thompson算法）"></a>编译原理Java实现正规式生成NFA（利用算符优先级实现Thompson算法）</h1><p>[TOC]</p><blockquote><p><strong>前言</strong>：</p><p>该部分代码属于仓库当中part03的部分，使用的语言为Java</p><p>由于代码比较多，文件数量也较多，因此先介绍一下不同的文件的功能：<br><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230409181716901.png" alt="image-20230409181716901"></p><p>其他文件是一些结构代码，方便进行数据的处理和面向对象，</p><p>源码已上传至Github，地址<a href="https://github.com/Cheesheep/CompilingTheory-Exp2-LexicalAnalysiz">Cheesheep&#x2F;CompilingTheory-Exp2-LexicalAnalysiz: read the regula expression to generate NFA (github.com)</a></p><p>代码位于仓库的part03的文件夹内</p></blockquote><p><strong>程序代码入口</strong>：</p><p>生成对应的NFA需要运行createNFA的Java类，在该类会调用REFIle类来对读入的文件进行处理。</p><p>这里给出一些正规式的<strong>输入示例</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lisp">a(<span class="hljs-name">b</span><span class="hljs-name">|aa)*b</span><br><span class="hljs-name">a*b</span><br><span class="hljs-name">0(1|</span><span class="hljs-number">00</span>)<br>a*b(<span class="hljs-name">b</span><span class="hljs-name">|(ab)*c)ca</span><br><span class="hljs-name">a*b(b|</span>(<span class="hljs-name">ab</span>)*c)*ca<br>a*b(<span class="hljs-name">b</span><span class="hljs-name">|(db)*c|</span><span class="hljs-name">css*e</span>)<br>((<span class="hljs-number">0</span>|1)(010|<span class="hljs-number">11</span>)*) | ((0|101)*)*<br></code></pre></td></tr></table></figure><p>第二个正规式<strong>输出样例</strong>如下：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Reverse</span> <span class="hljs-variable">to</span> <span class="hljs-variable">PostFix</span><span class="hljs-operator">:</span> <span class="hljs-variable">a</span><span class="hljs-operator">*</span><span class="hljs-variable">b</span><span class="hljs-operator">-</span><br><span class="hljs-built_in">K</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-variable">B</span><span class="hljs-operator">,</span> <span class="hljs-built_in">C</span><span class="hljs-operator">,</span> <span class="hljs-built_in">D</span><span class="hljs-operator">,</span> <span class="hljs-built_in">E</span><span class="hljs-operator">,</span> <span class="hljs-variable">F</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">;</span> Σ<span class="hljs-operator">=</span><span class="hljs-punctuation">&#123;</span><span class="hljs-variable">a</span><span class="hljs-operator">,</span> <span class="hljs-variable">b</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">;</span> <br><span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-variable">a</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">B</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span> <span class="hljs-variable">b</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">F</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-operator">;</span> <br><span class="hljs-built_in">C</span><span class="hljs-operator">;</span> <span class="hljs-variable">Z</span><span class="hljs-operator">=</span><span class="hljs-punctuation">&#123;</span><span class="hljs-variable">F</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="实现和输出代码："><a href="#实现和输出代码：" class="headerlink" title="实现和输出代码："></a>实现和输出代码：</h4><p>输出代码以及格式如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411172859719.png" alt="image-20230411172859719"></p><p>主要的运算逻辑代码都在loadFromRegularExp（）里面。</p><h2 id="1-生成后缀形式的正则式"><a href="#1-生成后缀形式的正则式" class="headerlink" title="1. 生成后缀形式的正则式"></a>1. 生成后缀形式的正则式</h2><blockquote><p>通过正则式计算NFA，如果仅仅使用条件语句，无疑是非常困难的，如何高效地使用面向对象来解决这个复杂的问题呢，这里就可以用到算符优先级的方法来实现，也就是Thompson算法。</p></blockquote><p>说到算符优先级， 那么就不得不提到逆波兰式，机器是如何去计算那些四则运算的呢，较为常用的就是将中缀表达式转换成<strong>后缀表达式</strong>。</p><p>为什么要转换成后缀表达式呢，这样是为了让机器更容易去识别运算的优先级，像中缀表达式，由于括号，加法乘法的优先级不同，很容易导致运算顺序的不一致。</p><p>如：<code>5 + 4 * (3 - 2)</code></p><p>放在后面的式子往往会先被运算，为了更好地让电脑知道怎么去计算，我们就手动将其转化成后缀表达式</p><p>结果为：<code>5432-*+</code></p><p>这样就可以很轻松地进行运算了，因为运算的顺序<strong>已经排列好了</strong>。</p><p>这里就不展开阐述逆波兰式的思路了，接下来按照它的思路去给正规式转换成后缀形式的正规式。</p><p>这里举个正规式例子</p><blockquote><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">正规式：<span class="hljs-keyword">a</span>(b|aa)*b<br>增加连接符：<span class="hljs-keyword">a</span>-(b|<span class="hljs-keyword">a</span>-<span class="hljs-keyword">a</span>)*-b<br>转换后：abaa-|*b<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="1-1-增加连接符"><a href="#1-1-增加连接符" class="headerlink" title="1.1 增加连接符"></a>1.1 增加连接符</h4><p>看到上面转换的过程中，中间比四则运算多了一步“增加连接符”，是因为正规式当中的连接符号是不存在的，例如aa，实际上是两个字母对应的NFA的<strong>连接</strong>。</p><p>所以为了方便编写代码，我们要先将正规式处理一下</p><p>判断是否需要加连接符也很简单，源码如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230409143141169.png" alt="image-20230409143141169"></p><p>也是逐个遍历当前的正则式的字符，然后如果<strong>当前字符nowWord</strong>是’*‘或’）‘或Unicode字符（数字字母和一些特殊字母），</p><p>则判断<strong>下一个字符nextWord</strong>是否是’（‘或者UniCode字符，是则说明需要连接。)</p><h4 id="1-2-设置算符优先级"><a href="#1-2-设置算符优先级" class="headerlink" title="1.2 设置算符优先级"></a>1.2 设置算符优先级</h4><p>接着是设置算符的优先级方便运算，这里经过判断后，直接得出优先级顺序应当如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230409231056648.png" alt="image-20230409231056648"></p><p>使用map，这样方便 if 语句用<code>containsKey（）</code>判断是否是操作符</p><h4 id="1-3-for循环生成后缀表达式"><a href="#1-3-for循环生成后缀表达式" class="headerlink" title="1.3 for循环生成后缀表达式"></a>1.3 for循环生成后缀表达式</h4><p>大概思路如下</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230409233138800.png" alt="image-20230409233138800"></p><p>除了正常根据操作符优先级判断由于括号运算比较特殊，所以需要多加一个判断，</p><p>否则出现右括号的时候，右括号前面的操作符都会被优先输出（因为右括号优先级很高，保证右括号后面的算符<strong>不会被先弹出</strong>，只有等到左括号的时候才能弹出，但是这样右括号前面的就会因为优先级较低而<strong>被先弹出</strong>，这样就矛盾了）</p><p>完整的代码如下（addConnetSymbol()上面已经给出）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">infixToPostfix</span><span class="hljs-params">(String infix)</span> &#123;<br>    <span class="hljs-comment">//优先级高的入栈的时候</span><br>    Map&lt;Character, Integer&gt; precedence = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    precedence.put(<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-number">4</span>);<br>    precedence.put(<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-number">4</span>);<br>    precedence.put(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-number">2</span>);<span class="hljs-comment">//连接符</span><br>    precedence.put(<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">1</span>);<br>    precedence.put(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">0</span>);<br>    infix = infix.replaceAll(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<span class="hljs-comment">//先去掉所有空格</span><br>    infix = addConnectSymbol(infix);<span class="hljs-comment">//增加连接符</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">postfix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>    <span class="hljs-type">char</span> nowWord; <span class="hljs-comment">//nowWord是当前字符，last是当前栈顶的字符</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; infix.length();i++) &#123;<br>        nowWord = infix.charAt(i);<br>        <span class="hljs-keyword">if</span>(precedence.containsKey(nowWord))&#123;<br>            <span class="hljs-comment">//判断是否是操作符</span><br>            <span class="hljs-keyword">if</span>(operatorStack.isEmpty())<br>                operatorStack.push(nowWord);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (precedence.get(nowWord) &gt; precedence.get(operatorStack.peek())<br>             &amp;&amp; nowWord != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<span class="hljs-comment">//特殊的，如果是右括号则前面的暂不处理</span><br>                <span class="hljs-comment">//如果下一个操作符的优先级较高，</span><br>                <span class="hljs-comment">// 则要将当前栈的操作符输出直到空或者当前优先级更高</span><br>                <span class="hljs-keyword">do</span> &#123;<br>                    postfix.append(operatorStack.pop());<br>                &#125; <span class="hljs-keyword">while</span> (!operatorStack.isEmpty() &amp;&amp;<br>                        precedence.get(nowWord) &gt; precedence.get(operatorStack.peek()));<br>                <span class="hljs-comment">//这里会有可能将（）入栈，是为了方便用算符优先级表示</span><br>                operatorStack.push(nowWord);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                operatorStack.push(nowWord);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(nowWord == <span class="hljs-string">&#x27;)&#x27;</span>)<br>            &#123;<br>                <span class="hljs-comment">//清除 （ ）</span><br>                operatorStack.pop();<br>                operatorStack.pop();<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//是字母或者数字则直接输出</span><br>            postfix.append(nowWord);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!operatorStack.isEmpty())&#123;<br>        postfix.append(operatorStack.pop());<br>    &#125;<br>    <span class="hljs-comment">//去掉多余的括号并且输出</span><br>    <span class="hljs-keyword">return</span> postfix.toString().replaceAll(<span class="hljs-string">&quot;[()]&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>实例输出结果如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">RegularExpression: <br><span class="hljs-keyword">a</span> (b|<span class="hljs-keyword">a</span> <span class="hljs-keyword">a</span> )* b<br>ReversePolish:<br>abaa-|*b<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-使用栈实现运算"><a href="#2-使用栈实现运算" class="headerlink" title="2. 使用栈实现运算"></a>2. 使用栈实现运算</h2><p>首先来讲如何利用<strong>栈结构</strong>来实现运算</p><p>没错这一个部分也需要用到栈，足以见得数据结构的重要性</p><p>流程图如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230409142614061.png" alt="image-20230409142614061"></p><p>对正则式加上连接符号处理后，就可以开始识别了。</p><p>主要分为两种情况：</p><ul><li>当前字符是数字或者字母，Java当中可以使用Character类的<code>isLetterOrDigit（）</code>方法来判断</li><li>如果不是上述情况，视为操作符，然后进行switch判断</li></ul><p>在switch方法当中对不同的操作符进行不同的运算。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230410233452996.png" alt="image-20230410233452996"></p><p>如图，思路很清晰也很简单，具体的操作符运算细节这里暂不展开</p><p>for循环代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;postfix_RE.length(); ++i) &#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> postfix_RE.charAt(i);<br><span class="hljs-keyword">if</span> (Character.isLetterOrDigit(token)) &#123;<br><span class="hljs-comment">//是Unicode则生成一个NFA并且入栈</span><br>nfaStack.push(create(token));<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">NFA</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> nfaStack.pop();<span class="hljs-comment">//将栈顶取出一个元素</span><br><span class="hljs-comment">//是操作符，则出栈并且开始运算</span><br><span class="hljs-keyword">switch</span> (token) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span> -&gt; &#123;<br>nfaStack.push(n1.closure());<span class="hljs-comment">//闭包运算后再放回去</span><br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span> -&gt; &#123;<br><span class="hljs-type">NFA</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> nfaStack.pop();<br>nfaStack.push(n2.connect(n1));<br>&#125;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;|&#x27;</span> -&gt; &#123;<br><span class="hljs-type">NFA</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> nfaStack.pop();<br>nfaStack.push(n2.or(n1));<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>for循环结束后，取出当前的栈顶元素就可以获得我们需要的NFA了。</p><hr><h2 id="3-构造NFA类"><a href="#3-构造NFA类" class="headerlink" title="3. 构造NFA类"></a>3. 构造NFA类</h2><blockquote><p>在说明了主要思路之后，接下来只需要把NFA给构造出来，即用面向对象的思想，即可按我们的需要输出状态机NFA了。</p></blockquote><h4 id="3-1-如何存放和表示状态转换表"><a href="#3-1-如何存放和表示状态转换表" class="headerlink" title="3.1 如何存放和表示状态转换表"></a>3.1 如何存放和表示状态转换表</h4><p>在得到NFA后，输出如下：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">Reverse</span> <span class="hljs-variable">to</span> <span class="hljs-variable">PostFix</span><span class="hljs-operator">:</span> <span class="hljs-variable">a</span><span class="hljs-operator">*</span><span class="hljs-variable">b</span><span class="hljs-operator">-</span><br><span class="hljs-built_in">K</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-variable">B</span><span class="hljs-operator">,</span> <span class="hljs-built_in">C</span><span class="hljs-operator">,</span> <span class="hljs-built_in">D</span><span class="hljs-operator">,</span> <span class="hljs-built_in">E</span><span class="hljs-operator">,</span> <span class="hljs-variable">F</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">;</span> Σ<span class="hljs-operator">=</span><span class="hljs-punctuation">&#123;</span><span class="hljs-variable">a</span><span class="hljs-operator">,</span> <span class="hljs-variable">b</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">;</span> <br><span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-variable">a</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">B</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span> <span class="hljs-variable">b</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">F</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-built_in">D</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">E</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-operator">;</span> <br><span class="hljs-built_in">C</span><span class="hljs-operator">;</span> <span class="hljs-variable">Z</span><span class="hljs-operator">=</span><span class="hljs-punctuation">&#123;</span><span class="hljs-variable">F</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>按照输出的内容以及实际需要，DFA类的成员数据如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">String RegularExpression;<br><span class="hljs-type">int</span> startState;<br><span class="hljs-type">int</span> endState;<br><span class="hljs-type">char</span> <span class="hljs-variable">epsilon</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;ε&#x27;</span>;<br>StateCode stateCode;<br><span class="hljs-comment">// =&gt; (S,a) -&gt; &#123;A, B&#125; 可能有多个状态，所以用list</span><br>HashMap&lt;Pair, ArrayList&lt;Integer&gt;&gt; transferMat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-comment">//记录所有产生的状态如A、B等</span><br>ArrayList&lt;Integer&gt; stateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">//转移信息如a，b等小写字母或者数字</span><br>ArrayList&lt;Character&gt; msgList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><ul><li><p>RegularExpression：存储输入的正则式</p></li><li><p>statrStae、endState：表示起始和终止状态，分别对应的是输出的最后一行的两个输出，Z&#x3D;{终止状态}</p></li><li><p>stateCode：主要用于生成新的状态</p><p>注意：这里的state都是用Integer来表示，这样方便存储，</p><p>在需要输出的时候，再调用函数按自定的规则映射成相应的字母。</p></li><li><p>transferMat：存放所有的状态迁移，即输出的 f（A，a）&#x3D;{B}</p></li><li><p>stateList：对应输出当中的K里面的内容</p></li><li><p>msgList：转移条件，对应输出的 Σ&#x3D;{a, b}</p></li><li><p>Pair：用于存放单个状态转移内容，由起始状态和转移条件组成</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411001312815.png" alt="image-20230411001312815"></p></li></ul><p>有了以上的内容之后，就可以开始进行数据存储和运算了。</p><h4 id="3-2-如何进行闭包、连接等运算"><a href="#3-2-如何进行闭包、连接等运算" class="headerlink" title="3.2 如何进行闭包、连接等运算"></a>3.2 如何进行闭包、连接等运算</h4><p>刚开始去思考这些算法的时候，会觉得很抽象，思路都很难理清，代码难以下手，因此要先理清思路。</p><p><strong>画图</strong>是个很好的方法，很形象。</p><p>这里一共有四个操作，除了前面提到的连接，闭包，或运算外，还有一个用于创建新的状态。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411002912864.png" alt="image-20230411002912864"></p><p>给出具体的实现方法，并稍微进行讲解。</p><ul><li><p>create（）：</p><p>根据输入的字符创建一个新的状态机，这个状态机只需要<strong>两个节点</strong>，分别是起始和终止节点。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411002745197.png" alt="image-20230411002745197"></p><p>a就是我们的输入字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> NFA <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-type">char</span> msg)</span> &#123; <br>   <span class="hljs-comment">//a</span><br>   <span class="hljs-type">NFA</span> <span class="hljs-variable">nfa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NFA</span>(<span class="hljs-built_in">this</span>.stateCode);<br>   generateNewState(nfa);<span class="hljs-comment">//生成新状态</span><br>   nfa.msgList.add(msg);<br>   nfa.addEdge(nfa.startState, nfa.endState, msg);<span class="hljs-comment">//增加一个状态的转移到transMat当中</span><br>   <span class="hljs-keyword">return</span> nfa;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>connect（）：对应连接符 ‘-’</p><p>该方法会用到自身作为实例，以及传入一个nfa进行连接，用到四个节点的操作：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411003253115.png" alt="image-20230411003253115"></p><p>中间通过空字符ε进行连接，那几个collect方法是将两个nfa的数据拼接起来并且赋给这个新的nfa</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> NFA <span class="hljs-title function_">connect</span><span class="hljs-params">(NFA other)</span> &#123;<br>   <span class="hljs-comment">//r1 o r2 连接符：‘-’</span><br>   <span class="hljs-comment">//r1.connect(r2)</span><br>   <span class="hljs-type">NFA</span> <span class="hljs-variable">nfa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NFA</span>(<span class="hljs-built_in">this</span>.stateCode);<br>   nfa.startState = <span class="hljs-built_in">this</span>.startState;<br>   nfa.endState = other.endState;<br>   nfa.transferMat = <span class="hljs-built_in">this</span>.collectTransferMat(other.transferMat);<br>   nfa.stateList = <span class="hljs-built_in">this</span>.collectStateList(other.stateList);<br>   nfa.msgList = <span class="hljs-built_in">this</span>.collectMsgList(other.msgList);<br>    <span class="hljs-comment">//生成连接的边</span><br>   nfa.addEdge(<span class="hljs-built_in">this</span>.endState, other.startState, epsilon);<br>   <span class="hljs-keyword">return</span> nfa;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>or（）：对应或运算符 ‘ | ’</p><p>或操作需要生成四条新的连接边，并且会生成两个新的状态：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411004112698.png" alt="image-20230411004112698"></p><p>如图，分别生成两个新的状态作为起始和终止节点，并且用相应的四条边连接起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> NFA <span class="hljs-title function_">or</span><span class="hljs-params">(NFA other)</span> &#123;<br>   <span class="hljs-comment">//r1 | r2</span><br>   <span class="hljs-comment">//用法： n1.or(n2)</span><br>   <span class="hljs-type">NFA</span> <span class="hljs-variable">nfa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NFA</span>(<span class="hljs-built_in">this</span>.stateCode);<br>   <span class="hljs-comment">//分支的起点和终点</span><br>   generateNewState(nfa);<br>   <span class="hljs-comment">//将新的两个数据都添加进去</span><br>   nfa.collectTransferMat(<span class="hljs-built_in">this</span>.collectTransferMat(other.transferMat));<br>   nfa.collectStateList(<span class="hljs-built_in">this</span>.collectStateList(other.stateList));<br>   nfa.collectMsgList(<span class="hljs-built_in">this</span>.collectMsgList(other.msgList));<br>   <span class="hljs-comment">//create new epsilon edge</span><br>   nfa.addEdge(nfa.startState, <span class="hljs-built_in">this</span>.startState, epsilon);<br>   nfa.addEdge(nfa.startState, other.startState, epsilon);<br>   nfa.addEdge(other.endState, nfa.endState, epsilon);<br>   nfa.addEdge(<span class="hljs-built_in">this</span>.endState, nfa.endState, epsilon);<br>   <span class="hljs-keyword">return</span> nfa;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>closure（）闭包：对应闭包运算符： ‘ * ’</p><p>闭包只需要获取当前的nfa，并且对其进行操作，但也需要生成四条边和两个新的状态</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411005525481.png" alt="image-20230411005525481"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> NFA <span class="hljs-title function_">closure</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-comment">// a* 闭包操作</span><br>   <span class="hljs-type">NFA</span> <span class="hljs-variable">nfa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NFA</span>(<span class="hljs-built_in">this</span>.stateCode);<br>   <span class="hljs-comment">//create new start / end state</span><br>   generateNewState(nfa);<br>   nfa.collectTransferMat(<span class="hljs-built_in">this</span>.transferMat);<br>   nfa.collectStateList(<span class="hljs-built_in">this</span>.stateList);<br>   nfa.collectMsgList(<span class="hljs-built_in">this</span>.msgList);<br>   <span class="hljs-comment">//增加epsilon边缘</span><br>   nfa.addEdge(<span class="hljs-built_in">this</span>.endState,<span class="hljs-built_in">this</span>.startState,epsilon);<span class="hljs-comment">//回溯</span><br>   nfa.addEdge(nfa.startState,<span class="hljs-built_in">this</span>.startState,epsilon);<br>   nfa.addEdge(<span class="hljs-built_in">this</span>.endState,nfa.endState,epsilon);<br>   nfa.addEdge(nfa.startState, nfa.endState,epsilon);<span class="hljs-comment">//允许为空直接跳跃</span><br>   <span class="hljs-keyword">return</span> nfa;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>主要的操作和逻辑都已经介绍了，剩下一些涉及到的方法，根据方法名大致理解了操作思路即可，完整源码这里就不放出来了，可自行到GitHub查看</p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>将带空字符的NFA转换成DFA（用确定化算法生成状态表）&amp;&amp; 根据DFA识别字符串类型</title>
    <link href="/2023/04/11/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E5%A6%82%E4%BD%95%E5%B0%86%E5%B8%A6%E7%A9%BA%E5%AD%97%E7%AC%A6%E7%9A%84NFA%E8%BD%AC%E6%8D%A2%E6%88%90DFA/"/>
    <url>/2023/04/11/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E5%A6%82%E4%BD%95%E5%B0%86%E5%B8%A6%E7%A9%BA%E5%AD%97%E7%AC%A6%E7%9A%84NFA%E8%BD%AC%E6%8D%A2%E6%88%90DFA/</url>
    
    <content type="html"><![CDATA[<h1 id="将带空字符的NFA转换成DFA（用确定化算法生成状态表）-根据DFA识别字符串类型"><a href="#将带空字符的NFA转换成DFA（用确定化算法生成状态表）-根据DFA识别字符串类型" class="headerlink" title="将带空字符的NFA转换成DFA（用确定化算法生成状态表）&amp;&amp;根据DFA识别字符串类型"></a>将带空字符的NFA转换成DFA（用确定化算法生成状态表）&amp;&amp;根据DFA识别字符串类型</h1><p>[TOC]</p><blockquote><p><strong>前言</strong>：这里会用到之前写的文章当中的代码，例如生成的DFA类，是继承于NFA类的，在其之上增加了<strong>状态转移表</strong>等数据，用于表示DFA</p><p>说明一下文件的结构：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411085818630.png" alt="image-20230411085818630"></p><p>Github的源码地址如下<a href="https://github.com/Cheesheep/CompilingTheory-Exp2-LexicalAnalysiz">https://github.com/Cheesheep/CompilingTheory-Exp2-LexicalAnalysiz</a></p><p>代码文件位于part03文件夹当中</p></blockquote><p><strong>程序入口</strong>：</p><p>运行createDFA的类，会去到REFIle类当中处理文件，并且在该类当中生成NFA，再继续对NFA进行处理，从而转换成DFA</p><p>因此要看懂代码的话，建议先去看之前正则式转换成NFA的文章，阅读本篇文章就会更加容易</p><p><strong>输入样例</strong>（正规式以及对应生成的NFA）：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">正规式：<br><span class="hljs-variable">a</span><span class="hljs-punctuation">(</span><span class="hljs-variable">b</span><span class="hljs-operator">|</span><span class="hljs-variable">aa</span><span class="hljs-punctuation">)</span><span class="hljs-operator">*</span><span class="hljs-variable">b</span><br>对应的<span class="hljs-variable">NFA</span>：<br><span class="hljs-built_in">K</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-variable">B</span><span class="hljs-operator">,</span> <span class="hljs-built_in">C</span><span class="hljs-operator">,</span> <span class="hljs-built_in">D</span><span class="hljs-operator">,</span> <span class="hljs-built_in">E</span><span class="hljs-operator">,</span> <span class="hljs-variable">F</span><span class="hljs-operator">,</span> <span class="hljs-variable">G</span><span class="hljs-operator">,</span> <span class="hljs-variable">H</span><span class="hljs-operator">,</span> <span class="hljs-built_in">I</span><span class="hljs-operator">,</span> <span class="hljs-variable">J</span><span class="hljs-operator">,</span> <span class="hljs-built_in">K</span><span class="hljs-operator">,</span> <span class="hljs-variable">L</span><span class="hljs-operator">,</span> <span class="hljs-variable">M</span><span class="hljs-operator">,</span> <span class="hljs-built_in">N</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">;</span> Σ<span class="hljs-operator">=</span><span class="hljs-punctuation">&#123;</span><span class="hljs-variable">a</span><span class="hljs-operator">,</span> <span class="hljs-variable">b</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">;</span> <br><span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">L</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">M</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">A</span><span class="hljs-operator">,</span> <span class="hljs-variable">a</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">B</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span> <span class="hljs-variable">b</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">D</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">E</span><span class="hljs-operator">,</span> <span class="hljs-variable">a</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">F</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">G</span><span class="hljs-operator">,</span> <span class="hljs-variable">a</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">H</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">M</span><span class="hljs-operator">,</span> <span class="hljs-variable">b</span><span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">N</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <br><span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">B</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">K</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">D</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">J</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">F</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">G</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">H</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-variable">J</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">I</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">C</span><span class="hljs-operator">,</span> <span class="hljs-built_in">E</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-variable">J</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">I</span><span class="hljs-operator">,</span> <span class="hljs-variable">L</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <br><span class="hljs-variable">f</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">K</span><span class="hljs-operator">,</span> ε<span class="hljs-punctuation">)</span><span class="hljs-operator">=</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">I</span><span class="hljs-operator">,</span> <span class="hljs-variable">L</span><span class="hljs-punctuation">&#125;</span><span class="hljs-operator">,</span> <span class="hljs-operator">;</span> <br><span class="hljs-variable">A</span><span class="hljs-operator">;</span> <span class="hljs-variable">Z</span><span class="hljs-operator">=</span><span class="hljs-punctuation">&#123;</span><span class="hljs-built_in">N</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>看着很多状态很复杂是吧，我们将对应的状态机画出来，看着就简单很多了</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411093305066.png" alt="image-20230411093305066"></p><p><strong>输出样例</strong>：</p><p>对应的DFA输出如下：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">K= </span><span class="hljs-template-variable">&#123;A, B, F, N, O&#125;</span><span class="language-xml">; Σ=</span><span class="hljs-template-variable">&#123;a, b&#125;</span><span class="language-xml">; </span><br><span class="language-xml">f(O, b)= </span><span class="hljs-template-variable">&#123;O&#125;</span><span class="language-xml">, f(A, a)= </span><span class="hljs-template-variable">&#123;B&#125;</span><span class="language-xml">, f(B, a)= </span><span class="hljs-template-variable">&#123;F&#125;</span><span class="language-xml">, f(B, b)= </span><span class="hljs-template-variable">&#123;O&#125;</span><span class="language-xml">, f(F, a)= </span><span class="hljs-template-variable">&#123;B&#125;</span><span class="language-xml">, f(O, a)= </span><span class="hljs-template-variable">&#123;F&#125;</span><span class="language-xml">, </span><br><span class="language-xml">; </span><br><span class="language-xml">A; Z=</span><span class="hljs-template-variable">&#123;N, O, &#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411172107224.png" alt="image-20230411172107224"></p><p>可以看到初始状态仍然是A，但是结束状态变成了O，而且N已经不见了，</p><p>这里是因为O是一个新的状态，同时可以表示到达<strong>B和F的状态</strong>，后面会讲到如何生成</p><h4 id="实现和输出代码主要用到的函数："><a href="#实现和输出代码主要用到的函数：" class="headerlink" title="实现和输出代码主要用到的函数："></a>实现和输出代码主要用到的函数：</h4><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411173312164.png" alt="image-20230411173312164"></p><p>在讲解<strong>正规式生成NFA</strong>那篇文章当中已经介绍过loadFromRegularExp（）的代码</p><p>因此这里只讲removeEpsilon（）和NFAToDFA（）的思路以及代码</p><p>NFAToDFA（）的调用代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">NFAToDFA</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//使用确定化算法将NFA转换成DFA</span><br>    dfa = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DFA</span>(nfa);<br>    dfa.generateStateFormat(nfa);<span class="hljs-comment">//生成状态迁移表</span><br>    dfa.showStateFormat();<span class="hljs-comment">//打印到控制台</span><br>    dfa.addFormatDataToDFA();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-NFA去除空字符（仍可能为NFA）"><a href="#1-NFA去除空字符（仍可能为NFA）" class="headerlink" title="1. NFA去除空字符（仍可能为NFA）"></a>1. NFA去除空字符（仍可能为NFA）</h2><blockquote><p> 为了让更好地转换成DFA，我们需要将NFA当中的 ε 转移去掉，让状态图清晰简洁一点。</p><p>注意，有的NFA去除空字符后，可能就成为DFA了，但也有的还是NFA。</p><p>例如上面给出的例子，会发现B状态输入b的时候，会回到B本身或者到达F终态。</p></blockquote><h4 id="1-1-算法思路："><a href="#1-1-算法思路：" class="headerlink" title="1.1 算法思路："></a>1.1 算法思路：</h4><p>思路是很简单的</p><p>两个由空字符连接起来的状态可以被简化成一个状态，如图</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411094347218.png" alt="image-20230411094347218"></p><p>对应我们的代码，也就是将 f（A，ε)  &#x3D; B 当中的B替换成A</p><p>伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">for</span>（遍历所有状态迁移信息）&#123;<br>    <span class="hljs-keyword">if</span>（当前转移信息为ε）&#123;<br>        src = 当前的出发状态;<br>        dst = 当前目标状态;<br>        移除这条状态信息;<br>        <span class="hljs-keyword">for</span>(遍历剩下的状态迁移信息)&#123;<br>            <span class="hljs-keyword">if</span>（当前状态==src）<br>                当前状态=src;<br>            <span class="hljs-keyword">if</span>（目标状态==dst）<br>                当前状态=dst;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该实现方法我们仍然放在类NFA当中，为<strong>removeEpsilon（）</strong>，因为去除epsilon后可能仍然是NFA，所以就放在该类中</p><h4 id="1-2-实现效果："><a href="#1-2-实现效果：" class="headerlink" title="1.2 实现效果："></a>1.2 实现效果：</h4><p>成功将空字符去除后，状态机如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411153738592.png" alt="image-20230411153738592"></p><p>看到图片当中仍有不确定的状态转移，说明还是NFA</p><h4 id="1-3-注意事项："><a href="#1-3-注意事项：" class="headerlink" title="1.3 注意事项："></a>1.3 注意事项：</h4><ul><li><p><strong>起始</strong>和<strong>终止</strong>状态可能发生变化：</p><p>在替代掉该带有空转移的目标状态之前，</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411161409879.png" alt="image-20230411161409879"></p></li><li><p>最后对替换后的目标状态列表进行<strong>去重</strong></p><p>多个状态可能被替换成同一个状态</p></li></ul><hr><h2 id="2-确定化算法"><a href="#2-确定化算法" class="headerlink" title="2.确定化算法"></a>2.确定化算法</h2><h4 id="2-1-根据NFA写出状态转移表"><a href="#2-1-根据NFA写出状态转移表" class="headerlink" title="2.1 根据NFA写出状态转移表"></a>2.1 根据NFA写出状态转移表</h4><p>将其去重之后就可以进行确定化算法的实现，</p><p>主要的思路就是根据当前的NFA创建一个<strong>状态表</strong>：</p><p>还是以之前的那个正规式作为例子：a（b|aa）*b</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411153738592.png" alt="image-20230411153738592"></p><p>当前状态机如上图，得到如下状态表，生成思路并不难：</p><table><thead><tr><th>当前状态</th><th>a</th><th>b</th></tr></thead><tbody><tr><td>A</td><td>B</td><td></td></tr><tr><td>B</td><td>F</td><td>B、F</td></tr><tr><td>N</td><td></td><td></td></tr><tr><td>F</td><td>B</td><td></td></tr><tr><td>B、F</td><td>F</td><td>B、F</td></tr></tbody></table><p>这里看到B、F是一个叠加状态，我们可以用一个新的符号来代表这个状态。由此可以生成一个新的状态机</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411172107224.png" alt="image-20230411172107224"></p><p>如上图状态机，这样每个状态的每个输出都有唯一的对应的目标状态，成功地从NFA转换成了DFA。</p><h4 id="2-2-DFA类的实现以及代码创建状态表（最难的部分）"><a href="#2-2-DFA类的实现以及代码创建状态表（最难的部分）" class="headerlink" title="2.2 DFA类的实现以及代码创建状态表（最难的部分）"></a>2.2 DFA类的实现以及代码创建状态表（最难的部分）</h4><p>为了更好地面向对象，提高代码复用性以及封装性，DFA会继承于NFA类，并且新增一些属于DFA的成员函数和成员数据。</p><p>同时这里的代码量比较大，变量也很多，有很多要注意的操作细节，个人认为由于能力问题写的太过复杂了，导致越写越难，如果有更好更简单地思路是非常正常的。</p><p>以下为DFA的<strong>成员属性</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DFA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">NFA</span>&#123;<br>    <span class="hljs-comment">//msgList作为行头，</span><br>    <span class="hljs-comment">// stateFormat 的 key 对应的状态作为列头</span><br>    Map&lt; Integer,ArrayList&lt;HashSet&lt;Integer&gt;&gt;&gt; stateFormat = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//该表用来映射由于多状态而新产生的状态</span><br>    Map&lt;Integer,HashSet&lt;Integer&gt;&gt; newStateMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//用于存放在新状态当中产生的更新的状态</span><br>    Map&lt;Integer,HashSet&lt;Integer&gt;&gt; newerStateMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//用于存放所有已经产存在的状态</span><br>    Map&lt;Integer,HashSet&lt;Integer&gt;&gt; saveAllStateMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-comment">//主要作为一个变量名称方便使用</span><br>    ArrayList&lt;HashSet&lt;Integer&gt;&gt; theFormat;<span class="hljs-comment">//DFA会有多个终止状态</span><br><br>    ArrayList&lt;Integer&gt; endState = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br> &#125;<br></code></pre></td></tr></table></figure><ul><li><strong>stateFormat</strong>：这里就是存放的二维表格，用Map是为了方便映射状态，key存放的实际就是状态表的行头。</li><li>newStateMap：用于存放新的状态，例如{ B、F }生成的新状态存放在key当中，B、F一起存放在该map的Value当中.</li><li>newerStateMap：在生成新的状态的数据的时候，可能会进一步又产生一个新的状态，因此用多一个Map来存放，方便区分，这个概念可能没那么好懂，后面讲解具体实现的时候会再次展开来讲。</li><li>endState：这里覆盖了NFA当中对应的endState，是因为DFA的结束状态往往不止一个。</li></ul><p><strong>主要成员方法</strong>介绍：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">generateStateFormat(NFA nfa);<br>changeOldStates();<br>generateNewStateFormat();<br>addFormatDataTODFA();<span class="hljs-comment">//将表的数据放入DFA的迁移状态当中，例如那些f（A，a） = B</span><br><br></code></pre></td></tr></table></figure><ul><li>changeOldStates：将多状态改成对应的新状态，如{B，F} 改成 O</li><li>generateNewStateFormat（）：如果有新的状态，则需要增加表的内容。</li></ul><p>生成<strong>状态表流程图</strong>如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411195905471.png" alt="image-20230411195905471"></p><p>流程来说是比较简单的，但是具体的代码实现起来有较多需要注意的点。</p><h4 id="2-2-1-generateStateFormat（）：增加现有状态迁移信息到表当中。"><a href="#2-2-1-generateStateFormat（）：增加现有状态迁移信息到表当中。" class="headerlink" title="2.2.1 generateStateFormat（）：增加现有状态迁移信息到表当中。"></a>2.2.1 generateStateFormat（）：增加现有状态迁移信息到表当中。</h4><p>具体代码如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230411200933063.png" alt="image-20230411200933063"></p><p><strong>关注细节</strong>：</p><ul><li><p>for循环的是transferMat，是NFA当中已经构建好的状态迁移信息</p></li><li><p>saveAllStateMap的作用是用于存放所有的状态以及映射的旧状态</p></li><li><p>当size&#x3D;&#x3D;2的时候，说明当前状态迁移产生的不止一个状态，因此要用</p><p>新的状态来表示这个多状态。</p></li><li><p>当需要增添新的行的时候，就进入到generateNewStateFormat（）</p></li></ul><h4 id="2-3-generateNewStateFormat（）生成新状态"><a href="#2-3-generateNewStateFormat（）生成新状态" class="headerlink" title="2.3 generateNewStateFormat（）生成新状态"></a>2.3 generateNewStateFormat（）生成新状态</h4><p>代码流程如下：</p><p>由于代码较长，分几步来讲解该函数</p><ol><li><p>遍历所有的新状态，然后新增行</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230412002125427.png" alt="image-20230412002125427"></p></li><li><p>填写行数据内容</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230412002713154.png" alt="image-20230412002713154"></p></li><li><p>判断是否需要递归</p><p>最后判断newerStateMap里面的数据是否为空，否说明这次新增表格数据的时候又产生了新的目标状态组合，</p><p>因此需要递归，再次增加表的数据。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230412002915491.png" alt="image-20230412002915491"></p></li></ol><p>该函数与generateStateFormat还是会有比较大的区别，要注意的细节也更加多。</p><p><strong>注意事项</strong>：</p><ul><li>在该函数当中，产生新的状态时要存放到<code>newerStateMap</code>当中，而不是<code>newStateMap</code>，注意区分</li><li>该函数是可以进行递归调用的，因为可能不断产生新的状态。</li></ul><h4 id="最终结果示例如下："><a href="#最终结果示例如下：" class="headerlink" title="最终结果示例如下："></a>最终结果示例如下：</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less">输入：<br><span class="hljs-selector-tag">a</span>(b|aa)*<span class="hljs-selector-tag">b</span><br><span class="hljs-selector-tag">a</span>*<span class="hljs-selector-tag">b</span><br><span class="hljs-number">0</span>(<span class="hljs-number">1</span>|<span class="hljs-number">00</span>)<br><span class="hljs-selector-tag">a</span>*<span class="hljs-selector-tag">b</span>(b|(ab)*c)<span class="hljs-selector-tag">ca</span><br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">输出：</span><br><span class="language-xml">the 1 DFA: </span><br><span class="language-xml">K= </span><span class="hljs-template-variable">&#123;A, B, F, N, O&#125;</span><span class="language-xml">; Σ=</span><span class="hljs-template-variable">&#123;a, b&#125;</span><span class="language-xml">; </span><br><span class="language-xml">f(O, b)= </span><span class="hljs-template-variable">&#123;O&#125;</span><span class="language-xml">, f(A, a)= </span><span class="hljs-template-variable">&#123;B&#125;</span><span class="language-xml">, f(B, a)= </span><span class="hljs-template-variable">&#123;F&#125;</span><span class="language-xml">, f(B, b)= </span><span class="hljs-template-variable">&#123;O&#125;</span><span class="language-xml">, f(F, a)= </span><span class="hljs-template-variable">&#123;B&#125;</span><span class="language-xml">, f(O, a)= </span><span class="hljs-template-variable">&#123;F&#125;</span><span class="language-xml">, </span><br><span class="language-xml">; </span><br><span class="language-xml">A; Z=</span><span class="hljs-template-variable">&#123;N, O, &#125;</span><span class="language-xml"></span><br><span class="language-xml"> ----------------</span><br><span class="language-xml">the 2 DFA: </span><br><span class="language-xml">K= </span><span class="hljs-template-variable">&#123;C, F&#125;</span><span class="language-xml">; Σ=</span><span class="hljs-template-variable">&#123;a, b&#125;</span><span class="language-xml">; </span><br><span class="language-xml">f(C, a)= </span><span class="hljs-template-variable">&#123;C&#125;</span><span class="language-xml">, f(C, b)= </span><span class="hljs-template-variable">&#123;F&#125;</span><span class="language-xml">, ; </span><br><span class="language-xml">C; Z=</span><span class="hljs-template-variable">&#123;F, &#125;</span><span class="language-xml"></span><br><span class="language-xml"> ----------------</span><br><span class="language-xml">the 3 DFA: </span><br><span class="language-xml">K= </span><span class="hljs-template-variable">&#123;A, B, F, H&#125;</span><span class="language-xml">; Σ=</span><span class="hljs-template-variable">&#123;0, 1&#125;</span><span class="language-xml">; </span><br><span class="language-xml">f(A, 0)= </span><span class="hljs-template-variable">&#123;B&#125;</span><span class="language-xml">, f(B, 0)= </span><span class="hljs-template-variable">&#123;F&#125;</span><span class="language-xml">, f(B, 1)= </span><span class="hljs-template-variable">&#123;H&#125;</span><span class="language-xml">, f(F, 0)= </span><span class="hljs-template-variable">&#123;H&#125;</span><span class="language-xml">, ; </span><br><span class="language-xml">A; Z=</span><span class="hljs-template-variable">&#123;H, &#125;</span><span class="language-xml"></span><br><span class="language-xml"> ----------------</span><br><span class="language-xml">the 4 DFA: </span><br><span class="language-xml">K= </span><span class="hljs-template-variable">&#123;C, F, H, J, T, V&#125;</span><span class="language-xml">; Σ=</span><span class="hljs-template-variable">&#123;a, b, c&#125;</span><span class="language-xml">; </span><br><span class="language-xml">f(C, a)= </span><span class="hljs-template-variable">&#123;C&#125;</span><span class="language-xml">, f(C, b)= </span><span class="hljs-template-variable">&#123;F&#125;</span><span class="language-xml">, f(T, a)= </span><span class="hljs-template-variable">&#123;V&#125;</span><span class="language-xml">, f(F, a)= </span><span class="hljs-template-variable">&#123;J&#125;</span><span class="language-xml">, f(F, b)= </span><span class="hljs-template-variable">&#123;H&#125;</span><span class="language-xml">, f(F, c)= </span><span class="hljs-template-variable">&#123;H&#125;</span><span class="language-xml">, </span><br><span class="language-xml">f(H, c)= </span><span class="hljs-template-variable">&#123;T&#125;</span><span class="language-xml">, f(J, b)= </span><span class="hljs-template-variable">&#123;F&#125;</span><span class="language-xml">, ; </span><br><span class="language-xml">C; Z=</span><span class="hljs-template-variable">&#123;V, &#125;</span><span class="language-xml"></span><br><span class="language-xml"> ----------------</span><br></code></pre></td></tr></table></figure><hr><h2 id="3-根据正则式生成的DFA识别字符串"><a href="#3-根据正则式生成的DFA识别字符串" class="headerlink" title="3. 根据正则式生成的DFA识别字符串"></a>3. 根据正则式生成的DFA识别字符串</h2><blockquote><p>输入：一个正规式文件和一个字符串文件</p><p>输出：判断字符串文件中的每个字符串，能否被正规式对应的DFA所识别</p><p>其次，再给每个正规式增加一个类别，识别到给定字符串符合某个特定正规式时，输出该类别。</p><p>示例：如果输入</p><p>a*  Type1</p><p>b  Type2</p><p>那么对字符串aaa输出：aaa，Type1</p></blockquote><p>在前面的实验当中，我们已经成功根据正规式生成了对应的DFA了，因此现在可以直接读入字符串进行识别。</p><p>在这里就不去讲述如何读写文件了，直接讲解需要的功能：根据DFA识别字符串</p><p>用到的思路是根据生成的状态转移表stateFormat，就可以很容易的完成字符串识别了。</p><table><thead><tr><th>当前状态</th><th>a</th><th>b</th></tr></thead><tbody><tr><td>A</td><td>B</td><td></td></tr><tr><td>B</td><td>F</td><td>B、F</td></tr><tr><td>N</td><td></td><td></td></tr><tr><td>F</td><td>B</td><td></td></tr><tr><td>B、F</td><td>F</td><td>B、F</td></tr></tbody></table><p>又是这个例子，每次循环当中读入一个<strong>字符</strong>，根据当前字符可以获取下一个要到达的状态。</p><p>例如从A开始，读入aaab，第一个字符是a，则下一个状态为B</p><p>第二个字符还是a，则下一个状态是F，以此类推……</p><p>逻辑代码如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230412010059943.png" alt="image-20230412010059943"></p><h4 id="最终结果示例如下：-1"><a href="#最终结果示例如下：-1" class="headerlink" title="最终结果示例如下："></a>最终结果示例如下：</h4><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs coq">正则式：<br>Type2: a*b<br>Type3: <span class="hljs-number">0</span>(<span class="hljs-number">1</span>|<span class="hljs-type">00</span>)<br>Type4: a*b(b|<span class="hljs-type">(ab</span>)*c)ca<br>Type5: a*b(b|<span class="hljs-type">(ab</span>)*c)*ca<br>Type6: a*b(b|<span class="hljs-type">(ab</span>)*c)|<span class="hljs-type">ca</span><br>Type7: a*b(b|<span class="hljs-type">(ab</span>)*c|<span class="hljs-type">ca</span>)<br>Type8: a*b(b|<span class="hljs-type">(db</span>)*c|<span class="hljs-type">css</span>*e)<br>Type9: ((<span class="hljs-number">0</span>|<span class="hljs-type">1</span>)(<span class="hljs-number">010</span>|<span class="hljs-type">11</span>)*) | <span class="hljs-type">((0</span>|<span class="hljs-type">101</span>)*)*<br>Type1: a(b|<span class="hljs-type">aa</span>)*b<br>----------<br>字符串  类别 ：<br>aaab  Type2  Type1<br>aab  Type2<br>abaabb  Type1<br>aaabababcbca  Type5<br><span class="hljs-number">000</span>  Type3  Type9<br><span class="hljs-number">00</span>  Type9<br><span class="hljs-number">0101000</span>  Type9<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《软工实训》冰箱项目-前四周迭代</title>
    <link href="/2023/03/16/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD/%E3%80%8A%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD%E3%80%8B%E5%86%B0%E7%AE%B1%E9%A1%B9%E7%9B%AE-%E5%89%8D%E5%9B%9B%E5%91%A8%E8%BF%AD%E4%BB%A3/"/>
    <url>/2023/03/16/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD/%E3%80%8A%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%AE%AD%E3%80%8B%E5%86%B0%E7%AE%B1%E9%A1%B9%E7%9B%AE-%E5%89%8D%E5%9B%9B%E5%91%A8%E8%BF%AD%E4%BB%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="《软工实训》冰箱项目-前四周迭代"><a href="#《软工实训》冰箱项目-前四周迭代" class="headerlink" title="《软工实训》冰箱项目-前四周迭代"></a>《软工实训》冰箱项目-前四周迭代</h1><blockquote><p>用于记录每次大迭代的时候，前后端都有什么的内容，先从简单易懂的前端开始吧</p></blockquote><h2 id="需求设计"><a href="#需求设计" class="headerlink" title="需求设计"></a>需求设计</h2><h4 id="1-迭代需求定义："><a href="#1-迭代需求定义：" class="headerlink" title="1. 迭代需求定义："></a>1. 迭代需求定义：</h4><p><strong>工具</strong>：TAPD（腾讯提供的一个非常多功能的共享平台）</p><p>链接：<a href="https://www.tapd.cn/59680053/prong/iterations/card_view?q=805af3b26cd80b3c11ef6aaabb8cc5b2">【冰箱物资管理】小程序 V1.0.0-迭代-春_2023_冰箱物资管理-TAPD平台</a></p><ul><li><p>第一次迭代</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230316095926417.png" alt="image-20230316095926417"></p></li><li><p>第二次</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230316095951202.png" alt="image-20230316095951202"></p></li></ul><h4 id="2-页面设计"><a href="#2-页面设计" class="headerlink" title="2. 页面设计"></a>2. 页面设计</h4><p><strong>使用工具</strong>：墨刀（墨刀的合作共享是比较方便的）</p><p>分享链接：<a href="https://modao.cc/app/F1G9o37Nrqh8unLKl1BIsS">https://modao.cc/app/F1G9o37Nrqh8unLKl1BIsS</a> #物资列表-分享  </p><ul><li>首页如下：</li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230316095400157.png" alt="image-20230316095400157"></p><ul><li><p>-》冷藏室</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230316095551547.png" alt="image-20230316095551547"></p></li></ul><h4 id="3-数据库实现："><a href="#3-数据库实现：" class="headerlink" title="3.数据库实现："></a>3.数据库实现：</h4><p>可视化工具：dbdiagram.io（网站）、PDManer（软件）</p><p>链接：<a href="https://dbdiagram.io/home">dbdiagram.io - Database Relationship Diagrams Design Tool</a></p><ul><li><p>PDManer数据库关系图</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230316100259572.png" alt="image-20230316100259572"></p></li></ul><h4 id="4-接口设计"><a href="#4-接口设计" class="headerlink" title="4. 接口设计"></a>4. 接口设计</h4><p><strong>工具</strong>：Apifox（软件）、PostMan等等</p><p>注：使用apifox若不下载客户端，则无法本地进行测试，建议还是下载客户端</p><ul><li><p>大致如图：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230316100515081.png" alt="image-20230316100515081"></p></li></ul><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h4 id="1-前端实现"><a href="#1-前端实现" class="headerlink" title="1. 前端实现"></a>1. 前端实现</h4><ul><li><p>工具：微信开发者、HBuider</p></li><li><p>框架：vue，uniapp（这个暂时不知道）</p></li></ul><h4 id="2-后端接口实现（重点）"><a href="#2-后端接口实现（重点）" class="headerlink" title="2. 后端接口实现（重点）"></a>2. 后端接口实现（重点）</h4><blockquote><p>编辑器工具：IDEA</p><p>语言：Java1.8 、 Java17</p><p>框架：Springboot</p></blockquote><h5 id="2-1-springboot文件架构"><a href="#2-1-springboot文件架构" class="headerlink" title="2.1 springboot文件架构"></a>2.1 springboot文件架构</h5><p>重要的文件有src，和pom.xml</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230316113851596.png" alt="image-20230316113851596"></p><p>需要修改的配置文件有pom和application.yml，这个yml和旧版的properties是差不多的。</p><h5 id="2-2-pom需要的外部依赖（数据库，web，热部署，mysql）"><a href="#2-2-pom需要的外部依赖（数据库，web，热部署，mysql）" class="headerlink" title="2.2 pom需要的外部依赖（数据库，web，热部署，mysql）"></a>2.2 pom需要的外部依赖（数据库，web，热部署，mysql）</h5><p>这里在之前写的springboot初学的md文件里面也有</p><h5 id="2-3-controller层"><a href="#2-3-controller层" class="headerlink" title="2.3  controller层"></a>2.3  controller层</h5><h5 id="2-4-service和Dao层"><a href="#2-4-service和Dao层" class="headerlink" title="2.4 service和Dao层"></a>2.4 service和Dao层</h5><h5 id="2-5-拦截器（用于登录注册）"><a href="#2-5-拦截器（用于登录注册）" class="headerlink" title="2.5 拦截器（用于登录注册）"></a>2.5 拦截器（用于登录注册）</h5>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
      <category>软工实训</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot快速上手</title>
    <link href="/2023/03/04/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/Springboot%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <url>/2023/03/04/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/Springboot%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Springboot快速上手"><a href="#Springboot快速上手" class="headerlink" title="Springboot快速上手"></a>Springboot快速上手</h1><blockquote><p>该部分用来记录一下大致的方法以及一些注意的细节知识点</p><p>一些原理和底层（例如Spring，servlet等传统方式就不讲了）</p></blockquote><h2 id="1-helloSpring"><a href="#1-helloSpring" class="headerlink" title="1. helloSpring"></a>1. helloSpring</h2><h3 id="1-1-Springboot项目创建以及基础架构"><a href="#1-1-Springboot项目创建以及基础架构" class="headerlink" title="1.1 Springboot项目创建以及基础架构"></a>1.1 Springboot项目创建以及基础架构</h3><p>使用IDEA进行项目的创建</p><p>需要使用IDEA的<strong>专业版</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304153915860.png" alt="image-20230304153915860"></p><p>要注意选择<strong>Maven</strong>架构和java 8 的版本</p><p>点击下一步</p><p>这里要注意选择2.x.x的版本，否则可能会出现JDK不兼容的情况</p><p>开发web项目的话，一般只用勾选这个Spring Web的依赖就可以了</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304154005717.png" alt="image-20230304154005717"></p><p><strong>文件架构</strong>：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304154149252.png" alt="image-20230304154149252"></p><p><strong>main</strong>：用来编写代码的主要文件夹</p><p><strong>resources</strong>：一般类似HTML之类的静态资源放在static当中</p><p>test：测试代码</p><p><strong>application.properties</strong>（重要配置文件）:一些配置文件的编写</p><p>例如可以配置devtools（用于热部署代码）</p><p><strong>pom.xml</strong>（重要） ：maven架构的文件，里面有该项目的各种参数</p><p>可以往里面添加各种依赖包，IDEA会帮我们自动导入已有的或者下载。</p><p>例如这里可以导入devpools热部署，连接数据库的时候也需要导入相关的依赖</p><h3 id="1-2-导入外部依赖"><a href="#1-2-导入外部依赖" class="headerlink" title="1.2 导入外部依赖"></a>1.2 导入外部依赖</h3><p><strong>导入devtools热部署工具</strong>：</p><ol><li><p>在pom.xml当中导入相关依赖，未安装过的可以等待自动下载</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304155015314.png" alt="image-20230304155015314"></p></li><li><p>在application属性文件当中添加配置</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304155156307.png" alt="image-20230304155156307"></p></li></ol><h3 id="1-3-简单的post以及get请求（Controller）"><a href="#1-3-简单的post以及get请求（Controller）" class="headerlink" title="1.3 简单的post以及get请求（Controller）"></a>1.3 简单的post以及get请求（Controller）</h3><p><strong>Mapping实现基本的get、post方法请求</strong>：</p><ul><li><p>创建一个controller软件包</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304160309209.png" alt="image-20230304160309209"></p></li><li><p>在要控制的类上面加上注解<code>@RestController</code></p></li><li><p>GetMapping加上地址（可加<strong>通配符</strong>）实现get方法</p></li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304155425222.png" alt="image-20230304155425222"></p><ul><li><p><code>RequestMapping</code>实现post或get方法</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304160418966.png" alt="image-20230304160418966"></p><p>这里最后一个postTest3可以用<strong>User类</strong>来接收json格式的数据</p><p>User类一般建议名字与传过来的数据要一致</p></li></ul><h3 id="1-4-文件上传"><a href="#1-4-文件上传" class="headerlink" title="1.4 文件上传"></a>1.4 文件上传</h3><p>接收文件（例如图片）可以用到<code>MultipartFile</code>实现，并且用HttpServletRequest来获取要保存的路径（以后是保存在云端）</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304161046400.png" alt="image-20230304161046400"></p><p>使用post方法接收数据</p><ul><li>接口测试方法如下</li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304161136216.png" alt="image-20230304161136216"></p><ul><li><p>path参数后面用来存储文件</p><p>通过request来获取服务器自带的地址，不要将路径写死</p></li><li><p>在<strong>application</strong>当中调整<strong>最大可上传</strong>内存</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304161848029.png" alt="image-20230304161848029"></p></li><li><p>存储文件的方法如下：</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304161305422.png" alt="image-20230304161305422"></p></li></ul><h3 id="1-5-注册拦截器"><a href="#1-5-注册拦截器" class="headerlink" title="1.5 注册拦截器"></a>1.5 注册拦截器</h3><blockquote><p>注册拦截器需要创建两个文件</p></blockquote><p>拦截器作用：在访问该路径下面的时候，就会<strong>触发拦截器</strong>，可以写相应的需求代码</p><ul><li><p>首先要在对应的类注解SpringBootApplication<img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304161405456.png" alt="image-20230304161405456"></p></li><li><p>在config设置文件当中创建一个新的类注解@Configuration</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304161625940.png" alt="image-20230304161625940"></p></li></ul><hr><h2 id="2-MyBatis连接数据库，前后端连接"><a href="#2-MyBatis连接数据库，前后端连接" class="headerlink" title="2. MyBatis连接数据库，前后端连接"></a>2. MyBatis连接数据库，前后端连接</h2><blockquote><p>本章主要涉及到数据库连接，以及mybatis和mybatisPlus</p><p>对于比较简单的sql语句可以直接使用mybatisPlus</p><p>也可以根据配置XML文件来修改默认的sql语句，不过这里没有学</p></blockquote><h3 id="2-1-配置相关依赖"><a href="#2-1-配置相关依赖" class="headerlink" title="2.1 配置相关依赖"></a>2.1 配置相关依赖</h3><p>除了之前的热部署工具外，还要新增三个依赖</p><p>分别是：</p><ul><li>mybatisPlus依赖（可以直接用mybatis，因为是向下兼容的）</li><li>mysql驱动依赖</li><li>数据连接池druid</li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304215241011.png" alt="image-20230304215241011"></p><p>如上图所示</p><h3 id="2-2-application增加用于连接数据库的参数"><a href="#2-2-application增加用于连接数据库的参数" class="headerlink" title="2.2 application增加用于连接数据库的参数"></a>2.2 application增加用于连接数据库的参数</h3><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304215807430.png" alt="image-20230304215807430"></p><ul><li>这里需要的配置参数比较多</li><li>重点看第三条，springtest01是数据库的名称（注意不是表）</li><li>然后要写好密码和账号</li><li>最后一个是mybatis的，忘了做什么的。</li></ul><p>配置好以上，并且自己本地带有一个数据库之后（这里我是用wampserver自带的MySQL）</p><h3 id="2-3-如何使用Mapper类"><a href="#2-3-如何使用Mapper类" class="headerlink" title="2.3 如何使用Mapper类"></a>2.3 如何使用Mapper类</h3><p>首先看看代码的架构</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304220100357.png" alt="image-20230304220100357"></p><p>相较于上一个项目的文件架构，这里多了一个<strong>mapper</strong>和<strong>MpdemoApplication</strong></p><ul><li>mapper是用于编写查找数据库的函数的，这里就是使用mybatis的地方</li><li>用controller调用mapper里面的类的方法实现数据库的CRUD</li><li>用MpdempApplication来实现扫描Mapper类，以便可以运行mapper类。</li></ul><p><strong>数据库信息：</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">数据库：springtest01<br>该库下的两个数据表:user,orders<br><br>user数据<br><span class="hljs-bullet">- </span>id<br><span class="hljs-bullet">- </span>username<br><span class="hljs-bullet">- </span>password<br><span class="hljs-bullet">- </span>birthday<br><br>orders数据<br><span class="hljs-bullet">- </span>id<br><span class="hljs-bullet">- </span>order_time<br><span class="hljs-bullet">- </span>uid （uid是user表的id，作为外键）<br></code></pre></td></tr></table></figure><h3 id="2-4-mybatis实现基本增删改查"><a href="#2-4-mybatis实现基本增删改查" class="headerlink" title="2.4 mybatis实现基本增删改查"></a>2.4 mybatis实现基本增删改查</h3><p><strong>mapper</strong>类当中使用mybatis的基本用法（ibatis）</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304220555149.png" alt="image-20230304220555149"></p><p>通过注解，例如@Select的方式可以选择自定义一些简单的sql语句，实现数据库的增删改查</p><p><strong>controller类</strong>如何写：</p><p>通过注解@Autowired自动代理，来创建一个userMapper类</p><p>然后可以直接调用里面的方法</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304220804631.png" alt="image-20230304220804631"></p><ul><li><p>上图find（）函数当中的selectList（）方法是mybatisPlus当中自带的，也就是mapper当中不需要编写任何函数。该方法<strong>查询所有表内容</strong></p></li><li><p>但是使用mybatisPlus需要继承接口BaseMapper，里面有封装好的函数</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230304220929021.png" alt="image-20230304220929021"></p><p>并且里面的参数要写传的对象参数User，方便返回的数据统一</p></li></ul><h3 id="2-5-多表查询以及分页查询"><a href="#2-5-多表查询以及分页查询" class="headerlink" title="2.5 多表查询以及分页查询"></a>2.5 多表查询以及分页查询</h3><blockquote><p>这个比较简单的话可以</p></blockquote><h3 id="2-6-一些小细节"><a href="#2-6-一些小细节" class="headerlink" title="2.6 一些小细节"></a>2.6 一些小细节</h3><ul><li>在application.properties文件当中，使用<code>server.port=8088</code>可以更改端口</li><li><code>@Data</code>可以让实体类不需要写set或者get函数（以及自动配置好）</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP连接前后端（实验3）</title>
    <link href="/2022/11/02/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
    <url>/2022/11/02/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP连接前后端（实验三）"><a href="#PHP连接前后端（实验三）" class="headerlink" title="PHP连接前后端（实验三）"></a>PHP连接前后端（实验三）</h1><hr><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li><p><strong>前端</strong>：</p><p>前端直接用php后缀名的文件写html，然后CSS可以写在外部文件，但是在外部文件的时候有时有些奇怪，不生效，所以暂时都写在php文件里面</p></li><li><p><strong>后端</strong>：</p><p>后端采用php连接mysql数据库的方式，有少量JavaScript嵌入到php代码里面，主要采用的是在html代码中嵌入php语言的方式</p></li></ul><h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><blockquote><p>文件数量并不是很多，有关的页面可以说只有两个区别比较大的页面，剩下的都是一些增删改查的操作，因此从框架上先理解就会更容易弄明白</p></blockquote><ul><li><p>先说一下文件组成框架</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030103907217.png" alt="image-20221030103907217"></p><p>show_schema.php作为主页面，然后主要的表的增删改查功能在文件夹<strong>DataBase</strong>里面</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030204346847.png" alt="image-20221030204346847"></p><p>Database文件夹里面如下所示，最<strong>主要</strong>的界面还是<strong>show_dat.php</strong>，下面会有详细介绍</p><p>其中<code>delete_dat.php </code>和<code> Dif_SQL.php</code>是没有前端渲染的，全是php代码做一些逻辑的处理和输出</p><p>尤其是<code>Dif_SQL.php</code>文件主要作提供两个函数功能的作用，稍后会有介绍</p></li></ul><hr><h2 id="网页＋代码详解："><a href="#网页＋代码详解：" class="headerlink" title="网页＋代码详解："></a>网页＋代码详解：</h2><h3 id="1-首页（show-schema-php）："><a href="#1-首页（show-schema-php）：" class="headerlink" title="1. 首页（show_schema.php）："></a>1. <strong>首页</strong>（show_schema.php）：</h3><p>  <img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030103514277.png" alt="image-20221030103514277"></p><p>  在该页面有多个表可以选择，实际是跳转到<strong>同一个</strong>文件（show_dat.php）里面，但是点击不同的<strong>查看</strong>按钮的时候，传入的<code>$_GET</code>数据会不一样</p><p>  看如下html代码</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table01&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;20px&quot;</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;5px&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;check&quot;</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./DataBase/show_dat.php?table=customers&quot;</span>&gt;</span>Customer<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;check&quot;</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./DataBase/show_dat?table=employees&quot;</span>&gt;</span>Emp<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br></code></pre></td></tr></table></figure><p>  可以看到show_dat?后面的传入内容是不一样的，因此查询的表的内容其实也就可以灵活变动。</p><p>使用<code>$_GET</code>变量就可以在传入的文件中接受并且确定它的内容是什么，然后在php中就可以用这个变量动态的代替表名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table&#x27;</span>]))&#123; <span class="hljs-comment">//如图接收变量</span><br>    <span class="hljs-variable">$TABLE_NAME</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="2-展示表的全部数据（show-dat-php）"><a href="#2-展示表的全部数据（show-dat-php）" class="headerlink" title="2. 展示表的全部数据（show_dat.php）"></a>2. 展示表的全部数据（show_dat.php）</h3><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030211120870.png" alt="image-20221030211120870"></p><ul><li>可以看到这个页面的内容还是挺丰富的，接下来将<strong>从上到下</strong>逐一介绍</li></ul><h4 id="2-1-搜索栏-search-dat-php-show-dat-php"><a href="#2-1-搜索栏-search-dat-php-show-dat-php" class="headerlink" title="2.1 搜索栏(search_dat.php + show_dat.php)"></a>2.1 搜索栏(search_dat.php + show_dat.php)</h4><blockquote><p>首先来介绍一下最上面的搜索栏</p></blockquote><ul><li><p>HTML框架</p><p>这里用了form表单当中的<code>select</code>标签来提供选项，代码如下所示</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030211433528.png" alt="image-20221030211433528"></p><p>这里嵌入了php语言，但是也挺好看懂的，其实就是通过for循环显示出多个选项，也就是对应的列名，这里的<code>table_row_num</code>就是列的个数，具体的获取方法这里就不展开了；</p><p>只需要知道表名就可以找到对应的相关数据了，因此不同的表的<code>table_row_num</code>也是不一样的</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030212001544.png" alt="image-20221030212001544"></p><p>如上图所示效果。选择好要搜索哪一列的内容后，将鼠标置于右边的搜索logo上，就会平滑展开出一个搜索栏，这里是用css3的<code>transition</code>的方式来实现动态效果。</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030212333120.png" alt="image-20221030212333120"></p><p>填写搜索内容后点击右边的搜索按钮就会跳转到<code>search_dat.php</code>文件当中啦，这里我们假设选择cid 并且搜索c001。则会显示出来搜索到的唯一结果</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030212531480.png" alt="image-20221030212531480"></p><p>然后我们可以大致看一下<code>search_dat.php</code>里面的内容是什么</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030214710302.png" alt="image-20221030214710302"></p><p>先是最上面我们通过get方法获取表名，然后下面是通过post方法获得的<code>$condition</code>和<code>$TARGET</code>分别是在上一个页面中的选择框和搜索框的内容，也就是这张传过来的数据</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030212333120.png" alt="image-20221030212333120"></p><p>接下来就是通过<code>$query</code>语句获取sql，有着限定条件，因此最后会输出特定范围搜索出来的行数据。</p></li></ul><h4 id="2-1-查看和修改＋删除数据-edit-dat-php-show-dat-php"><a href="#2-1-查看和修改＋删除数据-edit-dat-php-show-dat-php" class="headerlink" title="2.1 查看和修改＋删除数据(edit_dat.php + show_dat.php)"></a>2.1 查看和修改＋删除数据(edit_dat.php + show_dat.php)</h4><blockquote><p>接下来讲页面中最重要的内容</p></blockquote><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><p>该图为show_dat.php</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030215427326.png" alt="image-20221030215427326"></p><ul><li>点击其中一个<strong>修改</strong>按钮看看效果如何（下图是edit_dat.php页面）</li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030215447319.png" alt="image-20221030215447319"></p><p>可以看到点击的对应的那一行变成了输入框，并且保留有原来的内容，不过cid也就是第一列的数据是无法修改的（为了安全起见）。</p><p>如果填写好了就可以点击确认，否则就可以<strong>取消</strong>，返回到show_dat.php的页面</p><ul><li>看一下show_dat.php中<strong>修改</strong>按钮对应的代码</li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030215648717.png" alt="image-20221030215648717"></p><p>看到前面输出的都是通过for循环显示的那一行的数据，然后点击按钮后，会跳转到edit_dat.php页面。</p><p>但是edit_dat.php页面的内容其实和show_dat.php大致是一样的，只是在点击了<strong>修改</strong>的那一行改成了input输入框，具体代码可参考源码。</p><h4 id="删除数据-delete-dat-php"><a href="#删除数据-delete-dat-php" class="headerlink" title="删除数据(delete_dat.php)"></a>删除数据(delete_dat.php)</h4><blockquote><p> 删除的话比较简单,点击删除按钮后会跳转到delete_dat.php文件，删除后会自动返回到show_dat.php页面当中</p></blockquote><ul><li>点击删除时会有一个js代码编写的提示是否删除</li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030220231439.png" alt="image-20221030220231439"></p><ul><li>delete_dat.php对应代码，比较简短</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">include</span> (<span class="hljs-string">&quot;../conn.php&quot;</span>);<br><br><span class="hljs-comment">//mysql_query(&quot;set names gb2312&quot;);</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$TABLE_NAME</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table&#x27;</span>];<br>&#125;<br><span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;SELECT * FROM <span class="hljs-subst">$TABLE_NAME</span>&quot;</span>;<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$query</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$conn</span>));<br><span class="hljs-variable">$id_row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_field</span>(<span class="hljs-variable">$res</span>)-&gt;name; <span class="hljs-comment">//获取第i个列名字</span><br><br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;DELETE FROM <span class="hljs-subst">$TABLE_NAME</span> where <span class="hljs-subst">$id_row</span>=&#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>; <span class="hljs-comment">//这里因为id是字符串所以要多加个引号</span><br><span class="hljs-variable">$result1</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$conn</span>));<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$result1</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script language=javascript&gt;</span><br><span class="hljs-string">    window.location.href=&#x27;show_dat.php?table=<span class="hljs-subst">$TABLE_NAME</span>&#x27;;&lt;/script&gt;&quot;</span>;<span class="hljs-comment">//返回</span><br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-3-增加数据-show-dat-php"><a href="#2-3-增加数据-show-dat-php" class="headerlink" title="2.3 增加数据(show_dat.php)"></a>2.3 增加数据(show_dat.php)</h4><blockquote><p>增加数据这里的代码，为了文件更加简洁方便，我就也写在了show_dat.php当中了。</p></blockquote><ul><li>先演示一下效果，点击 ‘ + ’号后会在最下方增加一行多个input输入框</li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030220643756.png" alt="image-20221030220643756"></p><ul><li>关于这部分的php逻辑代码如下所示</li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221030220820845.png" alt="image-20221030220820845"></p><ul><li><p>第一个if语句是触发点击了 ‘ + ’按钮的效果，然后就会输出一行input语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">if(isset($_POST[&quot;plus-syn&quot;]) == &quot;+&quot;)&#123;//显示要添加的新的信息<br>    echo &quot;&lt;tr&gt;&quot;;<br>    for($i=0 ;$i &lt; $table_row_num;$i++)&#123;<br>        echo &quot;&lt;td&gt;&lt;input type=&#x27;text&#x27; name=&#x27;$table_row_names[$i]&#x27; id=&#x27;in-text&#x27;&gt;&lt;/td&gt;&quot;;<br>    &#125;<br>    echo &quot;<br>    &lt;td&gt;&lt;input type=&#x27;submit&#x27; name=&#x27;change&#x27;<br>            value=&#x27;确定&#x27; id=&#x27;submit-but&#x27;&gt;&lt;/td&gt;<br>    &lt;td&gt;&lt;a href=&#x27;./show_dat?table=$TABLE_NAME&#x27; id=&#x27;cancel-but&#x27;&gt; 取消&lt;/a&gt;&lt;/td&gt;<br>    &lt;/tr&gt;<br>    &quot;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>第二个if 语句则是点击了红色的<strong>确定</strong>按钮之后会触发的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">if(isset($_POST[&quot;change&quot;]) == &quot;确定&quot;)&#123; //在这里完成数据库的插入<br>    include(&quot;Dif_SQL.php&quot;);//引入用于数据库操作的文件<br>    $query = insert_SQL($table_row_num,$TABLE_NAME,$table_row_names);//完成插入语句<br>  <br>    $result=mysqli_query($conn,$query) or die(mysqli_error($conn));<br>    <br>    if($result)&#123;<br>        echo <br>        &quot;&lt;script language=javascript&gt;window.location.href=&#x27;show_dat.php?table=$TABLE_NAME&#x27;;&lt;/script&gt;&quot;;<br>    &#125;<br>    else&#123;<br>        echo <br>        &quot;&lt;script language=javascript&gt;window.alert(&#x27;增添失败,请返回&#x27;);<br>        window.location.href=&#x27;show_dat.php?table=$TABLE_NAME&#x27;;&lt;/script&gt;&quot;;<br>  <br>    &#125;<br>&#125;   <br></code></pre></td></tr></table></figure><p>添加成功后就会返回到原来的页面，就可以看到最下面会多了一行数据出来。</p></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>至此就介绍完了整个网页的大致组成了，更加细致的可以去GitHub<a href="https://github.com/Cheesheep/DataBase-Ex3-PHP%E3%80%82">https://github.com/Cheesheep/DataBase-Ex3-PHP。</a></p></li><li><p>打开show_schema.php即可正常食用。哦前提是数据库连接要正确，稍微改一下conn.php的内容就可以了</p></li><li><p>我调试的时候用的是wampserver自带的mysql数据库以及php，并且是在它的www根目录下打开的php界面，如果不会用的话可以参照我的方法，先下个wampserver吧！！</p></li></ul><h4 id="最后说下感想（大概写了一周的代码吧）："><a href="#最后说下感想（大概写了一周的代码吧）：" class="headerlink" title="最后说下感想（大概写了一周的代码吧）："></a>最后说下感想（大概写了一周的代码吧）：</h4><p> 我感觉最难的一个部分就是最后解决代码重用性的问题，一开始很多参数都是写死的， 框架也是写死的，但写到后面就会发现很多地方的代码其实是重复的，如果有m张表那我还得一个个页面的复制，然后改m次里面的参数，那实在是太花费精力了。</p><p> 因此经过一番思考之后，发现只要每个页面中有表名存在，并且可以传到每一个下一个要去的页面就可以了，然后所有数据就只需要根据表名就都可以通过php代码的出来并且显示到前端上面，比较难以复用的就是mysql语句的编写，因此mysql语句则是有多少张表则写了多少个相似的mysql语句，但是在操作的参数方面会有些许不同。</p><p>​    最后，虽然本次实验花费了很多时间，但算是第一次完整接触了前后端的网页制作，个人认为是学到了很多东西，打开了后端的大门，仍有许多需要学习的地方。</p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三下</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>A*算法实现八数码.md</title>
    <link href="/2022/10/28/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8A/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/BFS%E5%85%AB%E6%95%B0%E7%A0%81%E5%AE%9E%E9%AA%8C%E9%A2%98/"/>
    <url>/2022/10/28/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8A/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/BFS%E5%85%AB%E6%95%B0%E7%A0%81%E5%AE%9E%E9%AA%8C%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="八数码难题"><a href="#八数码难题" class="headerlink" title="八数码难题"></a>八数码难题</h1><blockquote><p>这是一个非常经典的实验，作为人工智能导论课的第一个题目，思路上似乎不是很难，但是实现起来还是有点复杂，接下来讲解一下我的思路</p></blockquote><h2 id="BFS实现思路（源码会给在最下方）"><a href="#BFS实现思路（源码会给在最下方）" class="headerlink" title="BFS实现思路（源码会给在最下方）"></a>BFS实现思路（源码会给在最下方）</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/802595e44bf6c42e7b271f2564e481c9.png" alt="img"></p><!--图片来源于csdn--><h3 id="BFS实现方法"><a href="#BFS实现方法" class="headerlink" title="BFS实现方法"></a>BFS实现方法</h3><ol><li><strong>大致思路</strong></li></ol><p>使用BFS实现还是比较简单的，只需要用队列的方式来储存每一个节点即可，使用python来存储这些类对象还是很简单的，然后就用while循环一层层的去对照节点的状态如何，直到队列空了则退出循环，视为查询失败，如果找到了目标节点，则提前退出while循环并返回该节点</p><p>该节点会存储着parent的指针，指向父类，这样就通过该节点向上找到整条路径，最后反过来输出就可以知道路径是怎么样的了</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/20210324210243197.jpg" alt="img"></p><!--图片来源于CSDN博客--><h3 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h3><ul><li><p>所需包：numpy，copy</p></li><li><p>所需数据结构队列（这里我自己写了一个封装好的Myqueue类）</p><p>其实直接用list也可以，用queue来作为OPEN表装节点</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20220929000626021.png" alt="image-20220929000626021"></p><ul><li><p>Main<strong>函数</strong>内容：</p><p>首先是初始化<strong>最初状态和结束状态</strong>，这里我直接用一个一维数组来表示，可以方便扩展八数码问题</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221001175204729.png" alt="image-20221001175204729"></p></li><li><p>然后建立OPEN表和CLOSE表，用<strong>队列</strong>作为数据结构</p></li><li><p>将初始化State类，并将初始状态放入该类中</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221001181359316.png" alt="image-20221001181359316"></p><p>然后使用State类当中的Find（）函数搜索</p><p>如果查询<strong>成功</strong>的话返回的是包含与TargetState相同的矩阵的State类</p><p>如果失败则返回一个没有parent的与OriginState相同矩阵的State类</p></li></ul></li></ul><h3 id="State类构造以及Find函数"><a href="#State类构造以及Find函数" class="headerlink" title="State类构造以及Find函数"></a>State类构造以及Find函数</h3><ul><li>State类的<strong>成员函数</strong></li></ul><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221001182010648.png" alt="image-20221001182010648"></p><p>   parent指的是父亲节点，dir指的是一个字符串含有上一个节点到这一个节点的方向，默认为None</p><p>   CuState是存储当前状态的数字一维矩阵，index表示八数码当中0（也就是空位）所处的索引位置    </p><ul><li><p><strong>Find</strong>函数讲解</p><p>首先是初始化的准备，全局引入一些变量，然后将初始节点<strong>入队</strong></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221001182908933.png" alt="image-20221001182908933"></p><p>然后会通过计算<strong>逆序数</strong>来判断这个初始状态是否是有解的，也就是最终能否到达目标节点的状态</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221019194949343.png" alt="image-20221019194949343"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_Reverse</span>(<span class="hljs-params">self,Matrix</span>): <span class="hljs-comment">#计算逆序数</span><br>    State_Matrix = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        State_Matrix.append(Matrix[i])<br>    State_Matrix.remove(<span class="hljs-number">0</span>)<br>    reverse_number = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> cur <span class="hljs-keyword">in</span> State_Matrix:<br>        index = State_Matrix.index(cur)<br>        <span class="hljs-comment"># 遍历cur后面的数字</span><br>        <span class="hljs-keyword">for</span> after_cur <span class="hljs-keyword">in</span> State_Matrix[index:]:<br>            <span class="hljs-keyword">if</span> cur &gt; after_cur:<br>                reverse_number += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> reverse_number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_Solvable</span>(<span class="hljs-params">self,Tar_State</span>): <span class="hljs-comment">#判断该状态是否有解</span><br>    init_Reverse_Num = <span class="hljs-variable language_">self</span>.calculate_Reverse(<span class="hljs-variable language_">self</span>.Matrix)<br>    Tar_Reverse_Num = <span class="hljs-variable language_">self</span>.calculate_Reverse(Tar_State)<br>    <span class="hljs-keyword">if</span> init_Reverse_Num == Tar_Reverse_Num:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The State is solvable&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The State is unsolvable&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>接下来就可以开始进行<strong>while循环</strong>，每一次循环loop都是对队列的头节点取出来并且进行产生新的分支节点</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221001183103515.png" alt="image-20221001183103515"></p><p>！！这里要注意用深拷贝的方法取得一个新的结点，因为Fir_State同时指向了上一个节点的多个State对象（主要是懒得换名字）</p><p>下面是四个状态的代码（其实代码是差不多的，主要还是判断条件有点不太一样）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> ((Index + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>):  <span class="hljs-comment">#右边界条件</span><br>    Next_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index + <span class="hljs-number">1</span>, First_State, <span class="hljs-string">&quot;Right&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Next_State):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Right&quot;</span>)<span class="hljs-comment"># 代表可以向右移动</span><br>        stateNum += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (Next_State.Matrix == TargetState).<span class="hljs-built_in">all</span>():<br>            <span class="hljs-keyword">return</span> Next_State<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#Next_State.ShowState()</span><br>            OPEN.push(Next_State)<br>  <br><span class="hljs-keyword">if</span> (Index % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>):  <span class="hljs-comment"># 代表可以向左移动</span><br>    Next_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index - <span class="hljs-number">1</span>, First_State, <span class="hljs-string">&quot;Left&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Next_State):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Left&quot;</span>)<br>        stateNum += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (Next_State.Matrix == TargetState).<span class="hljs-built_in">all</span>():<br>            <span class="hljs-keyword">return</span> Next_State<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#Next_State.ShowState()</span><br>            OPEN.push(Next_State)<br>  <br><span class="hljs-keyword">if</span> (Index - <span class="hljs-number">3</span> &gt;= <span class="hljs-number">0</span>):  <span class="hljs-comment"># 代表可以向上移动</span><br>    Next_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index - <span class="hljs-number">3</span>, First_State, <span class="hljs-string">&quot;Up&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Next_State):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Up&quot;</span>)<br>        stateNum += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (Next_State.Matrix == TargetState).<span class="hljs-built_in">all</span>():<br>            <span class="hljs-keyword">return</span> Next_State<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#Next_State.ShowState()</span><br>            OPEN.push(Next_State)<br>  <br><span class="hljs-keyword">if</span> (Index + <span class="hljs-number">3</span> &lt;= <span class="hljs-number">8</span>):  <span class="hljs-comment"># 代表可以向下移动</span><br>    Next_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index + <span class="hljs-number">3</span>, First_State, <span class="hljs-string">&quot;Down&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Next_State):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Down&quot;</span>)<br>        stateNum += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (Next_State.Matrix == TargetState).<span class="hljs-built_in">all</span>():<br>            <span class="hljs-keyword">return</span> Next_State<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#Next_State.ShowState()</span><br>            OPEN.push(Next_State)<br></code></pre></td></tr></table></figure></li><li><p>State类的<strong>成员函数</strong>（除了Find之外）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">ShowState</span>(<span class="hljs-params">self</span>):<span class="hljs-comment">#打印矩阵信息</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move &quot;</span>,<span class="hljs-variable language_">self</span>.Direction)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.Matrix[j + i * <span class="hljs-number">3</span>],end=<span class="hljs-string">&quot; &quot;</span>)<br>        <span class="hljs-built_in">print</span>()<br>    <span class="hljs-built_in">print</span>()<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Swap</span>(<span class="hljs-params">self, Cu_index, Next_index, NState</span>):<span class="hljs-comment">#交换矩阵当中的两个数</span><br>    temp = NState[Cu_index]<br>    NState[Cu_index] = NState[Next_index]<br>    NState[Next_index] = temp<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Create_Next_State</span>(<span class="hljs-params">self, Cu_index, Next_index, Fir_State, Dir</span>):<span class="hljs-comment">#通过上一个节点来产生一个新的State类，含有新的方向和数组</span><br>    Next_State = State(<br>        CuState=Fir_State.Matrix.copy(),<br>        index=Next_index,<br>        parent=Fir_State, <span class="hljs-comment">#指向上一个节点</span><br>        <span class="hljs-built_in">dir</span>=Dir)<br>    <span class="hljs-variable language_">self</span>.Swap(Cu_index, Next_index, Next_State.Matrix)<br>    <span class="hljs-keyword">return</span> Next_State<br>  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_State_Existed</span>(<span class="hljs-params">self,CLOSE,Next_State</span>):<span class="hljs-comment">#用来判读新的状态是否和CLOSE表里面的有重叠</span><br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> CLOSE._queue:<br>        <span class="hljs-keyword">if</span>(Next_State.Matrix == node.Matrix).<span class="hljs-built_in">all</span>():<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-comment">#表示已经有元素存在，不会将该状态入队</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><p>比较重要的还是<code>is_State_Existed()</code> 用来<strong>判重</strong>，其他的基本就是字面意思，都很好理解</p><p><strong>最后退出循环</strong>并且打印，没有就返回</p></li></ul><h4 id="成功返回状态节点后打印"><a href="#成功返回状态节点后打印" class="headerlink" title="成功返回状态节点后打印"></a>成功返回状态节点后打印</h4><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221001184950161.png" alt="image-20221001184950161"></p><hr><h2 id="遇到的难点"><a href="#遇到的难点" class="headerlink" title="遇到的难点"></a>遇到的难点</h2><ul><li><p>首先是思路的构建，如何让代码更加简洁的表示出来吧，目前代码还是感觉重写性很高，不够优美。</p></li><li><pre><code class="language-python"> First_State = copy.deepcopy(Fir_State) #这里用深拷贝是因为之前四个状态都被同一个名字指向了<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs swift"><br>  为什么这里要用深拷贝呢，是因为python它的局部变量竟然会保留并且跑出来，这让我如何是好，指针指向了多个对象实例，于是一旦更改就全部更改了，所以只能深拷贝一个防止修改了全部了<br><br><br><br><span class="hljs-operator">---</span><br><br>## 最后附上全部代码<br><br><span class="hljs-operator">~~~</span>python<br><span class="hljs-keyword">import</span> numpy as np<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-number">2020111051</span><br>&#x27;软工钟靖扬&#x27;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span>:  # 队列数据结构<br>    def __init__(<span class="hljs-keyword">self</span>, size):<br>        <span class="hljs-keyword">self</span>.front = -1<br>        <span class="hljs-keyword">self</span>.rear = -1<br>        <span class="hljs-keyword">self</span>._size = size<br>        <span class="hljs-keyword">self</span>._queue = []<br><br>    def push(<span class="hljs-keyword">self</span>, data):<br>        <span class="hljs-keyword">if</span> not (<span class="hljs-keyword">self</span>.is<span class="hljs-title class_ inherited__">Full</span>()):<br>            <span class="hljs-keyword">self</span>._queue.append(data)<br>            <span class="hljs-keyword">self</span>.rear += 1<br><br>    def pop(<span class="hljs-keyword">self</span>):<br>        <span class="hljs-keyword">if</span> not (<span class="hljs-keyword">self</span>.is<span class="hljs-title class_ inherited__">Empty</span>()):<br>            <span class="hljs-keyword">self</span>._queue.pop(0)<br>            <span class="hljs-keyword">self</span>.rear -= 1<br><br>    def <span class="hljs-keyword">is</span><span class="hljs-title class_ inherited__">Full</span>(<span class="hljs-keyword">self</span>):  # 队列满时返回1<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.rear == <span class="hljs-keyword">self</span>._size - 1<br><br>    def <span class="hljs-keyword">is</span><span class="hljs-title class_ inherited__">Empty</span>(<span class="hljs-keyword">self</span>):  # 队列空时返回1<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.rear == -1<br><br>    def <span class="hljs-keyword">get</span><span class="hljs-title class_ inherited__">Font</span>(<span class="hljs-keyword">self</span>):<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.is<span class="hljs-title class_ inherited__">Empty</span>() == 0):<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>._queue[0]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_ inherited__">State</span>:<br>    def __init__(<span class="hljs-keyword">self</span>, <span class="hljs-title class_ inherited__">CuState</span>, index, parent=<span class="hljs-title class_ inherited__">None</span>, dir=<span class="hljs-title class_ inherited__">None</span>):<br>        <span class="hljs-keyword">self</span>.parent = parent  # 父亲节点<br>        <span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">Direction</span> = dir<br>        <span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">Matrix</span> = <span class="hljs-title class_ inherited__">CuState</span><br>        <span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">CuIndex</span> = index<br><br>    def <span class="hljs-title class_ inherited__">ShowState</span>(<span class="hljs-keyword">self</span>):#打印矩阵信息<br>        print(&quot;<span class="hljs-title class_ inherited__">Move</span> &quot;,<span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">Direction</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(3):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(3):<br>                print(<span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">Matrix</span>[j + i * 3],end=&quot; &quot;)<br>            print()<br>        print()<br><br>    def <span class="hljs-title class_ inherited__">Swap</span>(<span class="hljs-keyword">self</span>, <span class="hljs-title class_ inherited__">Cu_index</span>, <span class="hljs-title class_ inherited__">Next_index</span>, <span class="hljs-title class_ inherited__">NState</span>):#交换矩阵当中的两个数<br>        temp = <span class="hljs-title class_ inherited__">NState</span>[<span class="hljs-title class_ inherited__">Cu_index</span>]<br>        <span class="hljs-title class_ inherited__">NState</span>[<span class="hljs-title class_ inherited__">Cu_index</span>] = <span class="hljs-title class_ inherited__">NState</span>[<span class="hljs-title class_ inherited__">Next_index</span>]<br>        <span class="hljs-title class_ inherited__">NState</span>[<span class="hljs-title class_ inherited__">Next_index</span>] = temp<br><br>    def <span class="hljs-title class_ inherited__">Create_Next_State</span>(<span class="hljs-keyword">self</span>, <span class="hljs-title class_ inherited__">Cu_index</span>, <span class="hljs-title class_ inherited__">Next_index</span>, <span class="hljs-title class_ inherited__">Fir_State</span>, <span class="hljs-title class_ inherited__">Dir</span>):#通过上一个节点来产生一个新的<span class="hljs-title class_ inherited__">State类，含有新的方向和数组</span><br>        <span class="hljs-title class_ inherited__">Next_State</span> = <span class="hljs-title class_ inherited__">State</span>(<br>            <span class="hljs-title class_ inherited__">CuState</span>=<span class="hljs-title class_ inherited__">Fir_State</span>.<span class="hljs-title class_ inherited__">Matrix</span>.copy(),<br>            index=<span class="hljs-title class_ inherited__">Next_index</span>,<br>            parent=<span class="hljs-title class_ inherited__">Fir_State</span>, #指向上一个节点<br>            dir=<span class="hljs-title class_ inherited__">Dir</span>)<br>        <span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">Swap</span>(<span class="hljs-title class_ inherited__">Cu_index</span>, <span class="hljs-title class_ inherited__">Next_index</span>, <span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">Matrix</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_ inherited__">Next_State</span><br><br>    def is_<span class="hljs-title class_ inherited__">State_Existed</span>(<span class="hljs-keyword">self</span>,<span class="hljs-title class_ inherited__">CLOSE</span>,<span class="hljs-title class_ inherited__">Next_State</span>):#用来判读新的状态是否和<span class="hljs-title class_ inherited__">CLOSE表里面的有重叠</span><br>        <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> <span class="hljs-title class_ inherited__">CLOSE</span>._queue:<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">Matrix</span> == node.<span class="hljs-title class_ inherited__">Matrix</span>).all():<br>                <span class="hljs-keyword">return</span> 1 #表示已经有元素存在，不会将该状态入队<br>        <span class="hljs-keyword">return</span> 0 <br>    <br><br>    def <span class="hljs-title class_ inherited__">Find</span>(<span class="hljs-keyword">self</span>):<br>        global <span class="hljs-title class_ inherited__">OPEN</span>,<span class="hljs-title class_ inherited__">CLOSE</span>,  <span class="hljs-title class_ inherited__">TargetState</span><br>        <span class="hljs-title class_ inherited__">OPEN</span>.push(<span class="hljs-keyword">self</span>)<br>        state<span class="hljs-title class_ inherited__">Num</span> = 0<br>        <span class="hljs-title class_ inherited__">Index</span> = <span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">CuIndex</span>  # 当前索引位置<br>        <span class="hljs-keyword">while</span> <span class="hljs-title class_ inherited__">True</span>:<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_ inherited__">OPEN</span>.is<span class="hljs-title class_ inherited__">Empty</span>()):  # 若表空，则表示查询失败<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-title class_ inherited__">Fir_State</span> = <span class="hljs-title class_ inherited__">OPEN</span>.get<span class="hljs-title class_ inherited__">Font</span>()<br>            <span class="hljs-title class_ inherited__">First_State</span> = <span class="hljs-keyword">copy</span>.deepcopy(<span class="hljs-title class_ inherited__">Fir_State</span>) #这里用深拷贝是因为之前四个状态都被同一个名字指向了<br>            <span class="hljs-title class_ inherited__">Index</span> = <span class="hljs-title class_ inherited__">First_State</span>.<span class="hljs-title class_ inherited__">CuIndex</span><br>            <span class="hljs-title class_ inherited__">OPEN</span>.pop()<br>            <span class="hljs-title class_ inherited__">CLOSE</span>.push(<span class="hljs-title class_ inherited__">First_State</span>)<br><br>            <span class="hljs-keyword">if</span> ((<span class="hljs-title class_ inherited__">Index</span> + 1) % 3 != 0):  #右边界条件<br>                <span class="hljs-title class_ inherited__">Next_State</span> = <span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">Create_Next_State</span>(<span class="hljs-title class_ inherited__">Index</span>, <span class="hljs-title class_ inherited__">Index</span> + 1, <span class="hljs-title class_ inherited__">First_State</span>, &quot;<span class="hljs-title class_ inherited__">Right</span>&quot;)<br>                <span class="hljs-keyword">if</span> not <span class="hljs-keyword">self</span>.is<span class="hljs-keyword">_</span><span class="hljs-title class_ inherited__">State_Existed</span>(<span class="hljs-title class_ inherited__">CLOSE</span>,<span class="hljs-title class_ inherited__">Next_State</span>):<br>                    print(&quot;<span class="hljs-title class_ inherited__">Move</span> <span class="hljs-title class_ inherited__">Right</span>&quot;)# 代表可以向右移动<br>                    state<span class="hljs-title class_ inherited__">Num</span> += 1<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">Matrix</span> == <span class="hljs-title class_ inherited__">TargetState</span>).all():<br>                        <span class="hljs-keyword">return</span> <span class="hljs-title class_ inherited__">Next_State</span><br>                    <span class="hljs-keyword">else</span>:<br>                        #<span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">ShowState</span>()<br>                        <span class="hljs-title class_ inherited__">OPEN</span>.push(<span class="hljs-title class_ inherited__">Next_State</span>)<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_ inherited__">Index</span> % 3 != 0):  # 代表可以向左移动<br>                <span class="hljs-title class_ inherited__">Next_State</span> = <span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">Create_Next_State</span>(<span class="hljs-title class_ inherited__">Index</span>, <span class="hljs-title class_ inherited__">Index</span> - 1, <span class="hljs-title class_ inherited__">First_State</span>, &quot;<span class="hljs-title class_ inherited__">Left</span>&quot;)<br>                <span class="hljs-keyword">if</span> not <span class="hljs-keyword">self</span>.is<span class="hljs-keyword">_</span><span class="hljs-title class_ inherited__">State_Existed</span>(<span class="hljs-title class_ inherited__">CLOSE</span>,<span class="hljs-title class_ inherited__">Next_State</span>):<br>                    print(&quot;<span class="hljs-title class_ inherited__">Move</span> <span class="hljs-title class_ inherited__">Left</span>&quot;)<br>                    state<span class="hljs-title class_ inherited__">Num</span> += 1<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">Matrix</span> == <span class="hljs-title class_ inherited__">TargetState</span>).all():<br>                        <span class="hljs-keyword">return</span> <span class="hljs-title class_ inherited__">Next_State</span><br>                    <span class="hljs-keyword">else</span>:<br>                        #<span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">ShowState</span>()<br>                        <span class="hljs-title class_ inherited__">OPEN</span>.push(<span class="hljs-title class_ inherited__">Next_State</span>)<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_ inherited__">Index</span> - 3 &gt;= 0):  # 代表可以向上移动<br>                <span class="hljs-title class_ inherited__">Next_State</span> = <span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">Create_Next_State</span>(<span class="hljs-title class_ inherited__">Index</span>, <span class="hljs-title class_ inherited__">Index</span> - 3, <span class="hljs-title class_ inherited__">First_State</span>, &quot;<span class="hljs-title class_ inherited__">Up</span>&quot;)<br>                <span class="hljs-keyword">if</span> not <span class="hljs-keyword">self</span>.is<span class="hljs-keyword">_</span><span class="hljs-title class_ inherited__">State_Existed</span>(<span class="hljs-title class_ inherited__">CLOSE</span>,<span class="hljs-title class_ inherited__">Next_State</span>):<br>                    print(&quot;<span class="hljs-title class_ inherited__">Move</span> <span class="hljs-title class_ inherited__">Up</span>&quot;)<br>                    state<span class="hljs-title class_ inherited__">Num</span> += 1<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">Matrix</span> == <span class="hljs-title class_ inherited__">TargetState</span>).all():<br>                        <span class="hljs-keyword">return</span> <span class="hljs-title class_ inherited__">Next_State</span><br>                    <span class="hljs-keyword">else</span>:<br>                        #<span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">ShowState</span>()<br>                        <span class="hljs-title class_ inherited__">OPEN</span>.push(<span class="hljs-title class_ inherited__">Next_State</span>)<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_ inherited__">Index</span> + 3 &lt;= 8):  # 代表可以向下移动<br>                <span class="hljs-title class_ inherited__">Next_State</span> = <span class="hljs-keyword">self</span>.<span class="hljs-title class_ inherited__">Create_Next_State</span>(<span class="hljs-title class_ inherited__">Index</span>, <span class="hljs-title class_ inherited__">Index</span> + 3, <span class="hljs-title class_ inherited__">First_State</span>, &quot;<span class="hljs-title class_ inherited__">Down</span>&quot;)<br>                <span class="hljs-keyword">if</span> not <span class="hljs-keyword">self</span>.is<span class="hljs-keyword">_</span><span class="hljs-title class_ inherited__">State_Existed</span>(<span class="hljs-title class_ inherited__">CLOSE</span>,<span class="hljs-title class_ inherited__">Next_State</span>):<br>                    print(&quot;<span class="hljs-title class_ inherited__">Move</span> <span class="hljs-title class_ inherited__">Down</span>&quot;)<br>                    state<span class="hljs-title class_ inherited__">Num</span> += 1<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">Matrix</span> == <span class="hljs-title class_ inherited__">TargetState</span>).all():<br>                        <span class="hljs-keyword">return</span> <span class="hljs-title class_ inherited__">Next_State</span><br>                    <span class="hljs-keyword">else</span>:<br>                        #<span class="hljs-title class_ inherited__">Next_State</span>.<span class="hljs-title class_ inherited__">ShowState</span>()<br>                        <span class="hljs-title class_ inherited__">OPEN</span>.push(<span class="hljs-title class_ inherited__">Next_State</span>)<br>            print(&quot;<span class="hljs-title class_ inherited__">One</span> <span class="hljs-title class_ inherited__">Layer</span> through，now <span class="hljs-title class_ inherited__">StateNum</span> <span class="hljs-keyword">is</span> &quot;,state<span class="hljs-title class_ inherited__">Num</span>)<br>        print()<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_ inherited__">Or_State</span><br><br><br><span class="hljs-keyword">if</span> __name__ == &#x27;__main__&#x27;:<br>    # <span class="hljs-title class_ inherited__">OriginStatus</span> = input()<br>    <span class="hljs-keyword">if</span> 0:<br>        <span class="hljs-title class_ inherited__">OriginState</span> = np.array([2, 8, 3,<br>                    1, 0, 4,<br>                    7, 6, 5])<br>    <span class="hljs-keyword">if</span> 1:<br>        <span class="hljs-title class_ inherited__">OriginState</span> = np.array([1, 6, 2,<br>                    8, 0, 3,<br>                    7, 5, 4])                <br>    <span class="hljs-title class_ inherited__">TargetState</span> = np.array([1, 2, 3,<br>                   8, 0, 4,<br>                   7, 6, 5])         <br>    <span class="hljs-title class_ inherited__">OPEN</span> = <span class="hljs-title class_ inherited__">MyQueue</span>(300)<br>    <span class="hljs-title class_ inherited__">CLOSE</span> = <span class="hljs-title class_ inherited__">MyQueue</span>(300)<br>    <span class="hljs-title class_ inherited__">Or_State</span> = <span class="hljs-title class_ inherited__">State</span>(<span class="hljs-title class_ inherited__">CuState</span>=<span class="hljs-title class_ inherited__">OriginState</span>, index=4)<br>    <span class="hljs-title class_ inherited__">EndState</span> = <span class="hljs-title class_ inherited__">Or_State</span>.<span class="hljs-title class_ inherited__">Find</span>() #若查询失败返回<span class="hljs-title class_ inherited__">Origin节点，没有父类，因此不输出</span><br>    <span class="hljs-title class_ inherited__">Path</span> = [] # 用来存储节点路径，用于正序输出<br>    <span class="hljs-keyword">while</span> (<span class="hljs-title class_ inherited__">EndState</span>.parent <span class="hljs-keyword">is</span> not <span class="hljs-title class_ inherited__">None</span>):<br>        <span class="hljs-title class_ inherited__">Path</span>.append(<span class="hljs-title class_ inherited__">EndState</span>)<br>        <span class="hljs-title class_ inherited__">EndState</span> = <span class="hljs-title class_ inherited__">EndState</span>.parent<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_ inherited__">Path</span>):<br>        <span class="hljs-title class_ inherited__">Or_State</span>.<span class="hljs-title class_ inherited__">ShowState</span>()<br>        <span class="hljs-title class_ inherited__">Path</span>.reverse()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-title class_ inherited__">Path</span>:<br>            i.<span class="hljs-title class_ inherited__">ShowState</span>()<br>            <br><br></code></pre></td></tr></table></figure></code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三上</category>
      
      <category>人工智能导论</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>腾讯服务器实现ipad连接远程电脑桌面</title>
    <link href="/2022/10/28/%E5%90%84%E7%A7%8D%E9%9A%8F%E7%AC%94%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/%E5%A6%82%E4%BD%95%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"/>
    <url>/2022/10/28/%E5%90%84%E7%A7%8D%E9%9A%8F%E7%AC%94%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/%E5%A6%82%E4%BD%95%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="用腾讯云服务器实现ipad连接远程电脑桌面record（详细）（含稳定连接方法）"><a href="#用腾讯云服务器实现ipad连接远程电脑桌面record（详细）（含稳定连接方法）" class="headerlink" title="用腾讯云服务器实现ipad连接远程电脑桌面record（详细）（含稳定连接方法）"></a>用腾讯云服务器实现ipad连接远程电脑桌面record（详细）（含稳定连接方法）</h2><blockquote><p>这几天想用ipad连接电脑试一下，这样上课的时候就不用搬抬这么重的臭屁电脑了，于是开始尝试了几种方法，一开始先开通了windows专业版，想用学校机房电脑测试一下，结果不行，后面还是打算研究在ipad上如何使用，这样就可以方便携带了，2023.2.22刚入手了益博斯键盘和向日葵的鼠标，准备尝试一下，用几天，不行就退掉准备入二手轻薄本了。</p></blockquote><blockquote><p>玩了一周，最后还是用了cygwin下的autossh才能实现足够稳定的连接，吐血了要</p></blockquote><blockquote><p>提前说明这里后面的教程需要有些许基础的linux知识。</p><p>这里给出内容大纲</p></blockquote><p>[TOC]</p><h3 id="1-使用软件连接"><a href="#1-使用软件连接" class="headerlink" title="1. 使用软件连接"></a>1. 使用软件连接</h3><p>这里推荐使用向日葵，直接用就可以了，当然还有类似teamviwer之类的软件。</p><p>不过这类软件的原理是直接投屏。</p><p>那免费版肯定就是会画面卡一点，服务器资源肯定给氪金用户的了，不过目前对比起来感觉和rd-client也差不了多少。</p><p>并且投屏的另一个缺点就是你的电脑会跟着一起点亮屏幕，然后你在ipad做什么别人都能看到你的电脑上也在干这个，所以就稍微隐私性差一点，当然如果你电脑放家里也没啥，只不过我电脑一般放在实验室，emm就有不太好吧。</p><h3 id="2-使用windows自带远程"><a href="#2-使用windows自带远程" class="headerlink" title="2. 使用windows自带远程"></a>2. 使用windows自带远程</h3><p>使用这个呢网上也有很多相关教程了，这里着重推荐这个，他写的好到以至于我都不好意思写了，感觉像是再写一遍。</p><p><a href="https://zhuanlan.zhihu.com/p/400086370">从任何地方远程桌面连接到家里的电脑 - 知乎 (zhihu.com)</a></p><h4 id="2-1-需要准备的"><a href="#2-1-需要准备的" class="headerlink" title="2.1 需要准备的"></a>2.1 需要准备的</h4><ul><li>windows专业版</li></ul><p>首先是需要被连接的那个电脑是专业版，不过专业版得800多，所以没有预算的可以去破解，这里的话推荐搜heu kms，一个软件，很方便升级到专业版。</p><ul><li>一台云服务器以及一点linxu知识</li></ul><h4 id="2-2-开启远程桌面"><a href="#2-2-开启远程桌面" class="headerlink" title="2.2 开启远程桌面"></a>2.2 开启远程桌面</h4><p>有了专业版之后就可以开启远程桌面了，这里可以在控制面板找到开启，win10也可以直接在设置里面找</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230223001144799.png" alt="image-20230223001144799"></p><p>这里直接搜远程就可以选择了，</p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230223001824698.png" alt="image-20230223001824698" style="zoom: 67%;" /><p>在选择用户那里可以看到自己电脑的用户名（这个有时候很多人会弄错）</p><h3 id="3-link-start！"><a href="#3-link-start！" class="headerlink" title="3. link start！"></a>3. link start！</h3><h4 id="3-1电脑端连接"><a href="#3-1电脑端连接" class="headerlink" title="3.1电脑端连接"></a>3.1电脑端连接</h4><p>电脑端连接不需要本电脑是专业版，window电脑本身自带远程桌面连接，输入好正确的ip地址就可以了。</p><p>获取ip地址的方法可以在控制台输入<code>ipconfig</code></p><p>找到下面这里的ip地址</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/v2-a518d44fbb2c07cb9840c98af800a591_r.jpg" alt="img">这里引用了知乎的用户的</p><h4 id="3-2-ipad设备"><a href="#3-2-ipad设备" class="headerlink" title="3.2 ipad设备"></a>3.2 ipad设备</h4><p>这里我就不提供其他操作系统的了，有兴趣的人可以去搜下。</p><p>这里连接方法本质上是和电脑端类似的，因为我们用的是RD-client，是微软官方退出的连接客户端，</p><p>也许在APP-Store上面搜到的不叫这个名字，也不是很多人用，但是就是相关度最高那个，下载完之后，名字就是rd-client。</p><p>这里的连接也是比较简单的，输入id即可</p><p><strong>连接失败原因</strong>：</p><p>原因有很多种</p><ul><li><p>比如可能用户名弄错了，密码一般是我们登录微软账号的那个，不要输pin的。</p></li><li><p>可以把那个”仅限网络身份级别连接的勾选“给去掉尝试一下。</p></li><li><p>ip地址也要注意不要写错，比如我们的校园网的ip地址每天都会变的。</p></li></ul><p>注意了，以上的方法都是<strong>只能在同一个局域网下使用的</strong>，例如校园网，那这个时候就有人不满了，那我都同一个局域网了，那算什么远程啊，浪费我时间吗这不。</p><p>ok为了解决这个问题，我们可以通过<strong>内网穿透的方式</strong>来实现在其他网络远程控制（但是两部设备也一样需要联网）。相信大家应该都听过这个词吧，这里就不做详细阐述了，只需要知道我们要一个有公网ip的服务器来帮忙转接端口就可以了。</p><h4 id="3-3-通过云服务器实现内网穿透"><a href="#3-3-通过云服务器实现内网穿透" class="headerlink" title="3.3 通过云服务器实现内网穿透"></a>3.3 通过云服务器实现内网穿透</h4><blockquote><p>这里用的是腾讯云服务器来做一个内网穿透。</p></blockquote><h5 id="3-3-1首先打开服务器防火墙3389端口"><a href="#3-3-1首先打开服务器防火墙3389端口" class="headerlink" title="3.3.1首先打开服务器防火墙3389端口"></a>3.3.1首先打开服务器防火墙3389端口</h5><p>在云服务器控制台和<strong>宝塔</strong>（如果有的话）那里都要打开</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230224220507199.png" alt="image-20230224220507199"></p><p>当然如果为了更加安全，可以不要用3389端口</p><h5 id="3-3-2-配置免密登录"><a href="#3-3-2-配置免密登录" class="headerlink" title="3.3.2 配置免密登录"></a>3.3.2 配置免密登录</h5><p>这里比较简单</p><p>首先可以在本机电脑创建ssh密钥（如果已经创建了会有提示）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen<br></code></pre></td></tr></table></figure><p>成功执行后该命令会在<code>~/.ssh</code>文件夹下生成<code>id_rsa</code>文件和<code>id_rsa.pub</code>文件，前者是私钥，需要妥善保管防止泄露，后者是公钥，需要保存到服务器上。可以通过执行以下命令来自动将公钥上传至服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-copy-id &lt;服务器用户名&gt;@&lt;服务器IP&gt;<br></code></pre></td></tr></table></figure><p>当然如果你的电脑上没有<code>ssh-copy-id</code>命令，可以手动将本地的<code>~/.ssh/id_rsa.pub</code>文件中的内容<strong>全部</strong>追加到到服务器中的<code>~/.ssh/authorized_keys</code>文件后面（记得要换行哦，一行是一个不佟的ssh密钥）。</p><p>可以使用vim命令去编辑该文件，如果vim不会的话（建议去学一学，很实用，记住常用的命令即可）</p><p>可以在本地执行一下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp ~/.ssh/id_rsa.pub &lt;服务器用户名&gt;@&lt;服务器IP&gt;:~/<br></code></pre></td></tr></table></figure><p>然后在服务器上执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br><span class="hljs-built_in">rm</span> ~/id_rsa.pub<br></code></pre></td></tr></table></figure><p>ssh尝试连接服务器时，会自动匹配<code>~/.ssh/authorized_keys</code>中的公钥和你的私钥，如果成功配对，则不需要输入密码就可以连接到服务器了。</p><p>如果不行的话可以往下翻阅，下面有写连接失败的原因</p><h5 id="3-3-3-配置服务器的sshd服务"><a href="#3-3-3-配置服务器的sshd服务" class="headerlink" title="3.3.3 配置服务器的sshd服务"></a>3.3.3 配置服务器的sshd服务</h5><p>在服务器上编辑<code>/etc/ssh/sshd_config</code>文件，，找到<code>#GatewayPorts no</code>改为<code>yes</code>并去掉注释。</p><p>重启sshd服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart sshd<br></code></pre></td></tr></table></figure><h5 id="3-3-4-被控制端ssh端口转发"><a href="#3-3-4-被控制端ssh端口转发" class="headerlink" title="3.3.4 被控制端ssh端口转发"></a>3.3.4 被控制端ssh端口转发</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -NfR &lt;服务器IP&gt;:&lt;服务器Port&gt;:&lt;本地IP&gt;:&lt;本地Port&gt; &lt;服务器用户名&gt;@&lt;服务器IP&gt;<br><br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><strong>服务器IP</strong>为你的云服务器的公网IP</li><li><strong>服务器Port</strong>为之前在防火墙中打开的端口，默认为3389</li><li><strong>本地IP</strong>一般填写<code>localhost</code></li><li><strong>本地Port</strong>为启用远程桌面的高级设置中指定的端口，默认为3389</li><li><strong>服务器用户名</strong>为你登陆云服务器的用户名</li><li>**<code>-R</code>**表示远程端口转发</li><li>**<code>-N</code>**表示不执行命令，只进行端口转发</li><li>**<code>-f</code>**表示将ssh放到后台执行</li></ul><p>事实上当我们准备好所有东西后，本地电脑开机的时候我们只需要执行上述这一条命令就可以实现端口转发了，你就可以在任何有互联网的地方远程连接电脑啦！</p><p>但是ssh的连接是<strong>非常不稳定</strong>的，那么如何来解决这个问题呢。</p><h4 id="4-保持ssh连接稳定"><a href="#4-保持ssh连接稳定" class="headerlink" title="4. 保持ssh连接稳定"></a>4. 保持ssh连接稳定</h4><blockquote><p>这里我尝试了好几种方法，但是很多都不太成功，就在这里写下来，供大家参考，顺便看看能不能找出问题，一劳永逸的解决吧</p></blockquote><h5 id="方法1-使用电脑自带的创建计划任务来执行。（不太推荐）"><a href="#方法1-使用电脑自带的创建计划任务来执行。（不太推荐）" class="headerlink" title="方法1 使用电脑自带的创建计划任务来执行。（不太推荐）"></a>方法1 使用电脑自带的创建计划任务来执行。（不太推荐）</h5><h5 id="（成功率不高，有的时候可能可以连接很久，有时很快就断联了）"><a href="#（成功率不高，有的时候可能可以连接很久，有时很快就断联了）" class="headerlink" title="（成功率不高，有的时候可能可以连接很久，有时很快就断联了）"></a>（成功率不高，有的时候可能可以连接很久，有时很快就断联了）</h5><p>该方法比较简单，但是不算很有效</p><p>大概方法如下</p><ul><li><p>找到 <strong>任务计划程序</strong></p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230224222136764.png" alt="image-20230224222136764" style="zoom:80%;" /></li><li><p>创建任务</p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230224222249147.png" alt="image-20230224222249147" style="zoom: 67%;" /></li><li><p>常规如下</p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230224222351820.png" alt="image-20230224222351820" style="zoom:67%;" /></li><li><p>创建触发器</p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230224222442579.png" alt="image-20230224222442579" style="zoom:67%;" /></li><li><p>创建新的操作，参数是自己的那些ip地址</p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230224222635395.png" alt="image-20230224222635395" style="zoom:80%;" /></li><li><p>最后是设置</p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20230224222705230.png" alt="image-20230224222705230" style="zoom:80%;" /><p>接下来我们启动该任务就可以啦</p></li></ul><p><strong>但是</strong>，即使是这样也还是会断联，但是目前没找出是什么原因，而且wifi有时候也会断连，校园网也可能会有时把我的账号给登出去，所以emm我继续寻找其他办法。</p><h5 id="方法2-autossh（成功率高）"><a href="#方法2-autossh（成功率高）" class="headerlink" title="方法2 autossh（成功率高）"></a>方法2 autossh（成功率高）</h5><ol><li><strong>配置cygwin</strong>（windows需要配置cygwin才能用autossh）</li></ol><p>这一篇是命令的解释参考</p><p><a href="https://zhuanlan.zhihu.com/p/112227542">利用AutoSSH建立SSH隧道，实现内网穿透 - 知乎 (zhihu.com)</a></p><p>这里放上下载cygwin的文章，cygwin下载还是很方便的，主要就是下载各种插件，如果漏装了就重新运行安装程序，补充包就可以了</p><p><a href="https://blog.csdn.net/hu_yinghui/article/details/125263154?spm=1001.2014.3001.5501">(127条消息) windows下安装Cygwin详细教程_快乐小胡！的博客-CSDN博客</a></p><p>安装autossh和启动的文章</p><p><a href="https://blog.csdn.net/hu_yinghui/article/details/125286383">(153条消息) 如何在 Windows 上安装 Autossh服务_autossh windows_快乐小胡！的博客-CSDN博客</a></p><p><strong>注意事项</strong>：这里呢他们两个的文章都有些地方写的不是很详细</p><p>这里补充一些</p><ul><li>用win+R进入services.msc，然后更改autossh登录信息，输入自己的账户，最后启动</li><li>如果全部都弄好后发现还是无法进行ssh连接，看一下有没有在cygwin的情况下生成<strong>一个新的公钥</strong>，因为电脑本地的那个是无法让cygwin连上远程服务器的，并且生成公钥的地址也不一样（地址名字很相似）</li><li>如果执行一些命令发生类似<code>cygrunsrv: Error installing a service</code>的错误，可能是没有以管理员权限运行。</li></ul><ol start="2"><li><strong>autossh命令</strong>：</li></ol><p>如果你的电脑是Linux操作系统，那么使用autossh就很简单了</p><p>首先是在自己的本地电脑上执行命令安装Autossh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install autossh<br></code></pre></td></tr></table></figure><ol start="3"><li><p><strong>将autossh安装为windows服务命令</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">cygrunsrv -I AutoSSH -p /bin/autossh -e AUTOSSH_NTSERVICE=yes<br></code></pre></td></tr></table></figure></li></ol><p>然后建立SSH隧道，只需要一条代码，非常的简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">autossh -M 4010 -NR 80:localhost:4000 username@xxx.xxx.xxx.xxx (-p xxxx)<br>发布的时候记得删掉下面的！<br>autossh -M 21133 -f -N -R 11233:localhost:3389 root@114.132.247.232<br><br>cygrunsrv -I AutoSSH -p /bin/autossh -a <span class="hljs-string">&quot;-M 21133 -fNR 11233:localhost:3389 root@114.132.247.232&quot;</span> -e AUTOSSH_NTSERVICE=<span class="hljs-built_in">yes</span><br><br>这里可以直接用autossh来建立隧道，也可以用cygwin来开启一个服务，用来自动运行autossh<br><br></code></pre></td></tr></table></figure><p> <strong>参数解释：</strong></p><ul><li>“-M 4010”意思是使用内网主机 A 的 4010 端口监视 SSH 连接状态，连接出问题了会自动重连</li><li>“ -N”意思是不执行远程命令</li><li>“-R”意思是将远程主机（公网主机 B）的某个端口转发到本地指定机器的指定端口</li></ul><p> <strong>代码解释：</strong></p><ul><li>“80:localhost:4000”意思是将内网主机 A 的 4000 号端口转发至公网主机 B 的 80 号端口上</li><li>“<a href="mailto:&#x75;&#115;&#x65;&#x72;&#x6e;&#97;&#x6d;&#101;&#64;&#x78;&#x78;&#120;&#46;&#x78;&#x78;&#x78;&#46;&#120;&#120;&#120;&#x2e;&#x78;&#120;&#120;">username@xxx.xxx.xxx.xxx</a>”意思是公网主机 B 的用户名和 IP</li><li>“-p xxxx”意思是公网主机 B 的 SSH 端口，如果是默认的 22 号端口，则可以不输入.</li></ul><hr><h3 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h3><h4 id="1-登录ssh的时候permission-deny"><a href="#1-登录ssh的时候permission-deny" class="headerlink" title="1. 登录ssh的时候permission deny"></a>1. 登录ssh的时候permission deny</h4><p>这种情况有很多，网上也有很多教程</p><p>这里列举一些比较好的</p><p><a href="https://blog.csdn.net/imliuqun123/article/details/99862506?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%94%A8%E4%BA%86%E5%AF%86%E9%92%A5%E8%BF%98%E6%98%AF%E8%A6%81%E5%AF%86%E7%A0%81&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-99862506.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&spm=1018.2226.3001.4187">(150条消息) 【Linux】ssh设置了密钥，但ssh登陆的时候还需要输入密码_zclinux_的博客-CSDN博客_sftp密钥登陆后还需要密码</a></p><p>我当时总是输入密码错误，后面不记得调了什么就又可以了，应该是开了那个<code>PermitRootLogin yes</code>在我的文件里面默认这个是被注释掉了</p><ul><li><p>还有这个<code>RSAAuthentication yes</code>我找不到，其他基本都是正确的。</p></li><li><p>或者ssh密钥已经设置好了的时候还是要密码，要去确认一下authorized_key文件到底有没有写错，记得要分行，一个ssh公钥是一行（画面显示的时候可能会因为屏幕不够长换成多行）</p></li><li><p>Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password</p><p>如果是提示这个的时候呢，其实可能就真的是公钥出问题啦，记得要去看一下，当然也可以上网搜其他方法</p></li></ul><h4 id="2-电脑无法成功连接"><a href="#2-电脑无法成功连接" class="headerlink" title="2. 电脑无法成功连接"></a>2. 电脑无法成功连接</h4><ul><li><p>比如可能用户名弄错了，密码一般是我们登录微软账号的那个，不要输pin的。</p></li><li><p>可以把那个”仅限网络身份级别连接的勾选“给去掉尝试一下。</p></li><li><p>ip地址也要注意不要写错，比如我们的校园网的ip地址每天都会变的。（如果做了内网穿透就不会变）</p></li><li><p>如果有用<strong>宝塔页面</strong>，则记得也要去宝塔那里开启3389的端口，否则也是无法远程连接的</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>各种随笔经验记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>A*算法实现八数码.md</title>
    <link href="/2022/10/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8A/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/A%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%85%AB%E6%95%B0%E7%A0%81/"/>
    <url>/2022/10/21/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%B8%89%E4%B8%8A/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA/A%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E5%85%AB%E6%95%B0%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="A-算法实现八数码"><a href="#A-算法实现八数码" class="headerlink" title="A*算法实现八数码"></a>A*算法实现八数码</h1><blockquote><p>启发式搜索(Heuristically Search)又称为有信息搜索(Informed Search)，它是利用问题拥有的启发信息来引导搜索，达到减少搜索范围、降低问题复杂度的目的，这种利用启发信息的搜索过程称为启发式搜索。其代表算法为：贪婪最佳优先搜索(Greedy best-first search)和A ∗ 搜索</p></blockquote><h4 id="具体实现思路可参考以下文章"><a href="#具体实现思路可参考以下文章" class="headerlink" title="具体实现思路可参考以下文章"></a>具体实现思路可参考以下文章</h4><p>八数码的对应解法： <a href="https://blog.csdn.net/weixin_45336082/article/details/115264396">(113条消息) 【八数码问题】基于状态空间法的知识表示与状态搜索:无信息搜索(BFS&#x2F;DFS) &amp; 启发式搜索(A*)_DtxGogogo的博客-CSDN博客_八数码问题的状态空间图</a></p><p>启发式搜索算法思路讲解（这一篇讲的挺清晰的了，看给出的例子基本可以看懂了）：<a href="https://zhiqianghe.blog.csdn.net/article/details/104211475">(114条消息) 启发式搜索 (Heuristically Search)-【贪婪最佳优先搜索】和【A*搜索】_小小何先生的博客-CSDN博客_贪婪最佳优先搜索</a></p><hr><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p><strong>算法思路</strong></p><ul><li>算法里面，其评价函数由两部分组成，定义如下：</li></ul><p>$$<br>f（n） &#x3D; g（n） + h（n）<br>$$</p><ul><li>g ( n ) 表示的是从<strong>起始</strong>节点到<strong>当前</strong>的节点n的<strong>实际路径</strong>；h ( n ) 表示从当前节点n到目标节点路径中所估算的<strong>最小路径</strong>（也就是直线路径）。</li></ul><p><strong>八数码对应思路</strong></p><p><strong>g（n）</strong>：</p><p>在八数码中可以视为<strong>空格走过的步数</strong>，其实就是树的深度</p><p><strong>欧式距离法求h（n）</strong>:<br>欧式距离: 初始状态中的每一个棋子位置与目标状态的相应棋子位置的几何距离</p><p>  例如：初始状态的6和目标状态的6相差了1个单位距离，初始状态的8和目标状态的8相差了根号2个单位距离<img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/20210323213339711.png" alt="来自CSDN"><br>  因此我们的启发函数就是去找出<strong>当前状态</strong>所有不在目标位置的棋子，它们距离目标位置的<strong>欧式距离之和</strong>就是当前状态到目标状态的开销估计代价h ( n )。</p><hr><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><blockquote><p>有了大概思路之后，其实就很好写了，只需要参照原来BFS的框架去改动就可以了，代码思路<strong>要结合BFS的思路</strong>一起食用，因为是基于它的框架来进行修改</p></blockquote><h3 id="改动部分："><a href="#改动部分：" class="headerlink" title="改动部分："></a>改动部分：</h3><h3 id="1-Main函数"><a href="#1-Main函数" class="headerlink" title="1.Main函数"></a>1.Main函数</h3><p>main函数部分几乎<strong>没有改动</strong></p><ul><li>在最初的State类上面多了一个deepnum,表示的是层数，也表示g（n），即走过的步数</li><li>不需要OPEN表</li></ul><h3 id="2-State类成员变量"><a href="#2-State类成员变量" class="headerlink" title="2.State类成员变量"></a>2.State类成员变量</h3><p>新增了<strong>两个</strong>成员变量和一个静态成员变量</p><ul><li><p>新增Deep表示层数</p></li><li><p>新增Evaluation表示<strong>评估函数</strong> F(n)，后面会有计算评估函数的成员方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span>:<br>    Tar_State = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, CuState, index, deepNum, parent=<span class="hljs-literal">None</span>, <span class="hljs-built_in">dir</span>=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-variable language_">self</span>.parent = parent  <span class="hljs-comment"># 父亲节点</span><br>        <span class="hljs-variable language_">self</span>.Direction = <span class="hljs-built_in">dir</span><br>        <span class="hljs-variable language_">self</span>.Matrix = CuState<br>        <span class="hljs-variable language_">self</span>.CuIndex = index<br>        <span class="hljs-variable language_">self</span>.Deep = deepNum <span class="hljs-comment">#g(n): 节点深度，表示空格走过的步数</span><br>        <span class="hljs-variable language_">self</span>.Evaluation = <span class="hljs-number">0.0</span> <span class="hljs-comment">#评估函数 = g(n) + h(n)</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="3-State类成员函数"><a href="#3-State类成员函数" class="headerlink" title="3.State类成员函数"></a>3.State类成员函数</h3><p>新增<strong>两个</strong>成员函数,Find（）和Create_Next_State（）函数有所改动</p><ul><li><p><code>GetIndex(int indexNum)</code> 用来查找<strong>某个数字</strong>在<strong>目标状态</strong>的矩阵的哪个位置</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221008223239483.png" alt="image-20221008223239483"></p></li><li><p><code>Get_H_fun(State Next_State)</code> 计算评估函数当中h（n）的值并且返回</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20221008223408892.png" alt="image-20221008223408892"></p></li><li><p><code> Create_Next_State(self, Cu_index, Next_index, Fir_State, Dir)</code> 和原来的差不多，但是多了个deepNum且每次自增会＋1</p><p>其次在最后要多一行<strong>计算评估函数</strong>的代码</p></li><li><p>Find（）函数的话，整体思路是差不多的，也是在一个while循环里面不断获取新的状态并且判断，这里是要计算每一次新状态的评估函数，</p><p>并且比较四个新状态（如果有状态在CLOSE表里面重复了则不会参与比较，这样可以<strong>节省</strong>比较次数，并且<strong>不会死循环</strong>）的评估函数大小，下一次循环则用当前f（n）最小的那一个</p><p>剩下的就是一些具体小细节要注意，例如Index记得更新，然后区分好MinPath和_MinPath的作用（在代码中的变量）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Find</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">global</span> CLOSE<br>    stateNum = <span class="hljs-number">0</span><br>    Index = <span class="hljs-variable language_">self</span>.CuIndex<br>    _MinPath=MinPath = <span class="hljs-variable language_">self</span><span class="hljs-comment"># 用来标记最小值</span><br>    MinPath.Evaluation = <span class="hljs-number">9999.0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        CLOSE.push(MinPath)<br>        MinPath = copy.deepcopy(_MinPath)<br>        Index = MinPath.CuIndex<br>        _MinPath = <span class="hljs-variable language_">self</span> <span class="hljs-comment">#重新寻找当前父节点下的最小值</span><br>        <span class="hljs-keyword">if</span> ((Index + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>):  <span class="hljs-comment">#右边界条件</span><br>            Right_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index + <span class="hljs-number">1</span>, MinPath, <span class="hljs-string">&quot;Right&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Right_State): <span class="hljs-comment">#判断是否已经走过了这条路径</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Right&quot;</span>)<span class="hljs-comment"># 代表可以向右移动</span><br>                <span class="hljs-keyword">if</span> (Right_State.Matrix == TargetState).<span class="hljs-built_in">all</span>(): <span class="hljs-comment"># numpy中对比数组中所有元素的方法</span><br>                    <span class="hljs-keyword">return</span> Right_State<br>                    <span class="hljs-comment">#Next_State.ShowState()</span><br>                    <span class="hljs-comment">#判断下一个节点的估值函数是否比当前存储的小</span><br>                <span class="hljs-keyword">elif</span>(_MinPath.Evaluation &gt; Right_State.Evaluation):<br>                    _MinPath = Right_State        <span class="hljs-comment"># 先用_MinPath来暂时存储最小路径，下一个循环的时候再使用 </span><br>                CLOSE.push(Right_State)<br>  <br>        <span class="hljs-keyword">if</span> (Index % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>):  <span class="hljs-comment">#右边界条件</span><br>            Left_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index - <span class="hljs-number">1</span>, MinPath, <span class="hljs-string">&quot;Left&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Left_State): <span class="hljs-comment">#判断是否已经走过了这条路径</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Left&quot;</span>)<span class="hljs-comment"># 代表可以向右移动</span><br>                <span class="hljs-keyword">if</span> (Left_State.Matrix == TargetState).<span class="hljs-built_in">all</span>(): <span class="hljs-comment"># numpy中对比数组中所有元素的方法</span><br>                    <span class="hljs-keyword">return</span> Left_State<br>                    <span class="hljs-comment">#Next_State.ShowState()</span><br>                    <span class="hljs-comment">#判断下一个节点的估值函数是否比当前存储的小</span><br>                <span class="hljs-keyword">elif</span>(_MinPath.Evaluation &gt; Left_State.Evaluation):<br>                    _MinPath = Left_State    <span class="hljs-comment"># 先用_MinPath来暂时存储最小路径，下一个循环的时候再使用 </span><br>                CLOSE.push(Left_State)                        <br>  <br>        <span class="hljs-keyword">if</span> (Index - <span class="hljs-number">3</span> &gt;= <span class="hljs-number">0</span>):  <span class="hljs-comment">#上边界条件</span><br>            Up_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index - <span class="hljs-number">3</span>, MinPath, <span class="hljs-string">&quot;Up&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Up_State): <span class="hljs-comment">#判断是否已经走过了这条路径</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Up&quot;</span>)<span class="hljs-comment"># 代表可以向右移动</span><br>                <span class="hljs-keyword">if</span> (Up_State.Matrix == TargetState).<span class="hljs-built_in">all</span>(): <span class="hljs-comment"># numpy中对比数组中所有元素的方法</span><br>                    <span class="hljs-keyword">return</span> Up_State<br>                    <span class="hljs-comment">#Next_State.ShowState()</span><br>                    <span class="hljs-comment">#判断下一个节点的估值函数是否比当前存储的小</span><br>                <span class="hljs-keyword">elif</span>(_MinPath.Evaluation &gt; Up_State.Evaluation):<br>                    _MinPath = Up_State        <span class="hljs-comment"># 先用_MinPath来暂时存储最小路径，下一个循环的时候再使用 </span><br>                CLOSE.push(Up_State)                        <br>        <br>        <span class="hljs-keyword">if</span> (Index + <span class="hljs-number">3</span> &lt;= <span class="hljs-number">8</span>):  <span class="hljs-comment">#下边界条件</span><br>            Down_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index + <span class="hljs-number">3</span>, MinPath, <span class="hljs-string">&quot;Down&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Down_State): <span class="hljs-comment">#判断是否已经走过了这条路径</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Down&quot;</span>)<span class="hljs-comment"># 代表可以向右移动</span><br>                <span class="hljs-keyword">if</span> (Down_State.Matrix == TargetState).<span class="hljs-built_in">all</span>(): <span class="hljs-comment"># numpy中对比数组中所有元素的方法</span><br>                    <span class="hljs-keyword">return</span> Down_State<br>                    <span class="hljs-comment">#Next_State.ShowState()</span><br>                    <span class="hljs-comment">#判断下一个节点的估值函数是否比当前存储的小</span><br>                <span class="hljs-keyword">elif</span>(_MinPath.Evaluation &gt; Down_State.Evaluation):<br>                    _MinPath = Down_State         <span class="hljs-comment"># 先用_MinPath来暂时存储最小路径，下一个循环的时候再使用</span><br>                CLOSE.push(Down_State)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;One layer Through，now Min f(n) = &quot;</span>,_MinPath.Evaluation)<br></code></pre></td></tr></table></figure><p>最后说一下，该循环是走不出去的，必定要找到目标状态才会停下来，而怎么判断是否该初始状态是否最终能够达到目标状态我好像还不知道怎么写，到时候再完善吧（没有那个时候了可能哈哈哈）</p></li></ul><hr><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>  本次实验也是参照了很多博客的思路，其中帮助比较大的也已经写在文章的上方了，由于笔者本人对于python还不是很熟练，因此写出来的代码难免会有许多冗余的地方，也请多多谅解，本身写这篇东西的目的就是为了做一个记录，也方便以后再次查阅，若能够对他人起到帮助则是锦上添花了。</p><p>  A*算法其实理解下来之后也不是很难，重点还是怎么样去构建一个评估函数可以让其更好的发挥效果，想写出一个代码框架不算特别难，不过笔者能力有限，因此搭建好代码框架之后，花了很多时间去debug自己写的东西，继续努力吧，共勉</p><hr><h2 id="附上全部代码"><a href="#附上全部代码" class="headerlink" title="附上全部代码"></a>附上全部代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> copy<br><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span>:  <span class="hljs-comment"># 队列数据结构</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, size</span>):<br>        <span class="hljs-variable language_">self</span>.front = -<span class="hljs-number">1</span><br>        <span class="hljs-variable language_">self</span>.rear = -<span class="hljs-number">1</span><br>        <span class="hljs-variable language_">self</span>._size = size<br>        <span class="hljs-variable language_">self</span>._queue = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, data</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-variable language_">self</span>.isFull()):<br>            <span class="hljs-variable language_">self</span>._queue.append(data)<br>            <span class="hljs-variable language_">self</span>.rear += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-variable language_">self</span>.isEmpty()):<br>            <span class="hljs-variable language_">self</span>._queue.pop(<span class="hljs-number">0</span>)<br>            <span class="hljs-variable language_">self</span>.rear -= <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isFull</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 队列满时返回1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.rear == <span class="hljs-variable language_">self</span>._size - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isEmpty</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 队列空时返回1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.rear == -<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getFont</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">self</span>.isEmpty() == <span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>._queue[<span class="hljs-number">0</span>]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span>:<br>    Tar_State = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, CuState, index, deepNum, parent=<span class="hljs-literal">None</span>, <span class="hljs-built_in">dir</span>=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-variable language_">self</span>.parent = parent  <span class="hljs-comment"># 父亲节点</span><br>        <span class="hljs-variable language_">self</span>.Direction = <span class="hljs-built_in">dir</span><br>        <span class="hljs-variable language_">self</span>.Matrix = CuState<br>        <span class="hljs-variable language_">self</span>.CuIndex = index<br>        <span class="hljs-variable language_">self</span>.Deep = deepNum <span class="hljs-comment">#g(n): 节点深度，表示空格走过的步数</span><br>        <span class="hljs-variable language_">self</span>.Evaluation = <span class="hljs-number">0.0</span> <span class="hljs-comment">#评估函数 = g(n) + h(n)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ShowState</span>(<span class="hljs-params">self</span>):<span class="hljs-comment">#打印矩阵信息</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move &quot;</span>,<span class="hljs-variable language_">self</span>.Direction,<span class="hljs-string">&quot; f(n) = &quot;</span>,<span class="hljs-variable language_">self</span>.Evaluation)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-variable language_">self</span>.Matrix[j + i * <span class="hljs-number">3</span>],end=<span class="hljs-string">&quot; &quot;</span>)<br>            <span class="hljs-built_in">print</span>()<br>        <span class="hljs-built_in">print</span>()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GetIndex</span>(<span class="hljs-params">self,indexNum</span>): <span class="hljs-comment">#用来查找某个数字在矩阵的哪个位置</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            <span class="hljs-keyword">if</span>(indexNum == State.Tar_State[i]):<br>                <span class="hljs-keyword">return</span> i<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span> <span class="hljs-comment">#返回数组失败</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Swap</span>(<span class="hljs-params">self, Cu_index, Next_index, NState</span>):<span class="hljs-comment">#交换矩阵当中的两个数</span><br>        temp = NState[Cu_index]<br>        NState[Cu_index] = NState[Next_index]<br>        NState[Next_index] = temp<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_Reverse</span>(<span class="hljs-params">self,Matrix</span>): <span class="hljs-comment">#计算逆序数</span><br>        State_Matrix = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            State_Matrix.append(Matrix[i])<br>        State_Matrix.remove(<span class="hljs-number">0</span>)<br>        reverse_number = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> cur <span class="hljs-keyword">in</span> State_Matrix:<br>            index = State_Matrix.index(cur)<br>            <span class="hljs-comment"># 遍历cur后面的数字</span><br>            <span class="hljs-keyword">for</span> after_cur <span class="hljs-keyword">in</span> State_Matrix[index:]:<br>                <span class="hljs-keyword">if</span> cur &gt; after_cur:<br>                    reverse_number += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> reverse_number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_Solvable</span>(<span class="hljs-params">self</span>): <span class="hljs-comment">#判断该状态是否有解</span><br>        init_Reverse_Num = <span class="hljs-variable language_">self</span>.calculate_Reverse(<span class="hljs-variable language_">self</span>.Matrix)<br>        Tar_Reverse_Num = <span class="hljs-variable language_">self</span>.calculate_Reverse(<span class="hljs-variable language_">self</span>.Tar_State)<br>        <span class="hljs-keyword">if</span> init_Reverse_Num == Tar_Reverse_Num:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The State is solvable&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The State is unsolvable&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_State_Existed</span>(<span class="hljs-params">self,CLOSE,Next_State</span>):<span class="hljs-comment">#用来判读新的状态是否和CLOSE表里面的有重叠</span><br>        <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> CLOSE._queue:<br>            <span class="hljs-keyword">if</span>(Next_State.Matrix == node.Matrix).<span class="hljs-built_in">all</span>():<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-comment">#表示已经有元素存在，不会将该状态入队</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Get_H_fun</span>(<span class="hljs-params">self,Next_State</span>):<span class="hljs-comment"># 计算h（n）的大小并且返回h(n)的值</span><br>        h_distance = <span class="hljs-number">0.0</span><br>        <span class="hljs-keyword">for</span> index_cur <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            <span class="hljs-keyword">if</span> Next_State.Matrix[index_cur] != State.Tar_State[index_cur]:<br>                x_cur = index_cur % <span class="hljs-number">3</span><span class="hljs-comment">#该数字当前的索引 空间坐标</span><br>                y_cur = <span class="hljs-built_in">int</span>(index_cur / <span class="hljs-number">3</span>)<br>                index_tar = <span class="hljs-variable language_">self</span>.GetIndex(Next_State.Matrix[index_cur])<span class="hljs-comment">#目标矩阵该数字的对应索引位置</span><br>                x_tar = index_tar % <span class="hljs-number">3</span><span class="hljs-comment">#该数字当前的索引 空间坐标</span><br>                y_tar = <span class="hljs-built_in">int</span>(index_tar / <span class="hljs-number">3</span>) <span class="hljs-comment">#强制转换是为了让y轴只有0~2这三个数</span><br>                h_n_each = math.sqrt((x_cur - x_tar) ** <span class="hljs-number">2</span> + (y_cur - y_tar) ** <span class="hljs-number">2</span>)<br>                h_distance += h_n_each<br>        <span class="hljs-keyword">return</span> h_distance<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Create_Next_State</span>(<span class="hljs-params">self, Cu_index, Next_index, Fir_State, Dir</span>):<span class="hljs-comment">#通过上一个节点来产生一个新的State类，含有新的方向和数组</span><br>        Next_State = State(<br>            CuState=Fir_State.Matrix.copy(),<br>            index=Next_index,<br>            deepNum=Fir_State.Deep + <span class="hljs-number">1</span>,<br>            parent=Fir_State, <span class="hljs-comment">#指向上一个节点</span><br>            <span class="hljs-built_in">dir</span>=Dir)<br>        <span class="hljs-variable language_">self</span>.Swap(Cu_index, Next_index, Next_State.Matrix)<br>        Next_State.Evaluation = <span class="hljs-variable language_">self</span>.Get_H_fun(Next_State) + Next_State.Deep<br>        <span class="hljs-keyword">return</span> Next_State<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Find</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">global</span> CLOSE<br>        Index = <span class="hljs-variable language_">self</span>.CuIndex<br>        _MinPath=MinPath = <span class="hljs-variable language_">self</span><span class="hljs-comment"># 用来标记最小值</span><br>        MinPath.Evaluation = <span class="hljs-number">9999.0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_Solvable(): <span class="hljs-comment"># 用逆序数来判断是否有解</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            CLOSE.push(MinPath)<br>            MinPath = copy.deepcopy(_MinPath)<br>            Index = MinPath.CuIndex<br>            _MinPath = <span class="hljs-variable language_">self</span> <span class="hljs-comment">#重新寻找当前父节点下的最小值</span><br>            <span class="hljs-keyword">if</span> ((Index + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>):  <span class="hljs-comment">#右边界条件</span><br>                Right_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index + <span class="hljs-number">1</span>, MinPath, <span class="hljs-string">&quot;Right&quot;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Right_State): <span class="hljs-comment">#判断是否已经走过了这条路径</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Right ,&quot;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment"># 代表可以向右移动</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;its f(n) = &#x27;</span>,Right_State.Evaluation)<br>                    <span class="hljs-keyword">if</span> (Right_State.Matrix == TargetState).<span class="hljs-built_in">all</span>(): <span class="hljs-comment"># numpy中对比数组中所有元素的方法</span><br>                        <span class="hljs-keyword">return</span> Right_State<br>                        <span class="hljs-comment">#Next_State.ShowState()</span><br>                        <span class="hljs-comment">#判断下一个节点的估值函数是否比当前存储的小</span><br>                    <span class="hljs-keyword">elif</span>(_MinPath.Evaluation &gt; Right_State.Evaluation):<br>                        _MinPath = Right_State        <span class="hljs-comment"># 先用_MinPath来暂时存储最小路径，下一个循环的时候再使用 </span><br>                    CLOSE.push(Right_State)<br><br>            <span class="hljs-keyword">if</span> (Index % <span class="hljs-number">3</span> != <span class="hljs-number">0</span>):  <span class="hljs-comment">#右边界条件</span><br>                Left_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index - <span class="hljs-number">1</span>, MinPath, <span class="hljs-string">&quot;Left&quot;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Left_State): <span class="hljs-comment">#判断是否已经走过了这条路径</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Left ,&quot;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment"># 代表可以向右移动</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;its f(n) = &#x27;</span>,Left_State.Evaluation)<br>                    <span class="hljs-keyword">if</span> (Left_State.Matrix == TargetState).<span class="hljs-built_in">all</span>(): <span class="hljs-comment"># numpy中对比数组中所有元素的方法</span><br>                        <span class="hljs-keyword">return</span> Left_State<br>                        <span class="hljs-comment">#Next_State.ShowState()</span><br>                        <span class="hljs-comment">#判断下一个节点的估值函数是否比当前存储的小</span><br>                    <span class="hljs-keyword">elif</span>(_MinPath.Evaluation &gt; Left_State.Evaluation):<br>                        _MinPath = Left_State    <span class="hljs-comment"># 先用_MinPath来暂时存储最小路径，下一个循环的时候再使用 </span><br>                    CLOSE.push(Left_State)                        <br><br>            <span class="hljs-keyword">if</span> (Index - <span class="hljs-number">3</span> &gt;= <span class="hljs-number">0</span>):  <span class="hljs-comment">#上边界条件</span><br>                Up_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index - <span class="hljs-number">3</span>, MinPath, <span class="hljs-string">&quot;Up&quot;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Up_State): <span class="hljs-comment">#判断是否已经走过了这条路径</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Up ,&quot;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment"># 代表可以向右移动</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;its f(n) = &#x27;</span>,Up_State.Evaluation)<br>                    <span class="hljs-keyword">if</span> (Up_State.Matrix == TargetState).<span class="hljs-built_in">all</span>(): <span class="hljs-comment"># numpy中对比数组中所有元素的方法</span><br>                        <span class="hljs-keyword">return</span> Up_State<br>                        <span class="hljs-comment">#Next_State.ShowState()</span><br>                        <span class="hljs-comment">#判断下一个节点的估值函数是否比当前存储的小</span><br>                    <span class="hljs-keyword">elif</span>(_MinPath.Evaluation &gt; Up_State.Evaluation):<br>                        _MinPath = Up_State        <span class="hljs-comment"># 先用_MinPath来暂时存储最小路径，下一个循环的时候再使用 </span><br>                    CLOSE.push(Up_State)                        <br>            <br>            <span class="hljs-keyword">if</span> (Index + <span class="hljs-number">3</span> &lt;= <span class="hljs-number">8</span>):  <span class="hljs-comment">#下边界条件</span><br>                Down_State = <span class="hljs-variable language_">self</span>.Create_Next_State(Index, Index + <span class="hljs-number">3</span>, MinPath, <span class="hljs-string">&quot;Down&quot;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-variable language_">self</span>.is_State_Existed(CLOSE,Down_State): <span class="hljs-comment">#判断是否已经走过了这条路径</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Move Down ,&quot;</span>,end=<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment"># 代表可以向右移动</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;its f(n) = &#x27;</span>,Down_State.Evaluation)<br>                    <span class="hljs-keyword">if</span> (Down_State.Matrix == TargetState).<span class="hljs-built_in">all</span>(): <span class="hljs-comment"># numpy中对比数组中所有元素的方法</span><br>                        <span class="hljs-keyword">return</span> Down_State<br>                        <span class="hljs-comment">#Next_State.ShowState()</span><br>                        <span class="hljs-comment">#判断下一个节点的估值函数是否比当前存储的小</span><br>                    <span class="hljs-keyword">elif</span>(_MinPath.Evaluation &gt; Down_State.Evaluation):<br>                        _MinPath = Down_State         <span class="hljs-comment"># 先用_MinPath来暂时存储最小路径，下一个循环的时候再使用</span><br>                    CLOSE.push(Down_State)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;One layer Through，now Min f(n) = &quot;</span>,_MinPath.Evaluation)<br>            <span class="hljs-built_in">print</span>()                                        <br>                    <br><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">1</span>:<br>        OriginState = np.array([<span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>,<br>                    <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>,<br>                    <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>])<br>        Or_Index = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">0</span>:<br>        OriginState = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>,<br>                    <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>,<br>                    <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>])    <br>        Or_Index = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">0</span>:<br>        OriginState = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<br>                    <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>,<br>                    <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>])    <br>        Or_Index = <span class="hljs-number">4</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">0</span>:<br>        OriginState = np.array([<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">3</span>,<br>                    <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>,<br>                    <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>])<br>        Or_Index = <span class="hljs-number">6</span><br>                                                 <br>    TargetState = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<br>                   <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>,<br>                   <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>])<br>    CLOSE = MyQueue(<span class="hljs-number">300</span>)<br>    State.Tar_State = TargetState<br>    Or_State = State(CuState=OriginState,deepNum=<span class="hljs-number">0</span>, index=Or_Index)<br>    EndState = Or_State.Find() <span class="hljs-comment">#若查询失败返回Origin节点，没有父类，因此不输出</span><br>    Path = [] <span class="hljs-comment"># 用来存储节点路径，用于正序输出</span><br>    <span class="hljs-keyword">while</span> (EndState.parent <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>):<br>        Path.append(EndState)<br>        EndState = EndState.parent<br>    <span class="hljs-keyword">if</span>(Path):<br>        Or_State.ShowState()<br>        Path.reverse()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Path:<br>            i.ShowState()    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大三上</category>
      
      <category>人工智能导论</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于电磁循迹的STC16四轮车</title>
    <link href="/2022/08/20/%E5%A4%A7%E5%AD%A6%E7%AB%9E%E8%B5%9B/%E6%99%BA%E8%83%BD%E8%BD%A6/%E5%9F%BA%E4%BA%8E%E7%94%B5%E7%A3%81%E5%BE%AA%E8%BF%B9%E7%9A%84STC16%E5%9B%9B%E8%BD%AE%E8%BD%A6%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    <url>/2022/08/20/%E5%A4%A7%E5%AD%A6%E7%AB%9E%E8%B5%9B/%E6%99%BA%E8%83%BD%E8%BD%A6/%E5%9F%BA%E4%BA%8E%E7%94%B5%E7%A3%81%E5%BE%AA%E8%BF%B9%E7%9A%84STC16%E5%9B%9B%E8%BD%AE%E8%BD%A6%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="基于电磁循迹的STC16四轮车（拖延症。。还没怎么写）"><a href="#基于电磁循迹的STC16四轮车（拖延症。。还没怎么写）" class="headerlink" title="基于电磁循迹的STC16四轮车（拖延症。。还没怎么写）"></a>基于电磁循迹的STC16四轮车（拖延症。。还没怎么写）</h1><blockquote><p>项目时间：2022.2 ~ 2022.7</p><p>比赛名称：全国大学生智能车竞赛</p><p>比赛项目：三辆四轮车完成一定的循迹要求</p><p>队友：一共五人，三个人分别负责一辆车的全部内容，包括装配，调试，另外两个人负责画板子和焊板子</p><p>个人负责项目：基于电磁循迹的一辆四轮车</p><p>车模：B车车模</p><p>使用芯片：STC16F</p><p>编译工具：Keil4</p><p>烧录工具 ：stc-isp</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>大学竞赛</category>
      
      <category>智能车</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Projects</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora+Github+Picgo建立图床（后面转Gitee了）</title>
    <link href="/2022/08/09/%E5%90%84%E7%A7%8D%E9%9A%8F%E7%AC%94%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/%E5%90%84%E7%A7%8D%E8%BD%AF%E4%BB%B6%E9%9A%8F%E7%AC%94/typora%E5%9B%BE%E5%BA%8A%E6%8D%A3%E9%BC%93/"/>
    <url>/2022/08/09/%E5%90%84%E7%A7%8D%E9%9A%8F%E7%AC%94%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/%E5%90%84%E7%A7%8D%E8%BD%AF%E4%BB%B6%E9%9A%8F%E7%AC%94/typora%E5%9B%BE%E5%BA%8A%E6%8D%A3%E9%BC%93/</url>
    
    <content type="html"><![CDATA[<h1 id="Typora-Github-Picgo-建立图床然后转战gitee的故事（血泪史）"><a href="#Typora-Github-Picgo-建立图床然后转战gitee的故事（血泪史）" class="headerlink" title="Typora + Github + Picgo 建立图床然后转战gitee的故事（血泪史）"></a>Typora + Github + Picgo 建立图床然后转战gitee的故事（血泪史）</h1><blockquote><p>主要资料还是参照csdn上面的博客（方法基本都一样），我在下面会列链接出来，但是我按照他们的步骤时到最后是可以正常上传到github，picgo也正常，但是typora就是没有办法正常显示（不知道是不是我不是正版的原因）</p><p>噢后面gitee也搞定了，建议国内还是用gitee，这样就不用开梯子也可以比较好的加载图片了</p></blockquote><p><a href="https://blog.csdn.net/weixin_44800419/article/details/122815681">(104条消息) Typora中设置图片自动上传以及图床设置_智者不ru爱河的博客-CSDN博客_typora图片自动上传图床</a></p><p><a href="https://blog.csdn.net/qq_49137582/article/details/123757025?ops_request_misc=%7B%22request_id%22:%22165994463316781790781814%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165994463316781790781814&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-123757025-null-null.142%5Ev39%5Econtrol,185%5Ev2%5Econtrol&utm_term=typora%E5%9B%BE%E5%BA%8Agithub%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA&spm=1018.2226.3001.4187">(104条消息) Typora配置github图床及遇到的问题解决方案_爱学习的大雄的博客-CSDN博客_github图床 typora</a></p><p>这两篇博客都差不多，如果是gitee版本请自行csdn，接下来开始正式讲解</p><hr><h2 id="1-首先是上述三个工具"><a href="#1-首先是上述三个工具" class="headerlink" title="1. 首先是上述三个工具"></a>1. 首先是上述三个工具</h2><p>emm其实上面的教程里面都有教安装和使用，直接看他们的就好了哈哈哈，我就讲一下大概：</p><p>  github是记得保存那个token就可以了，另外两个就正常安装，然后picgo的填写也按照他们给的步骤就好，但是如果自定义域名其实我是用不了的</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/32695e5cc68f05af4f848e9d8484b4fe.png" alt="在这里插入图片描述"></p><h2 id="2-自定义域名更换"><a href="#2-自定义域名更换" class="headerlink" title="2. 自定义域名更换"></a>2. 自定义域名更换</h2><p>如果你和我一样，基本上按照上面博客的步骤来走，然后发现这个域名，你copy下来到<strong>浏览器</strong>上面发现可以正常显示图片，但是在typora或者其他md编辑器里面就是无法打开，</p><p>那么你可以留意一下，是不是你那个url复制下来后，到浏览器打开时候那个url就变了。</p><p><strong>原本的</strong>：</p><p><a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/仓库名</a></p><p><strong>我的更换版本：</strong></p><p><a href="https://raw.githubusercontent.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D/master">https://raw.githubusercontent.com/用户名/仓库名/master</a></p><p>然后就可以显示辣</p><blockquote><p>最后说一下：如果想要用github的图床，然后将md放到其他平台上面（例如csdn），可能网络会不是很好，可能上传会失败，要多上传几次（就是链接上传失败了就重新上传），这里建议如果没有梯子用的话还是建议gitee或者其他国内网站或服务器做图床</p></blockquote><hr><h2 id="我错了，我是sb"><a href="#我错了，我是sb" class="headerlink" title="我错了，我是sb"></a>我错了，我是sb</h2><p>好吧我发现其实都能用，只是设定那里要改一下</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20220809004229634.png" alt="image-20220809004229634"></p><p>如上图，之前我是选择了第四个YAML那个，然后好像就一直不行所以就不要选第四个。</p><p>and其实GitHub图床国内一点都不好用，浪费我时间呜呜，因为不开梯子根本加载不了图片捏。。。</p><p>算了接下来换gitee，还是得乖乖安装node.js</p><hr><h2 id="转战gitee"><a href="#转战gitee" class="headerlink" title="转战gitee"></a>转战gitee</h2><blockquote><p>因为GitHub作为图床的话，你不挂梯子基本上是在typora无法加载图片，然后我就想试试gitee，然后我竟然装node.js又装了一个晚上。。。</p></blockquote><h3 id="跟node又斗争了一晚上"><a href="#跟node又斗争了一晚上" class="headerlink" title="跟node又斗争了一晚上"></a>跟node又斗争了一晚上</h3><h4 id="1-npm指令无效，但是node指令可以"><a href="#1-npm指令无效，但是node指令可以" class="headerlink" title="1.npm指令无效，但是node指令可以"></a>1.npm指令无效，但是node指令可以</h4><p>我服了，浪费了一晚上在这安装node，其实node已经可以正常安装了，但是网上还有上面emm，为了让你npm的拓展包安装到d盘上，然后有些配置方法，真给我整阴影了无语了，压根就不行，算了是我不行。。</p><p><a href="https://blog.csdn.net/antma/article/details/86104068">(104条消息) node.js 安装详细步骤教程_程序员老油条的博客-CSDN博客_node.js</a></p><p>就这篇文章，emm没什么用，直接安装就好，然后如果出现npm指令没有反应，只是空了一行cmd，那看下一篇文章</p><p>[(104条消息) 下载了nodejs但是npm -v的时候没有反应如何解决_ei你可拉倒吧的博客-CSDN博客](<a href="https://blog.csdn.net/qq_50497708/article/details/125633745?ops_request_misc=%7B%22request_id%22:%22165996482416780366522243%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=165996482416780366522243&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-125633745-null-null.142%5Ev39%5Econtrol,185%5Ev2%5Econtrol&utm_term=npm">https://blog.csdn.net/qq_50497708/article/details/125633745?ops_request_misc=%7B%22request%5Fid%22%3A%22165996482416780366522243%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=165996482416780366522243&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-125633745-null-null.142^v39^control,185^v2^control&amp;utm_term=npm</a> -v没有反应&amp;spm&#x3D;1018.2226.3001.4187)</p><p>这个姐们非常有意思啊哈哈哈</p><h4 id="2-npm和node都可以了，，但是比如说我安装node-js到d盘，然后在C盘node显示找不到命令"><a href="#2-npm和node都可以了，，但是比如说我安装node-js到d盘，然后在C盘node显示找不到命令" class="headerlink" title="2.npm和node都可以了，，但是比如说我安装node.js到d盘，然后在C盘node显示找不到命令"></a>2.npm和node都可以了，，但是比如说我安装node.js到d盘，然后在C盘node显示找不到命令</h4><p>ok其实这个要配置一下全局变量？其实好像不用，因为重启电脑之后就可以了，应该是已经配置好了。</p><p>但我也不清楚其实哪些要配置哪些不用。我csdn了很多之后，发现重启就可以了，当然我环境变量那边都配了。</p><p>我晚点删掉试一试还能不能，看看是不是重启的问题。</p><h2 id="跟picgo的gitee插件斗争了一个小时（终于给我搞定了！！）"><a href="#跟picgo的gitee插件斗争了一个小时（终于给我搞定了！！）" class="headerlink" title="跟picgo的gitee插件斗争了一个小时（终于给我搞定了！！）"></a>跟picgo的gitee插件斗争了一个小时（终于给我搞定了！！）</h2><p>首先记得安装gitee-uploader，另一个就叫gitee的没试过</p><p>安装好之后<strong>重启一下</strong>软件，然后打开配置</p><p>配置如下，第一行就是 <strong>用户名</strong>&#x2F;<strong>仓库名</strong> (但是<strong>要注意注意</strong>！！！，所有名称都要小写，无论你的仓库或者用户名里面是否有大写，因为网址解析的时候全都是小写，所以以url为准啊啊啊啊就是这个东西折磨我)</p><p>但其实GitHub那边的配置，仓库名和用户名解析出来的url是分大小写的，所以我就一直以为gitee也是这样，如果你们也是这样就记得改过来就好了呜呜呜😭😭😭</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20220809001817181.png" alt="image-20220809001817181"></p><hr><h3 id="最后总结一下"><a href="#最后总结一下" class="headerlink" title="最后总结一下"></a>最后总结一下</h3><p>鄙人不才，下午开始搞这个，搞到晚上十二点，</p><p>我发现今天的学习道路越偏越远，一开始我原本是在学mysql的，</p><p>今天早上在学mysql，然后到了中午我不想再window下安装mysql，所以想先去虚拟机上面弄一下mysql</p><p>但是安装好像又有点不一样，当时sudo apt install进程无端端被锁了，然后我就开始找原因，找了蛮久，重启一下虚拟机，没事了 ….然后我就继续安装，最后终于成功了，然后就发现登录不了</p><p>后面捣鼓了一下发现可以直接root用户登录，可以跳过mysql的密码。不过我的云服务器还是没有权限登录，所以其实还是没有搞懂。</p><p>等到终于可以用mysql了（在ubuntu上），然后学习了一会，开始记笔记了哈，然后发现是第一次用typora记载图片类的笔记，因为要给电脑截图嘛，肯定要上传图片的。然后它会默认所有图片都存在C盘里面，哎这我肯定不愿意啦，C盘空间捉襟见肘了都。</p><p>然后就搞了一下想要像以前用marktext一样，默认存到d盘一个位置吧，后面发现无论怎么存，还是会先存在C盘，于是我就想要不用GitHub吧，看看这个行不行，好像是刚好看到csdn上有个方法，看着也不难hhh，然后这个时候下午两三点了，就开始捣鼓用picogo 和 GitHub来完成图床的设置。</p><p>其实这里还是挺快的，没怎么被卡住，上传到GitHub也很顺利，只不过要上梯子，但是上传成功了，我图片显示不出来哇，然后就找了好多方法，发现都不太可行，也没怎么尝试，后面发现是我的一个设定改错了，YAML那个不应该勾选（typora上面的设置），结果就可以了，我还以为是url的问题，，，</p><p>成功了之后吃了个饭，想了想，每次都要开梯子，烦死了，这以后上传也不方便啊，然后就想弄gitee了，结果node的环境配置捣鼓了好久…然后域名一开始也没搞懂，巴拉巴拉，一天就过去了。</p><p>但是！我相信，明天开始用typora就会用的很爽的啦哈哈哈哈，现在的话如果想要选GitHub上传和gitee上传也都挺方便的了，就在picGo那里改一下就好</p><p>好了回宿舍睡觉去了。</p>]]></content>
    
    
    <categories>
      
      <category>各种随笔经验记录</category>
      
      <category>各种软件随笔</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021数据结构课</title>
    <link href="/2021/11/20/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%BA%8C%E4%B8%8B/2021%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE/"/>
    <url>/2021/11/20/%E6%9C%AC%E7%A7%91/%E5%A4%A7%E4%BA%8C%E4%B8%8B/2021%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a><em><u>数据结构</u></em></h1><hr><h3 id="未熟悉的题目"><a href="#未熟悉的题目" class="headerlink" title="未熟悉的题目"></a>未熟悉的题目</h3><h2 id="一-基础练习"><a href="#一-基础练习" class="headerlink" title="一.基础练习"></a>一.基础练习</h2><p>类与对象 点圆运算</p><h2 id="二-顺序表-链表"><a href="#二-顺序表-链表" class="headerlink" title="二..顺序表+链表"></a>二..顺序表+链表</h2><p>股票运行</p><p>类实现(这个搞定了)</p><p>节点交换 （这个有时间再做做，下面那一题也是）</p><p>多项式</p><h2 id="三-栈"><a href="#三-栈" class="headerlink" title="三.栈"></a>三.栈</h2><p>迷宫求解 表达式计算</p><h2 id="四-队列"><a href="#四-队列" class="headerlink" title="四.队列"></a>四.队列</h2><p>组队列</p><p>银行（银行的思路比较复杂，但想清楚了就还好）</p><h2 id="五-串"><a href="#五-串" class="headerlink" title="五.串"></a>五.串</h2><p>kmp算法</p><p>求next指针</p><h2 id="六-树"><a href="#六-树" class="headerlink" title="六.树"></a>六.树</h2><p>1.哈夫曼树的求解编码（之前那周太忙了估计做不了多少题）</p><p>哈夫曼编码后面四题都没来得及认真看</p><p>2.层次遍历（基本上搞懂了，就是用队列存储）</p><p>3.用数组来存储树</p><p>4.二叉树与多叉树&amp;</p><p>树与森林之间的</p><h2 id="七-图"><a href="#七-图" class="headerlink" title="七.图"></a>七.图</h2><p>1.构建邻接表还不是很熟练（稍微复杂）</p><p>2.计算图非零面积</p><p>3.最小生成树 （prim算法和kruskal算法 需要很熟悉）</p><p>4.迪杰斯特拉算法比较难理解</p><p>5.拓扑排序的STL版本（用到了vetor）</p><p>6.关键路径STL版本</p><h2 id="八-查找"><a href="#八-查找" class="headerlink" title="八.查找"></a>八.查找</h2><p>1.链地址法</p><p>二叉排序树的构建</p><p>2.二叉排序树的删除</p><p>3.哈希查找—Trie树</p><hr><h1 id="还未掌握的概念"><a href="#还未掌握的概念" class="headerlink" title="还未掌握的概念"></a>还未掌握的概念</h1><h2 id="1-链表"><a href="#1-链表" class="headerlink" title="1.链表"></a>1.链表</h2><p>C++类的实现，函数的重载，拷贝</p><p>单链表的创建</p><h5 id="循环链表的创建，概念-还有双向链表"><a href="#循环链表的创建，概念-还有双向链表" class="headerlink" title="循环链表的创建，概念 还有双向链表"></a>循环链表的创建，概念 还有双向链表</h5><p>广义表，矩阵的压缩，（机考不考，笔试会有）</p><p><a href="https://www.notion.so/c2027d21a1d745ddbec118c4a4c5dae9">多项式</a></p><h2 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h2><p>链栈的实现</p><h2 id="3-队列"><a href="#3-队列" class="headerlink" title="3.队列"></a>3.队列</h2><p>队列的实现（例如循环队列的定义）</p><p>逆波兰式和波兰式的计算和转化</p><h2 id="4-串"><a href="#4-串" class="headerlink" title="4.串"></a>4.串</h2><p>kmp模式匹配的原理还不太明白，特别是代码，虽然看着简单但想不通原理。</p><h2 id="5-树"><a href="#5-树" class="headerlink" title="5.树"></a>5.树</h2><p>层序遍历的原理：利用队列，根节点进队列，出队列时，让其左右孩子进站</p><p>二叉树之数组存储。</p><p>哈夫曼树的构建，编码与解码（权值赋值等原理）</p><h2 id="6-图"><a href="#6-图" class="headerlink" title="6.图"></a>6.图</h2><p><a href="https://www.notion.so/e82d7b4346be412580a2c743d0eefc1e">图第一周作业</a></p><p><a href="https://www.notion.so/61b0a2be4af548309143a002a28ea0ac">第二周</a></p><p><a href="https://www.notion.so/jb-3bfad75961a942dbb010f3b73ba48967">第三周（真jb难）</a></p><h2 id="7-查找"><a href="#7-查找" class="headerlink" title="7.查找"></a>7.查找</h2><p><a href="https://www.notion.so/1e3f6505ea9d4c22bba36e80f05bb975">静态查找和二叉排序树</a></p><p><a href="https://www.notion.so/37b8c670aad5461ba52f0e8944029003">哈希查找</a></p><p>多路查找树概念需要掌握，可能会考</p><p>平衡二叉树的构建原理要掌握</p><h2 id="8-排序"><a href="#8-排序" class="headerlink" title="8.排序"></a>8.排序</h2><p>排序肯定是所有算法都要掌握的了</p><p>基数排序书上没有，虽然不难，但一定要掌握</p>]]></content>
    
    
    <categories>
      
      <category>本科</category>
      
      <category>大二下</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RPA+AI智能挑战赛技术报告总结</title>
    <link href="/2021/09/20/%E5%A4%A7%E5%AD%A6%E7%AB%9E%E8%B5%9B/RPA+AI%E6%8C%91%E6%88%98%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2021/09/20/%E5%A4%A7%E5%AD%A6%E7%AB%9E%E8%B5%9B/RPA+AI%E6%8C%91%E6%88%98%E8%B5%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="RPA-AI智能挑战赛-技术报告总结"><a href="#RPA-AI智能挑战赛-技术报告总结" class="headerlink" title="RPA+AI智能挑战赛 技术报告总结"></a>RPA+AI智能挑战赛 技术报告总结</h1><hr><h2 id="大概框架（题目如下）"><a href="#大概框架（题目如下）" class="headerlink" title="大概框架（题目如下）"></a>大概框架（题目如下）</h2><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20220921153623937.png" alt="image-20220921153623937"></p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20220921153636285.png" alt="image-20220921153636285"></p><p><strong>上面就是我们的大概框架流程图了</strong></p><p>主要是围绕<strong>校园赛事</strong>这样一个主题来定制一个智能机器人的流程，</p><p>总共有4个主要模块，然后模块执行完后会回到最初页面等待</p><p><img src="https://gitee.com/cheesheep/typora-photo-bed/raw/master/Timg/image-20220921154008654.png" alt="image-20220921154008654"></p><p>总的来说就是杂糅了各种功能，不过最主要的功能是<strong>积分排行榜</strong>，可以自动处理数据，并且发送到公众号上面。</p><hr><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="积分排行榜"><a href="#积分排行榜" class="headerlink" title="积分排行榜"></a>积分排行榜</h3><ul><li>首先是收集数据，我们自己拟定一张excel表出来，里面有每场比赛的赛况</li><li>赛况是有固定格式去填写的，方便后面代码读取可以规范统一去取数据</li><li>取得数据后进行自动处理，将所有比赛的数据填到一张新的excel表里面</li><li>并且进行排名和统计，excel里面有一个功能是可以读取其他文件夹下的excel表里面的数据</li><li>在做完表后就可以自动发送到秀米上面制作好推文，然后等待审批通过就可以发公众号推文了</li></ul><h3 id="自动时间排班"><a href="#自动时间排班" class="headerlink" title="自动时间排班"></a>自动时间排班</h3><ul><li>这里我们没有用RPA软件给出的接口，而是自己编写了一串python程序进行数据的处理</li><li>首先是收集每个队伍给出的空闲时间（在一周里面挑大概时间）</li><li>然后根据这些空闲时间来安排所有队伍之间的比赛，保证没有时间上的冲突</li><li>如果实在会和给出的时间表有冲突则要通知比赛队伍，协商</li></ul><h3 id="保险录入"><a href="#保险录入" class="headerlink" title="保险录入"></a>保险录入</h3><ul><li>这个就比较简单，因为比赛队员都要买保险（为了安全起见）</li><li>然后也是要一份excel表格收集好个人信息</li><li>然后再去某个保险官网上面进行页面的操作，帮忙录入身份证等信息</li></ul><h3 id="保单自动发送"><a href="#保单自动发送" class="headerlink" title="保单自动发送"></a>保单自动发送</h3><ul><li>这个是利用邮件的协议，RPA的软件里面提供有接口用于发送邮件</li></ul>]]></content>
    
    
    <categories>
      
      <category>大学竞赛</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
